<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Eric Shen Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ericshen.xyz/"/>
  <updated>2020-03-31T09:39:47.414Z</updated>
  <id>https://ericshen.xyz/</id>
  
  <author>
    <name>Eric Shen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Gitlab持续集成CI CD(Gitlab Runner篇)</title>
    <link href="https://ericshen.xyz/2019/10/16/Gitlab%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90CI%20CD(Gitlab%20Runner%E7%AF%87)/"/>
    <id>https://ericshen.xyz/2019/10/16/Gitlab%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90CI%20CD(Gitlab%20Runner%E7%AF%87)/</id>
    <published>2019-10-16T03:04:16.000Z</published>
    <updated>2020-03-31T09:39:47.414Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-GitLab-Runner-简介"><a href="#1-GitLab-Runner-简介" class="headerlink" title="1. GitLab Runner 简介"></a>1. GitLab Runner 简介</h1><p>一般来说，构建任务都会占用很多的系统资源 (譬如编译代码)，而 GitLab CI 又是 GitLab 的一部分，如果由 GitLab CI 来运行构建任务的话，在执行构建任务的时候，GitLab 的性能会大幅下降。</p><p>GitLab CI 最大的作用是管理各个项目的构建状态，因此，运行构建任务这种浪费资源的事情就交给 GitLab Runner 来做！</p><p>因为 GitLab Runner 可以安装到不同的机器上，所以在构建任务运行期间并不会影响到 GitLab 的性能。</p><blockquote><p>本文主要内容：基于Docker按照<code>gitlab-runner</code>，并集成<code>maven/jdk/docker/docker-compose</code></p></blockquote><a id="more"></a><h1 id="2-基于-Docker-安装-GitLab-Runner"><a href="#2-基于-Docker-安装-GitLab-Runner" class="headerlink" title="2. 基于 Docker 安装 GitLab Runner"></a>2. 基于 Docker 安装 GitLab Runner</h1><blockquote><p>环境</p></blockquote><ul><li>Ubuntu: 18.04.3 LTS</li><li>Docker: 19.03.3, build a872fc2f86</li><li>Docker-compose: 1.24.0, build 0aa59064</li><li>Harbor: v1.9.0 （可用nexus或者registry替代）</li><li>Gilab中文社区版: twang2218/gitlab-ce-zh:11.1.4</li></ul><h2 id="2-1-准备工作"><a href="#2-1-准备工作" class="headerlink" title="2.1 准备工作"></a>2.1 准备工作</h2><ul><li>创建工作目录 </li></ul><p><code>mkdir -p /usr/local/docker/runner</code></p><ul><li>创建构建目录 </li></ul><p><code>mkdir -p /usr/local/docker/runner/environment</code></p><ul><li><p>下载 <a href="https://www.oracle.com/technetwork/java/javase/downloads/java-archive-javase8-2177648.html" target="_blank" rel="noopener"><code>jdk-8u152-linux-x64.tar.gz</code> </a></p></li><li><p>下载  <a href="https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.6.1/apache-maven-3.6.1-bin.tar.gz" target="_blank" rel="noopener"><code>apache-maven-3.6.1-bin.tar.gz</code></a></p></li><li><p><code>cp jdk-8u152-linux-x64.tar.gz /usr/local/docker/runner/environment</code></p></li><li><p><code>cp apache-maven-3.6.1-bin.tar.gz /usr/local/docker/runner/environment</code></p><blockquote><p>可选：若有nexus伺服</p><p>配置<code>maven</code>的<code>setting.xml</code>文件至<code>/usr/local/docker/runner/environment</code>目录下</p></blockquote></li></ul><h2 id="2-2-daemon-json"><a href="#2-2-daemon-json" class="headerlink" title="2.2 daemon.json"></a>2.2 daemon.json</h2><p>在 <code>/usr/local/docker/runner/environment</code> 目录下创建 daemon.json，用于配置镜像加速器和仓库地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo tee /usr/<span class="built_in">local</span>/docker/runner/environment/daemon.json &lt;&lt;-<span class="string">'EOF'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [</span><br><span class="line">  <span class="string">"https://registry.docker-cn.com"</span> <span class="comment">#docker-cn加速器</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"insecure-registries"</span>: [</span><br><span class="line">    <span class="string">"192.168.10.133:5000"</span>   <span class="comment">#harbor仓库地址</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><blockquote><p>推荐配置阿里云镜像加速器，可参考<a href="https://ericshen.coding.me/2019/10/15/Linux安装Dokcer-CE/" target="_blank" rel="noopener">Linux安装Dokcer CE 3.5</a></p></blockquote><h2 id="2-3-Dockerfile"><a href="#2-3-Dockerfile" class="headerlink" title="2.3 Dockerfile"></a>2.3 Dockerfile</h2><p>在<code>/usr/local/docker/runner/environment</code> 目录下创建 <code>Dockerfile</code></p><p><code>vim /usr/local/docker/runner/environment/Dockerfile</code></p><p><strong>内容如下</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> gitlab/gitlab-runner</span><br><span class="line"><span class="keyword">MAINTAINER</span> EricShen &lt;ahsbt@<span class="number">126</span>.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改软件源</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">'deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse'</span> &gt; /etc/apt/sources.list &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span> <span class="string">'deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse'</span> &gt;&gt; /etc/apt/sources.list &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span> <span class="string">'deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse'</span> &gt;&gt; /etc/apt/sources.list &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span> <span class="string">'deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse'</span> &gt;&gt; /etc/apt/sources.list &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apt-get update -y &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apt-get clean</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过官方脚本安装 Docker</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> curl -fsSL get.docker.com -o get-docker.sh &amp;&amp; \</span></span><br><span class="line"><span class="bash">    sh get-docker.sh --mirror Aliyun</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> daemon.json /etc/docker/daemon.json</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Docker Compose</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/<span class="built_in">local</span>/bin</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> wget https://raw.githubusercontent.com/topsale/resources/master/docker/docker-compose</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chmod +x docker-compose</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Java</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p /usr/<span class="built_in">local</span>/java</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/<span class="built_in">local</span>/java</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> jdk-8u152-linux-x64.tar.gz /usr/<span class="built_in">local</span>/java</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> tar -zxvf jdk-8u152-linux-x64.tar.gz &amp;&amp; \</span></span><br><span class="line"><span class="bash">    rm -fr jdk-8u152-linux-x64.tar.gz</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Maven</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p /usr/<span class="built_in">local</span>/maven</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/<span class="built_in">local</span>/maven</span></span><br><span class="line"><span class="comment"># 若未下载maven，此处可下载</span></span><br><span class="line"><span class="comment"># RUN wget https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.6.1/apache-maven-3.6.1-bin.tar.gz</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> apache-maven-3.6.1-bin.tar.gz /usr/<span class="built_in">local</span>/maven</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> tar -zxvf apache-maven-3.6.1-bin.tar.gz &amp;&amp; \</span></span><br><span class="line"><span class="bash">    rm -fr apache-maven-3.6.1-bin.tar.gz</span></span><br><span class="line"><span class="comment"># 可选：配置maven的setting.xml</span></span><br><span class="line"><span class="comment"># COPY settings.xml /usr/local/maven/apache-maven-3.6.1/conf/settings.xml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME /usr/local/java/jdk1.<span class="number">8.0</span>_152</span><br><span class="line"><span class="keyword">ENV</span> MAVEN_HOME /usr/local/maven/apache-maven-<span class="number">3.6</span>.<span class="number">1</span></span><br><span class="line"><span class="keyword">ENV</span> PATH $PATH:$JAVA_HOME/bin:$MAVEN_HOME/bin</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /</span></span><br></pre></td></tr></table></figure><h2 id="2-4-docker-compose-yml"><a href="#2-4-docker-compose-yml" class="headerlink" title="2.4 docker-compose.yml"></a>2.4 docker-compose.yml</h2><p>在 <code>/usr/local/docker/runner</code> 目录下创建 <code>docker-compose.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.1'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  gitlab-runner:</span></span><br><span class="line"><span class="attr">    build:</span> <span class="string">environment</span> <span class="comment">#指定构建路径</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">gitlab-runner</span></span><br><span class="line"><span class="attr">    privileged:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./config:/etc/gitlab-runner</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br></pre></td></tr></table></figure><h2 id="2-5-构建镜像"><a href="#2-5-构建镜像" class="headerlink" title="2.5 构建镜像"></a>2.5 构建镜像</h2><blockquote><p>确认所需文件</p></blockquote><p><code>ls /usr/local/docker/runner</code> 有</p><ul><li><code>docker-compose.yml</code>文件</li></ul><p><code>ls /usr/local/docker/runner/environment</code>有</p><ul><li><p><code>apache-maven-3.6.1-bin.tar.gz</code></p></li><li><p><code>daemon.json</code>  </p></li><li><p><code>Dockerfile</code>  </p></li><li><p><code>jdk-8u152-linux-x64.tar.gz</code>  </p></li><li><p><code>setting.xml</code></p></li></ul><p><strong>构建镜像</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/docker/runner</span><br><span class="line">docker-compose build</span><br></pre></td></tr></table></figure><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">...</span>省略<span class="string">...</span></span><br><span class="line">Successfully build xxxxxxx</span><br><span class="line">Successfully tagged runner_gitlab-runner <span class="comment"># 构建成功</span></span><br></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker images <span class="comment">#查看镜像</span></span><br><span class="line">REPOSITORY                               <span class="keyword">TAG</span>                 <span class="title">IMAGE</span> ID            CREATED             SIZE</span><br><span class="line">runner_gitlab-runner                     latest              <span class="number">74</span>b8379cca15        <span class="number">41</span> hours ago        <span class="number">1.37</span>GB</span><br></pre></td></tr></table></figure><h1 id="3-注册-Runner"><a href="#3-注册-Runner" class="headerlink" title="3. 注册 Runner"></a>3. 注册 Runner</h1><p>首先获取<code>Gitlab上项目路径=&gt;设置=&gt;CI/CD=&gt;Runner=&gt;Setup a specific Runner manually</code>下<code>Gitlab</code>地址和<code>token</code></p><ul><li>Gitlab中文社区版</li></ul><p><img src="https://i.loli.net/2019/10/16/vFhE859ZPDTlSc6.png" alt="Gitlab中文社区版"></p><ul><li>英文原版Gitlab社区版</li></ul><p><img src="https://i.loli.net/2019/10/16/YgnpH2NKRLmi8ac.png" alt="英文原版Gitlab社区版"></p><p>然后到服务器中执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行</span></span><br><span class="line">docker <span class="built_in">exec</span> -it gitlab-runner gitlab-runner register </span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入 GitLab 地址</span></span><br><span class="line">Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com/):</span><br><span class="line">http://192.192.1.12/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入 GitLab Token</span></span><br><span class="line">Please enter the gitlab-ci token <span class="keyword">for</span> this runner:</span><br><span class="line">PgC_sRjg3qZgrU4WGvjY</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入 Runner 的描述</span></span><br><span class="line">Please enter the gitlab-ci description <span class="keyword">for</span> this runner:</span><br><span class="line"><span class="comment"># 可以为空</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 Tag，可以用于指定在构建规定的 tag 时触发 ci</span></span><br><span class="line">Please enter the gitlab-ci tags <span class="keyword">for</span> this runner (comma separated):</span><br><span class="line">deploy</span><br><span class="line"></span><br><span class="line">Registering runner... succeeded                     runner=PgC_sRjg</span><br><span class="line"><span class="comment"># 选择 runner 执行器，这里我们选择的是 shell</span></span><br><span class="line">Please enter the executor: virtualbox, docker+machine, parallels, shell, ssh, docker-ssh+machine, kubernetes, docker, docker-ssh:</span><br><span class="line">shell</span><br><span class="line"></span><br><span class="line">Runner registered successfully. Feel free to start it, but <span class="keyword">if</span> it<span class="string">'s running already the config should be automatically reloaded!</span></span><br></pre></td></tr></table></figure><h1 id="4-使用-Runner"><a href="#4-使用-Runner" class="headerlink" title="4. 使用 Runner"></a>4. 使用 Runner</h1><blockquote><p>进入你想要进行CI/CD的项目中（FYI: 通过<a href="https://start.spring.io/" target="_blank" rel="noopener">Spring Initializr</a>快速构架一个基于maven构建的Spring Boot项目）</p></blockquote><ul><li>编写<code>Dockerfile</code></li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>-jre  <span class="comment">#基于openjdk构建镜像</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> EricShen &lt;ahsbt@<span class="number">126</span>.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> APP_VERSION <span class="number">1.0</span>.<span class="number">0</span>-SNAPSHOT</span><br><span class="line"><span class="keyword">ENV</span> DOCKERIZE_VERSION v0.<span class="number">6.1</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> wget https://github.com/jwilder/dockerize/releases/download/<span class="variable">$DOCKERIZE_VERSION</span>/dockerize-linux-amd64-<span class="variable">$DOCKERIZE_VERSION</span>.tar.gz \</span></span><br><span class="line"><span class="bash">    &amp;&amp; tar -C /usr/<span class="built_in">local</span>/bin -xzvf dockerize-linux-amd64-<span class="variable">$DOCKERIZE_VERSION</span>.tar.gz \</span></span><br><span class="line"><span class="bash">    &amp;&amp; rm dockerize-linux-amd64-<span class="variable">$DOCKERIZE_VERSION</span>.tar.gz</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir /app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> <span class="built_in">test</span>-<span class="variable">$APP_VERSION</span>.jar /app/app.jar</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"dockerize"</span>, <span class="string">"-timeout"</span>, <span class="string">"5m"</span>, <span class="string">"-wait"</span>, <span class="string">"tcp://192.192.1.12:3306"</span>, <span class="string">"java"</span>, <span class="string">"-Djava.security.egd=file:/dev/./urandom"</span>, <span class="string">"-jar"</span>, <span class="string">"/app/app.jar"</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><ul><li>编写<code>docker-compose.yml</code></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.1'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  test_java:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="number">192.192</span><span class="number">.1</span><span class="number">.12</span><span class="string">:9090/test/test:v1.0.0</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">test_container</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">8080</span><span class="string">:8080</span></span><br></pre></td></tr></table></figure><ul><li>编写<code>.gitlab-ci.yml</code>文件，添加到项目根路径下</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">build</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">push</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">run</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">clean</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#构建</span></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">build</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">/usr/local/maven/apache-maven-3.6.1/bin/mvn</span> <span class="string">clean</span> <span class="string">package</span> <span class="comment"># mvn 打jar包</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">cp</span> <span class="string">target/test-1.0.0-SNAPSHOT.jar</span> <span class="string">docker</span> </span><br><span class="line"><span class="bullet">    -</span> <span class="string">cd</span> <span class="string">docker</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">docker</span> <span class="string">build</span> <span class="bullet">-t</span> <span class="number">192.192</span><span class="number">.1</span><span class="number">.12</span><span class="string">:9090/test/test:v1.0.0</span> <span class="string">.</span> <span class="comment">#构建镜像</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#推送</span></span><br><span class="line"><span class="attr">push:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">push</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">docker</span> <span class="string">login</span> <span class="number">192.192</span><span class="number">.1</span><span class="number">.12</span><span class="string">:9090</span> <span class="bullet">-u</span> <span class="string">admin</span> <span class="bullet">-p</span> <span class="string">Harbor12345</span> <span class="comment"># 登陆Harbor仓库</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">docker</span> <span class="string">push</span> <span class="number">192.192</span><span class="number">.1</span><span class="number">.12</span><span class="string">:9090/test/test:v1.0.0</span> <span class="comment"># 推送镜像至Harbor</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#运行</span></span><br><span class="line"><span class="attr">run:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">run</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">cd</span> <span class="string">docker</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">docker-compose</span> <span class="string">down</span> <span class="comment"># 关闭容器</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">docker-compose</span> <span class="string">up</span> <span class="bullet">-d</span> <span class="comment"># 启动容器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#清理</span></span><br><span class="line"><span class="attr">clean:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">clean</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">docker</span> <span class="string">image</span> <span class="string">prune</span> <span class="bullet">-f</span> <span class="comment"># 清理虚悬镜像</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/10/16/1hJDtilvoK89Qzu.png" alt="image.png"></p><h1 id="5-测试集成效果"><a href="#5-测试集成效果" class="headerlink" title="5. 测试集成效果"></a>5. 测试集成效果</h1><p>所有操作完成后 <code>push</code> 代码到服务器，<code>Gitlab</code>会自动进行构建，在<code>CI/CD</code>的<code>Pipeline</code>中查看构建的结果：</p><p><img src="https://i.loli.net/2019/10/16/8mq5QSo4YNl2h6F.png" alt="image.png"></p><ul><li>点击进入查看每条<code>Pipeline</code>的详情，由下图可见<code>Pipeline</code>有4个<code>Stages</code>，<code>build=&gt;push=&gt;run=&gt;clean</code></li></ul><p><img src="https://i.loli.net/2019/10/16/WsRMSiQz1kqp7X6.png" alt="image.png"></p><ul><li>此时可以看到构建完成，通过访问8080端口即可查看项目已经成功启动</li></ul><h1 id="6-其它命令"><a href="#6-其它命令" class="headerlink" title="6. 其它命令"></a>6. 其它命令</h1><ul><li><p>删除注册信息<br><code>docker exec -it gitlab-runner gitlab-runner --name &quot;名称&quot;</code></p></li><li><p>删除所有注册信息</p><p><code>docker exec -it gitlab-runner gitlab-runner  unregister --all-runners</code></p></li><li><p>查看注册列表<br><code>docker exec -it gitlab-runner gitlab-runner list</code></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-GitLab-Runner-简介&quot;&gt;&lt;a href=&quot;#1-GitLab-Runner-简介&quot; class=&quot;headerlink&quot; title=&quot;1. GitLab Runner 简介&quot;&gt;&lt;/a&gt;1. GitLab Runner 简介&lt;/h1&gt;&lt;p&gt;一般来说，构建任务都会占用很多的系统资源 (譬如编译代码)，而 GitLab CI 又是 GitLab 的一部分，如果由 GitLab CI 来运行构建任务的话，在执行构建任务的时候，GitLab 的性能会大幅下降。&lt;/p&gt;
&lt;p&gt;GitLab CI 最大的作用是管理各个项目的构建状态，因此，运行构建任务这种浪费资源的事情就交给 GitLab Runner 来做！&lt;/p&gt;
&lt;p&gt;因为 GitLab Runner 可以安装到不同的机器上，所以在构建任务运行期间并不会影响到 GitLab 的性能。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文主要内容：基于Docker按照&lt;code&gt;gitlab-runner&lt;/code&gt;，并集成&lt;code&gt;maven/jdk/docker/docker-compose&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="PaaS" scheme="https://ericshen.xyz/categories/PaaS/"/>
    
      <category term="Docker" scheme="https://ericshen.xyz/categories/PaaS/Docker/"/>
    
    
      <category term="gitlab" scheme="https://ericshen.xyz/tags/gitlab/"/>
    
      <category term="docker" scheme="https://ericshen.xyz/tags/docker/"/>
    
      <category term="gitlab-runner" scheme="https://ericshen.xyz/tags/gitlab-runner/"/>
    
      <category term="CI/CD" scheme="https://ericshen.xyz/tags/CI-CD/"/>
    
  </entry>
  
  <entry>
    <title>Redis Sentinel 集群部署</title>
    <link href="https://ericshen.xyz/2019/09/25/Redis-Sentinel-%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/"/>
    <id>https://ericshen.xyz/2019/09/25/Redis-Sentinel-%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/</id>
    <published>2019-09-25T09:49:32.000Z</published>
    <updated>2020-03-31T09:39:41.812Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Redis 集群可以在一组 redis 节点之间实现高可用性和 sharding。在集群中会有 1 个 master 和多个 slave 节点。当 master 节点失效时，应选举出一个 slave 节点作为新的 master。然而 Redis 本身(包括它的很多客户端)没有实现自动故障发现并进行主备切换的能力，需要外部的监控方案来实现自动故障恢复。</p><p>Redis Sentinel 是官方推荐的高可用性解决方案。它是 Redis 集群的监控管理工具，可以提供节点监控、通知、自动故障恢复和客户端配置发现服务。</p><a id="more"></a><p><img src="https://i.loli.net/2019/10/15/4XWpR7vizfPs51Q.png" alt="image.png"></p><h2 id="Redis-Sentinel-核心配置"><a href="#Redis-Sentinel-核心配置" class="headerlink" title="Redis Sentinel 核心配置"></a>Redis Sentinel 核心配置</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Example sentinel.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># *** IMPORTANT ***</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># By default Sentinel will not be reachable from interfaces different than</span></span><br><span class="line"><span class="comment"># localhost, either use the 'bind' directive to bind to a list of network</span></span><br><span class="line"><span class="comment"># interfaces, or disable protected mode with "protected-mode no" by</span></span><br><span class="line"><span class="comment"># adding it to this configuration file.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Before doing that MAKE SURE the instance is protected from the outside</span></span><br><span class="line"><span class="comment"># world via firewalling or other means.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># For example you may use one of the following:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># bind 127.0.0.1 192.168.1.1</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># protected-mode no</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># port &lt;sentinel-port&gt;</span></span><br><span class="line"><span class="comment"># The port that this sentinel instance will run on</span></span><br><span class="line"><span class="attr">port</span> <span class="string">26379</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sentinel announce-ip &lt;ip&gt;</span></span><br><span class="line"><span class="comment"># sentinel announce-port &lt;port&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The above two configuration directives are useful in environments where,</span></span><br><span class="line"><span class="comment"># because of NAT, Sentinel is reachable from outside via a non-local address.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># When announce-ip is provided, the Sentinel will claim the specified IP address</span></span><br><span class="line"><span class="comment"># in HELLO messages used to gossip its presence, instead of auto-detecting the</span></span><br><span class="line"><span class="comment"># local address as it usually does.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Similarly when announce-port is provided and is valid and non-zero, Sentinel</span></span><br><span class="line"><span class="comment"># will announce the specified TCP port.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The two options don't need to be used together, if only announce-ip is</span></span><br><span class="line"><span class="comment"># provided, the Sentinel will announce the specified IP and the server port</span></span><br><span class="line"><span class="comment"># as specified by the "port" option. If only announce-port is provided, the</span></span><br><span class="line"><span class="comment"># Sentinel will announce the auto-detected local IP and the specified port.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Example:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># sentinel announce-ip 1.2.3.4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dir &lt;working-directory&gt;</span></span><br><span class="line"><span class="comment"># Every long running process should have a well-defined working directory.</span></span><br><span class="line"><span class="comment"># For Redis Sentinel to chdir to /tmp at startup is the simplest thing</span></span><br><span class="line"><span class="comment"># for the process to don't interfere with administrative tasks such as</span></span><br><span class="line"><span class="comment"># unmounting filesystems.</span></span><br><span class="line"><span class="attr">dir</span> <span class="string">/tmp</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;redis-port&gt; &lt;quorum&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Tells Sentinel to monitor this master, and to consider it in O_DOWN</span></span><br><span class="line"><span class="comment"># (Objectively Down) state only if at least &lt;quorum&gt; sentinels agree.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Note that whatever is the ODOWN quorum, a Sentinel will require to</span></span><br><span class="line"><span class="comment"># be elected by the majority of the known Sentinels in order to</span></span><br><span class="line"><span class="comment"># start a failover, so no failover can be performed in minority.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Slaves are auto-discovered, so you don't need to specify slaves in</span></span><br><span class="line"><span class="comment"># any way. Sentinel itself will rewrite this configuration file adding</span></span><br><span class="line"><span class="comment"># the slaves using additional configuration options.</span></span><br><span class="line"><span class="comment"># Also note that the configuration file is rewritten when a</span></span><br><span class="line"><span class="comment"># slave is promoted to master.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># <span class="doctag">Note:</span> master name should not include special characters or spaces.</span></span><br><span class="line"><span class="comment"># The valid charset is A-z 0-9 and the three characters ".-_".</span></span><br><span class="line"><span class="attr">sentinel</span> <span class="string">monitor mymaster 127.0.0.1 6379 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sentinel auth-pass &lt;master-name&gt; &lt;password&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Set the password to use to authenticate with the master and slaves.</span></span><br><span class="line"><span class="comment"># Useful if there is a password set in the Redis instances to monitor.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Note that the master password is also used for slaves, so it is not</span></span><br><span class="line"><span class="comment"># possible to set a different password in masters and slaves instances</span></span><br><span class="line"><span class="comment"># if you want to be able to monitor these instances with Sentinel.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># However you can have Redis instances without the authentication enabled</span></span><br><span class="line"><span class="comment"># mixed with Redis instances requiring the authentication (as long as the</span></span><br><span class="line"><span class="comment"># password set is the same for all the instances requiring the password) as</span></span><br><span class="line"><span class="comment"># the AUTH command will have no effect in Redis instances with authentication</span></span><br><span class="line"><span class="comment"># switched off.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Example:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># sentinel auth-pass mymaster MySUPER--secret-0123passw0rd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sentinel down-after-milliseconds &lt;master-name&gt; &lt;milliseconds&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Number of milliseconds the master (or any attached slave or sentinel) should</span></span><br><span class="line"><span class="comment"># be unreachable (as in, not acceptable reply to PING, continuously, for the</span></span><br><span class="line"><span class="comment"># specified period) in order to consider it in S_DOWN state (Subjectively</span></span><br><span class="line"><span class="comment"># Down).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Default is 30 seconds.</span></span><br><span class="line"><span class="attr">sentinel</span> <span class="string">down-after-milliseconds mymaster 30000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sentinel parallel-syncs &lt;master-name&gt; &lt;numslaves&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># How many slaves we can reconfigure to point to the new slave simultaneously</span></span><br><span class="line"><span class="comment"># during the failover. Use a low number if you use the slaves to serve query</span></span><br><span class="line"><span class="comment"># to avoid that all the slaves will be unreachable at about the same</span></span><br><span class="line"><span class="comment"># time while performing the synchronization with the master.</span></span><br><span class="line"><span class="attr">sentinel</span> <span class="string">parallel-syncs mymaster 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sentinel failover-timeout &lt;master-name&gt; &lt;milliseconds&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Specifies the failover timeout in milliseconds. It is used in many ways:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># - The time needed to re-start a failover after a previous failover was</span></span><br><span class="line"><span class="comment">#   already tried against the same master by a given Sentinel, is two</span></span><br><span class="line"><span class="comment">#   times the failover timeout.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># - The time needed for a slave replicating to a wrong master according</span></span><br><span class="line"><span class="comment">#   to a Sentinel current configuration, to be forced to replicate</span></span><br><span class="line"><span class="comment">#   with the right master, is exactly the failover timeout (counting since</span></span><br><span class="line"><span class="comment">#   the moment a Sentinel detected the misconfiguration).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># - The time needed to cancel a failover that is already in progress but</span></span><br><span class="line"><span class="comment">#   did not produced any configuration change (SLAVEOF NO ONE yet not</span></span><br><span class="line"><span class="comment">#   acknowledged by the promoted slave).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># - The maximum time a failover in progress waits for all the slaves to be</span></span><br><span class="line"><span class="comment">#   reconfigured as slaves of the new master. However even after this time</span></span><br><span class="line"><span class="comment">#   the slaves will be reconfigured by the Sentinels anyway, but not with</span></span><br><span class="line"><span class="comment">#   the exact parallel-syncs progression as specified.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Default is 3 minutes.</span></span><br><span class="line"><span class="attr">sentinel</span> <span class="string">failover-timeout mymaster 180000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SCRIPTS EXECUTION</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># sentinel notification-script and sentinel reconfig-script are used in order</span></span><br><span class="line"><span class="comment"># to configure scripts that are called to notify the system administrator</span></span><br><span class="line"><span class="comment"># or to reconfigure clients after a failover. The scripts are executed</span></span><br><span class="line"><span class="comment"># with the following rules for error handling:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If script exits with "1" the execution is retried later (up to a maximum</span></span><br><span class="line"><span class="comment"># number of times currently set to 10).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If script exits with "2" (or an higher value) the script execution is</span></span><br><span class="line"><span class="comment"># not retried.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If script terminates because it receives a signal the behavior is the same</span></span><br><span class="line"><span class="comment"># as exit code 1.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># A script has a maximum running time of 60 seconds. After this limit is</span></span><br><span class="line"><span class="comment"># reached the script is terminated with a SIGKILL and the execution retried.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># NOTIFICATION SCRIPT</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># sentinel notification-script &lt;master-name&gt; &lt;script-path&gt;</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># Call the specified notification script for any sentinel event that is</span></span><br><span class="line"><span class="comment"># generated in the WARNING level (for instance -sdown, -odown, and so forth).</span></span><br><span class="line"><span class="comment"># This script should notify the system administrator via email, SMS, or any</span></span><br><span class="line"><span class="comment"># other messaging system, that there is something wrong with the monitored</span></span><br><span class="line"><span class="comment"># Redis systems.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The script is called with just two arguments: the first is the event type</span></span><br><span class="line"><span class="comment"># and the second the event description.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The script must exist and be executable in order for sentinel to start if</span></span><br><span class="line"><span class="comment"># this option is provided.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Example:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># sentinel notification-script mymaster /var/redis/notify.sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CLIENTS RECONFIGURATION SCRIPT</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># sentinel client-reconfig-script &lt;master-name&gt; &lt;script-path&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># When the master changed because of a failover a script can be called in</span></span><br><span class="line"><span class="comment"># order to perform application-specific tasks to notify the clients that the</span></span><br><span class="line"><span class="comment"># configuration has changed and the master is at a different address.</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># The following arguments are passed to the script:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># &lt;master-name&gt; &lt;role&gt; &lt;state&gt; &lt;from-ip&gt; &lt;from-port&gt; &lt;to-ip&gt; &lt;to-port&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># &lt;state&gt; is currently always "failover"</span></span><br><span class="line"><span class="comment"># &lt;role&gt; is either "leader" or "observer"</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># The arguments from-ip, from-port, to-ip, to-port are used to communicate</span></span><br><span class="line"><span class="comment"># the old address of the master and the new address of the elected slave</span></span><br><span class="line"><span class="comment"># (now a master).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This script should be resistant to multiple invocations.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Example:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># sentinel client-reconfig-script mymaster /var/redis/reconfig.sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SECURITY</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># By default SENTINEL SET will not be able to change the notification-script</span></span><br><span class="line"><span class="comment"># and client-reconfig-script at runtime. This avoids a trivial security issue</span></span><br><span class="line"><span class="comment"># where clients can set the script to anything and trigger a failover in order</span></span><br><span class="line"><span class="comment"># to get the program executed.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sentinel</span> <span class="string">deny-scripts-reconfig yes</span></span><br></pre></td></tr></table></figure><h2 id="搭建-Redis-集群"><a href="#搭建-Redis-集群" class="headerlink" title="搭建 Redis 集群"></a>搭建 Redis 集群</h2><ul><li><p>搭建一主两从环境，docker-compose.yml 配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.1'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  sentinel1:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">redis-sentinel-1</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">26379</span><span class="string">:26379</span></span><br><span class="line"><span class="attr">    command:</span> <span class="string">redis-sentinel</span> <span class="string">/usr/local/etc/redis/sentinel.conf</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./sentinel1.conf:/usr/local/etc/redis/sentinel.conf</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  sentinel2:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">redis-sentinel-2</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">26380</span><span class="string">:26379</span></span><br><span class="line"><span class="attr">    command:</span> <span class="string">redis-sentinel</span> <span class="string">/usr/local/etc/redis/sentinel.conf</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./sentinel2.conf:/usr/local/etc/redis/sentinel.conf</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  sentinel3:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">redis-sentinel-3</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">26381</span><span class="string">:26379</span></span><br><span class="line"><span class="attr">    command:</span> <span class="string">redis-sentinel</span> <span class="string">/usr/local/etc/redis/sentinel.conf</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./sentinel3.conf:/usr/local/etc/redis/sentinel.conf</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="搭建-Sentinel-集群"><a href="#搭建-Sentinel-集群" class="headerlink" title="搭建 Sentinel 集群"></a>搭建 Sentinel 集群</h2><ul><li><p>我们至少需要创建三个 Sentinel 服务，docker-compose.yml 配置如下：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">version</span>: <span class="string">'3.1'</span></span><br><span class="line"><span class="attribute">services</span>:</span><br><span class="line">  <span class="attribute">sentinel1</span>:</span><br><span class="line">    <span class="attribute">image</span>: redis</span><br><span class="line">    <span class="attribute">container_name</span>: redis-sentinel-<span class="number">1</span></span><br><span class="line">    <span class="attribute">ports</span>:</span><br><span class="line">      - <span class="number">26379</span>:<span class="number">26379</span></span><br><span class="line">    <span class="attribute">command</span>: redis-sentinel /usr/local/etc/redis/sentinel.conf</span><br><span class="line">    <span class="attribute">volumes</span>:</span><br><span class="line">      - ./sentinel1.<span class="attribute">conf</span>:/usr/local/etc/redis/sentinel.conf</span><br><span class="line"></span><br><span class="line">  <span class="attribute">sentinel2</span>:</span><br><span class="line">    <span class="attribute">image</span>: redis</span><br><span class="line">    <span class="attribute">container_name</span>: redis-sentinel-<span class="number">2</span></span><br><span class="line">    <span class="attribute">ports</span>:</span><br><span class="line">      - <span class="number">26380</span>:<span class="number">26379</span></span><br><span class="line">    <span class="attribute">command</span>: redis-sentinel /usr/local/etc/redis/sentinel.conf</span><br><span class="line">    <span class="attribute">volumes</span>:</span><br><span class="line">      - ./sentinel2.<span class="attribute">conf</span>:/usr/local/etc/redis/sentinel.conf</span><br><span class="line"></span><br><span class="line">  <span class="attribute">sentinel3</span>:</span><br><span class="line">    <span class="attribute">image</span>: redis</span><br><span class="line">    <span class="attribute">container_name</span>: redis-sentinel-<span class="number">3</span></span><br><span class="line">    <span class="attribute">ports</span>:</span><br><span class="line">      - <span class="number">26381</span>:<span class="number">26379</span></span><br><span class="line">    <span class="attribute">command</span>: redis-sentinel /usr/local/etc/redis/sentinel.conf</span><br><span class="line">    <span class="attribute">volumes</span>:</span><br><span class="line">      - ./sentinel3.<span class="attribute">conf</span>:/usr/local/etc/redis/sentinel.conf</span><br></pre></td></tr></table></figure></li></ul><h3 id="修改-Sentinel-配置文件"><a href="#修改-Sentinel-配置文件" class="headerlink" title="修改 Sentinel 配置文件"></a>修改 Sentinel 配置文件</h3><ul><li><p>需要三份 sentinel.conf 配置文件，分别为 <code>sentinel1.conf</code>，<code>sentinel2.conf</code>，<code>sentinel3.conf</code>，配置文件内容相同</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">port <span class="number">26379</span></span><br><span class="line">dir /tmp</span><br><span class="line"># 自定义集群名，其中 <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> 为 redis-master 的 ip，<span class="number">6379</span> 为 redis-master 的端口，<span class="number">2</span> 为最小投票数（因为有 <span class="number">3</span> 台 Sentinel 所以可以设置成 <span class="number">2</span>）</span><br><span class="line">sentinel monitor mymaster <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">6379</span> <span class="number">2</span></span><br><span class="line">sentinel down-after-milliseconds mymaster <span class="number">30000</span></span><br><span class="line">sentinel parallel-syncs mymaster <span class="number">1</span></span><br><span class="line">sentinel failover-timeout mymaster <span class="number">180000</span></span><br><span class="line">sentinel deny-scripts-reconfig yes</span><br></pre></td></tr></table></figure></li></ul><h3 id="查看集群是否生效"><a href="#查看集群是否生效" class="headerlink" title="查看集群是否生效"></a>查看集群是否生效</h3><ul><li><p>进入 Sentinel 容器，使用 Sentinel API 查看监控情况：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it redis-sentinel-1 /bin/bash</span><br><span class="line">redis-cli -p 26379</span><br><span class="line">sentinel master mymaster</span><br><span class="line">sentinel slaves mymaster</span><br></pre></td></tr></table></figure></li><li><p>输出如下</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">26379</span>&gt; sentinel master mymaster</span><br><span class="line"> <span class="number">1</span>) <span class="string">"name"</span></span><br><span class="line"> <span class="number">2</span>) <span class="string">"mymaster"</span></span><br><span class="line"> <span class="number">3</span>) <span class="string">"ip"</span></span><br><span class="line"> <span class="number">4</span>) <span class="string">"127.0.0.1"</span></span><br><span class="line"> <span class="number">5</span>) <span class="string">"port"</span></span><br><span class="line"> <span class="number">6</span>) <span class="string">"6379"</span></span><br><span class="line"> <span class="number">7</span>) <span class="string">"runid"</span></span><br><span class="line"> <span class="number">8</span>) <span class="string">""</span></span><br><span class="line"> <span class="number">9</span>) <span class="string">"flags"</span></span><br><span class="line"><span class="number">10</span>) <span class="string">"s_down,master,disconnected"</span></span><br><span class="line"><span class="number">11</span>) <span class="string">"link-pending-commands"</span></span><br><span class="line"><span class="number">12</span>) <span class="string">"3"</span></span><br><span class="line"><span class="number">13</span>) <span class="string">"link-refcount"</span></span><br><span class="line"><span class="number">14</span>) <span class="string">"1"</span></span><br><span class="line"><span class="number">15</span>) <span class="string">"last-ping-sent"</span></span><br><span class="line"><span class="number">16</span>) <span class="string">"11379728"</span></span><br><span class="line"><span class="number">17</span>) <span class="string">"last-ok-ping-reply"</span></span><br><span class="line"><span class="number">18</span>) <span class="string">"11379728"</span></span><br><span class="line"><span class="number">19</span>) <span class="string">"last-ping-reply"</span></span><br><span class="line"><span class="number">20</span>) <span class="string">"11379728"</span></span><br><span class="line"><span class="number">21</span>) <span class="string">"s-down-time"</span></span><br><span class="line"><span class="number">22</span>) <span class="string">"11349688"</span></span><br><span class="line"><span class="number">23</span>) <span class="string">"down-after-milliseconds"</span></span><br><span class="line"><span class="number">24</span>) <span class="string">"30000"</span></span><br><span class="line"><span class="number">25</span>) <span class="string">"info-refresh"</span></span><br><span class="line"><span class="number">26</span>) <span class="string">"1571133490553"</span></span><br><span class="line"><span class="number">27</span>) <span class="string">"role-reported"</span></span><br><span class="line"><span class="number">28</span>) <span class="string">"master"</span></span><br><span class="line"><span class="number">29</span>) <span class="string">"role-reported-time"</span></span><br><span class="line"><span class="number">30</span>) <span class="string">"11379728"</span></span><br><span class="line"><span class="number">31</span>) <span class="string">"config-epoch"</span></span><br><span class="line"><span class="number">32</span>) <span class="string">"0"</span></span><br><span class="line"><span class="number">33</span>) <span class="string">"num-slaves"</span></span><br><span class="line"><span class="number">34</span>) <span class="string">"0"</span></span><br><span class="line"><span class="number">35</span>) <span class="string">"num-other-sentinels"</span></span><br><span class="line"><span class="number">36</span>) <span class="string">"0"</span></span><br><span class="line"><span class="number">37</span>) <span class="string">"quorum"</span></span><br><span class="line"><span class="number">38</span>) <span class="string">"2"</span></span><br><span class="line"><span class="number">39</span>) <span class="string">"failover-timeout"</span></span><br><span class="line"><span class="number">40</span>) <span class="string">"180000"</span></span><br><span class="line"><span class="number">41</span>) <span class="string">"parallel-syncs"</span></span><br><span class="line"><span class="number">42</span>) <span class="string">"1"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">26379</span>&gt;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;Redis 集群可以在一组 redis 节点之间实现高可用性和 sharding。在集群中会有 1 个 master 和多个 slave 节点。当 master 节点失效时，应选举出一个 slave 节点作为新的 master。然而 Redis 本身(包括它的很多客户端)没有实现自动故障发现并进行主备切换的能力，需要外部的监控方案来实现自动故障恢复。&lt;/p&gt;
&lt;p&gt;Redis Sentinel 是官方推荐的高可用性解决方案。它是 Redis 集群的监控管理工具，可以提供节点监控、通知、自动故障恢复和客户端配置发现服务。&lt;/p&gt;
    
    </summary>
    
    
      <category term="PaaS" scheme="https://ericshen.xyz/categories/PaaS/"/>
    
    
      <category term="linux" scheme="https://ericshen.xyz/tags/linux/"/>
    
      <category term="docker" scheme="https://ericshen.xyz/tags/docker/"/>
    
      <category term="redis" scheme="https://ericshen.xyz/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>解决Linux下Harbor开机启动失败</title>
    <link href="https://ericshen.xyz/2019/09/14/%E8%A7%A3%E5%86%B3Linux%E4%B8%8BHarbor%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5/"/>
    <id>https://ericshen.xyz/2019/09/14/%E8%A7%A3%E5%86%B3Linux%E4%B8%8BHarbor%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5/</id>
    <published>2019-09-14T10:39:58.000Z</published>
    <updated>2020-03-31T09:35:35.298Z</updated>
    
    <content type="html"><![CDATA[<p>Harbor 是一个用于存储和分发 Docker 镜像的企业级 Registry 服务器，通过添加一些企业必需的功能特性，例如安全、标识和管理等，扩展了开源 Docker Distribution。作为一个企业级私有 Registry 服务器，Harbor 提供了更好的性能和安全。提升用户使用 Registry 构建和运行环境传输镜像的效率。Harbor 支持安装在多个 Registry 节点的镜像资源复制，镜像全部保存在私有 Registry 中， 确保数据和知识产权在公司内部网络中管控。另外，Harbor 也提供了高级的安全特性，诸如用户管理，访问控制和活动审计等。</p><a id="more"></a><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装参见官方文档：<a href="https://github.com/goharbor/harbor/blob/master/docs/installation_guide.md" target="_blank" rel="noopener">Harbor - Installation and Configuration Guide</a>，  </p><p>修改 <code>harbor.yml</code> 时，需要注意的有：</p><ol><li>使用 https 时，要自己生成证书，然后在 <code>harbor.yml</code> 里配置好证书的路径。<ul><li>客户端也需要安装你生成的这个证书，否则会报错。（所以证书要做好备份）</li><li>详见 <a href="https://docs.docker.com/registry/insecure/" target="_blank" rel="noopener">Docker - Use self-signed certificates</a></li></ul></li><li><code>data_volume</code> 可以指定为 <code>/data/harbor</code>，然后要定期备份这个文件夹。（或者直接在新机器上装个 harbor，用 harbor 自带的仓库复制功能做定期备份。）</li><li>企业的话，可能还需要配置 ldap 集成验证。</li></ol><p>然后赋权<code>sudo chomod +x ./install.sh</code></p><p>执行 <code>sudo ./install.sh</code> 安装 harbor（貌似必须用 sudo，因为生成出来的配置文件的 owner 都是 root，而且权限设得很严格。）  </p><p>安装完成后会自动启动 harbor.</p><h1 id="自动启动"><a href="#自动启动" class="headerlink" title="自动启动"></a>自动启动</h1><p>查看 harbor 目录下的自动生成的 <code>docker-compose.yml</code> 会发现，所有的 <code>containers</code> 都配置了 <code>restart: always</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2.3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  log:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">goharbor/harbor-log:v1.9.0</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">harbor-log</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line"><span class="string">·····省略·······</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  proxy:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">goharbor/nginx-photon:v1.9.0</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    cap_drop:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">ALL</span></span><br><span class="line"><span class="attr">    cap_add:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">CHOWN</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SETGID</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SETUID</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">NET_BIND_SERVICE</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./common/config/nginx:/etc/nginx:z</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">harbor</span></span><br><span class="line"><span class="attr">    dns_search:</span> <span class="string">.</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">9090</span><span class="string">:8080</span></span><br><span class="line"><span class="attr">    depends_on:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">registry</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">core</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">portal</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">log</span></span><br><span class="line"><span class="attr">    logging:</span></span><br><span class="line"><span class="attr">      driver:</span> <span class="string">"syslog"</span></span><br><span class="line"><span class="attr">      options:</span></span><br><span class="line"><span class="attr">        syslog-address:</span> <span class="string">"tcp://127.0.0.1:1514"</span></span><br><span class="line"><span class="attr">        tag:</span> <span class="string">"proxy"</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line"><span class="attr">  harbor:</span></span><br><span class="line"><span class="attr">    external:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>这表示所有的容器在<strong>意外关闭</strong>后都会自动重启，比如 <code>docker</code> 重启或服务器重启。（手动 <code>stop</code> 不会自动重启）</p><p>但是我在手动运行 <code>docker-compose up -d</code>，然后重启服务器后，发现有几个 container 并没有自动重启：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">ryan@</span>ryan-pc ~]$ docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE                                               COMMAND                  CREATED             STATUS                             PORTS                       NAMES</span><br><span class="line">f30d802002a4        goharbor/nginx-photon:v1<span class="number">.8</span><span class="number">.1</span>                        <span class="string">"nginx -g 'daemon of…"</span>   <span class="number">13</span> hours ago        Exited (<span class="number">128</span>) <span class="number">27</span> minutes ago        <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">80</span>-&gt;<span class="number">80</span>/tcp          nginx</span><br><span class="line"><span class="number">21472</span>ce8a993        goharbor/harbor-portal:v1<span class="number">.8</span><span class="number">.1</span>                       <span class="string">"nginx -g 'daemon of…"</span>   <span class="number">13</span> hours ago        Exited (<span class="number">128</span>) <span class="number">27</span> minutes ago        <span class="number">80</span>/tcp                      harbor-portal</span><br><span class="line"><span class="number">5</span>d866bb17c58        goharbor/harbor-jobservice:v1<span class="number">.8</span><span class="number">.1</span>                   <span class="string">"/harbor/start.sh"</span>       <span class="number">13</span> hours ago        Exited (<span class="number">137</span>) <span class="number">26</span> minutes ago                                    harbor-jobservice</span><br><span class="line"><span class="number">0</span>cf0f93b5a87        goharbor/harbor-core:v1<span class="number">.8</span><span class="number">.1</span>                         <span class="string">"/harbor/start.sh"</span>       <span class="number">13</span> hours ago        Up <span class="number">11</span> seconds (health: starting)                               harbor-core</span><br><span class="line">cba280d9b945        goharbor/redis-photon:v1<span class="number">.8</span><span class="number">.1</span>                        <span class="string">"docker-entrypoint.s…"</span>   <span class="number">13</span> hours ago        Exited (<span class="number">137</span>) <span class="number">26</span> minutes ago        <span class="number">6379</span>/tcp                    redis</span><br><span class="line"><span class="number">473e46</span>d1f746        goharbor/harbor-registryctl:v1<span class="number">.8</span><span class="number">.1</span>                  <span class="string">"/harbor/start.sh"</span>       <span class="number">13</span> hours ago        Up <span class="number">11</span> seconds (health: starting)                               registryctl</span><br><span class="line"><span class="number">51f</span>105f1691d        goharbor/registry-photon:v2<span class="number">.7</span><span class="number">.1</span>-patch<span class="number">-2819</span>-v1<span class="number">.8</span><span class="number">.1</span>   <span class="string">"/entrypoint.sh /etc…"</span>   <span class="number">13</span> hours ago        Exited (<span class="number">137</span>) <span class="number">26</span> minutes ago        <span class="number">5000</span>/tcp                    registry</span><br><span class="line">c41594ec7779        goharbor/harbor-db:v1<span class="number">.8</span><span class="number">.1</span>                           <span class="string">"/entrypoint.sh post…"</span>   <span class="number">13</span> hours ago        Up <span class="number">11</span> seconds (health: starting)   <span class="number">5432</span>/tcp                    harbor-db</span><br><span class="line"><span class="number">713</span>bd4961772        goharbor/harbor-log:v1<span class="number">.8</span><span class="number">.1</span>                          <span class="string">"/bin/sh -c /usr/loc…"</span>   <span class="number">13</span> hours ago        Up <span class="number">11</span> seconds (health: starting)   <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">1514</span>-&gt;<span class="number">10514</span>/tcp   harbor-log</span><br></pre></td></tr></table></figure><p>可以看到下列五个容器都处于 Exited 状态：</p><ol><li><code>goharbor/nginx-photon:v1.8.1</code></li><li><code>goharbor/harbor-portal:v1.8.1</code></li><li><code>goharbor/harbor-jobservice:v1.8.1</code></li><li><code>goharbor/redis-photon:v1.8.1</code></li><li><code>goharbor/registry-photon:v2.7.1-patch-2819-v1.8.1</code></li></ol><p>搜索发现有人提过这个 <code>issue</code>: <a href="https://github.com/goharbor/harbor/issues/7008" target="_blank" rel="noopener">https://github.com/goharbor/harbor/issues/7008</a></p><p>于是尝试将 harbor 配成<strong><code>systemd</code></strong>的服务，添加配置文件 <code>/lib/systemd/system/harbor.service</code>，内容如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=<span class="string">Harbor</span></span><br><span class="line"><span class="attr">After</span>=<span class="string">docker.service systemd-networkd.service systemd-resolved.service</span></span><br><span class="line"><span class="attr">Requires</span>=<span class="string">docker.service</span></span><br><span class="line"><span class="attr">Documentation</span>=<span class="string">http://github.com/vmware/harbor</span></span><br><span class="line"></span><br><span class="line"><span class="attr">[Service]</span></span><br><span class="line"><span class="attr">Type</span>=<span class="string">simple</span></span><br><span class="line"><span class="attr">Restart</span>=<span class="string">on-failure</span></span><br><span class="line"><span class="attr">RestartSec</span>=<span class="string">5</span></span><br><span class="line"><span class="attr">ExecStart</span>=<span class="string">/usr/local/bin/docker-compose -f $harbor_path/harbor/docker-compose.yml up</span></span><br><span class="line"><span class="attr">ExecStop</span>=<span class="string">/usr/local/bin/docker-compose -f $harbor_path/harbor/docker-compose.yml down</span></span><br><span class="line"></span><br><span class="line"><span class="attr">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=<span class="string">multi-user.target</span></span><br></pre></td></tr></table></figure><p>其中<strong><code>$harbor_path</code></strong> 换成自己的 harbor 安装路径。  </p><p>还有 docker-compose 的绝对路径，请通过 <code>which docker-compose</code> 查看，默认路径为<code>/usr/local/bin/docker-compose</code>。</p><p>此时通过<code>docker-compose down</code>关闭harbor</p><p>然后通过systemd设置为开机启动并启动该项服务：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="keyword">enable</span> harbor</span><br><span class="line">sudo systemctl <span class="keyword">start</span> harbor</span><br></pre></td></tr></table></figure><p>若提示找不到<code>harbor.servce</code>，则执行<code>systemctl daemon-reload</code>重启<code>systemd</code>服务</p><p><code>systemctl status harobr</code>查看 <code>harbor.service</code> 的情况：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">● harbor.service - Harbor</span><br><span class="line"><span class="symbol">   Loaded:</span> loaded (<span class="meta-keyword">/lib/</span>systemd<span class="meta-keyword">/system/</span>harbor.service; enabled; vendor preset: enabled)</span><br><span class="line"><span class="symbol">   Active:</span> active (running) since Mon <span class="number">2019</span><span class="number">-10</span><span class="number">-14</span> <span class="number">18</span>:<span class="number">55</span>:<span class="number">28</span> CST; <span class="number">49</span>s ago</span><br><span class="line"><span class="symbol">     Docs:</span> http:<span class="comment">//github.com/vmware/harbor</span></span><br><span class="line"> Main PID: <span class="number">15706</span> (docker-compose)</span><br><span class="line"><span class="symbol">    Tasks:</span> <span class="number">12</span> (limit: <span class="number">2312</span>)</span><br><span class="line"><span class="symbol">   CGroup:</span> /system.slice/harbor.service</span><br><span class="line">           ├─<span class="number">15706</span> <span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/bin/</span>docker-compose -f <span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/harbor/</span>harbor/docker-compose.yml up</span><br><span class="line">           └─<span class="number">15717</span> <span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/bin/</span>docker-compose -f <span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/harbor/</span>harbor/docker-compose.yml up</span><br><span class="line"></span><br><span class="line">.....省略.....</span><br></pre></td></tr></table></figure><p>状态为：<code>active</code></p><p>重启再看，发现 harbor 容器组终于全部 up 了：</p><p><code>docker-compose ps</code></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">      Name                     Command                  State                 Ports</span><br><span class="line">---------------------------------------------------------------------------------------------</span><br><span class="line">harbor-core         /harbor/harbor_core              Up (healthy)</span><br><span class="line">harbor-db           /docker-entrypoint.sh            Up (healthy)   <span class="number">5432</span>/tcp</span><br><span class="line">harbor-jobservice   /harbor/harbor_jobservice  ...   Up (healthy)</span><br><span class="line">harbor-log          /bin/sh -c /usr/local/bin/ ...   Up (healthy)   <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">1514</span>-&gt;<span class="number">10514</span>/tcp</span><br><span class="line">harbor-portal       nginx -g daemon off;             Up (healthy)   <span class="number">8080</span>/tcp</span><br><span class="line">nginx               nginx -g daemon off;             Up (healthy)   <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">9090</span>-&gt;<span class="number">8080</span>/tcp</span><br><span class="line">redis               redis-server /etc/redis.conf     Up (healthy)   <span class="number">6379</span>/tcp</span><br><span class="line">registry            /entrypoint.sh /etc/regist ...   Up (healthy)   <span class="number">5000</span>/tcp</span><br><span class="line">registryctl         /harbor/start.sh                 Up (healthy)</span><br></pre></td></tr></table></figure><p>Web端Harbor也可正常访问:</p><p><img src="https://i.loli.net/2019/10/14/MFGgetjQuJ5NPCA.png" alt="image.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/goharbor/harbor/issues/7008" target="_blank" rel="noopener">Harbor containers fail to start on docker startup</a></li><li><a href="https://www.cnblogs.com/kirito-c/p/10331598.html" target="_blank" rel="noopener">通过 systemctl 设置自定义 Service</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Harbor 是一个用于存储和分发 Docker 镜像的企业级 Registry 服务器，通过添加一些企业必需的功能特性，例如安全、标识和管理等，扩展了开源 Docker Distribution。作为一个企业级私有 Registry 服务器，Harbor 提供了更好的性能和安全。提升用户使用 Registry 构建和运行环境传输镜像的效率。Harbor 支持安装在多个 Registry 节点的镜像资源复制，镜像全部保存在私有 Registry 中， 确保数据和知识产权在公司内部网络中管控。另外，Harbor 也提供了高级的安全特性，诸如用户管理，访问控制和活动审计等。&lt;/p&gt;
    
    </summary>
    
    
      <category term="PaaS" scheme="https://ericshen.xyz/categories/PaaS/"/>
    
    
      <category term="linux" scheme="https://ericshen.xyz/tags/linux/"/>
    
      <category term="docker" scheme="https://ericshen.xyz/tags/docker/"/>
    
      <category term="harbor" scheme="https://ericshen.xyz/tags/harbor/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7 &amp; Ubuntu 18 时间设置</title>
    <link href="https://ericshen.xyz/2019/08/30/CentOS7-Ubuntu-18-%E6%97%B6%E9%97%B4%E8%AE%BE%E7%BD%AE/"/>
    <id>https://ericshen.xyz/2019/08/30/CentOS7-Ubuntu-18-%E6%97%B6%E9%97%B4%E8%AE%BE%E7%BD%AE/</id>
    <published>2019-08-30T03:22:32.000Z</published>
    <updated>2020-03-31T09:35:48.550Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h2><h3 id="1-1-GMT、UTC、CST、DST-时间"><a href="#1-1-GMT、UTC、CST、DST-时间" class="headerlink" title="1.1 GMT、UTC、CST、DST 时间"></a>1.1 GMT、UTC、CST、DST 时间</h3><ul><li>UTC</li></ul><p>整个地球分为二十四时区，每个时区都有自己的本地时间。在国际无线电通信场合，为了统一起见，使用一个统一的时间，称为通用协调时(UTC, Universal Time Coordinated)。</p><ul><li>GMT</li></ul><p>格林威治标准时间 (Greenwich Mean Time)指位于英国伦敦郊区的皇家格林尼治天文台的标准时间，因为本初子午线被定义在通过那里的经线。(UTC与GMT时间基本相同，本文中不做区分)</p><ul><li>CST</li></ul><p>中国标准时间 (China Standard Time)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GMT + 8 = UTC + 8 = CST</span><br></pre></td></tr></table></figure><ul><li>DST</li></ul><p>夏令时(Daylight Saving Time) 指在夏天太阳升起的比较早时，将时间拨快一小时，以提早日光的使用。（中国不使用）</p><a id="more"></a><h3 id="1-2-硬件时间和系统时间"><a href="#1-2-硬件时间和系统时间" class="headerlink" title="1.2 硬件时间和系统时间"></a>1.2 硬件时间和系统时间</h3><ul><li>硬件时间</li></ul><p>RTC(Real-Time Clock)或CMOS时间，一般在主板上靠电池供电，服务器断电后也会继续运行。仅保存日期时间数值，无法保存时区和夏令时设置。</p><ul><li>系统时间</li></ul><p>一般在服务器启动时复制RTC时间，之后独立运行，保存了时间、时区和夏令时设置。</p><h2 id="2-timedatectl-命令"><a href="#2-timedatectl-命令" class="headerlink" title="2. timedatectl 命令"></a>2. timedatectl 命令</h2><h3 id="2-1-使用帮助"><a href="#2-1-使用帮助" class="headerlink" title="2.1 使用帮助"></a>2.1 使用帮助</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">root@</span>localhost ~]# timedatectl -h</span><br><span class="line">timedatectl [OPTIONS...] COMMAND ...</span><br><span class="line"></span><br><span class="line">Query or change system time and date settings.</span><br><span class="line"></span><br><span class="line">  -h --help              Show <span class="keyword">this</span> help</span><br><span class="line">     --version           Show <span class="keyword">package</span> version</span><br><span class="line">     --adjust-system-clock</span><br><span class="line">                         Adjust system clock <span class="keyword">when</span> changing local RTC mode</span><br><span class="line">     --no-pager          Do not pipe output into a pager</span><br><span class="line">  -P --privileged        Acquire privileges before execution</span><br><span class="line">     --no-ask-password   Do not prompt <span class="keyword">for</span> password</span><br><span class="line">  -H --host=[<span class="symbol">USER@</span>]HOST  Operate on remote host</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  status                 Show current time settings</span><br><span class="line">  <span class="keyword">set</span>-time TIME          Set system time</span><br><span class="line">  <span class="keyword">set</span>-timezone ZONE      Set system timezone</span><br><span class="line">  list-timezones         Show known timezones</span><br><span class="line">  <span class="keyword">set</span>-local-rtc BOOL     Control whether RTC <span class="keyword">is</span> <span class="keyword">in</span> local time</span><br><span class="line">  <span class="keyword">set</span>-ntp BOOL           Control whether NTP <span class="keyword">is</span> enabled</span><br></pre></td></tr></table></figure><h3 id="2-2-命令示例"><a href="#2-2-命令示例" class="headerlink" title="2.2 命令示例"></a>2.2 命令示例</h3><p>1.显示系统的当前时间和日期</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">timedatectl</span><br><span class="line"><span class="comment"># timedatectl status</span></span><br><span class="line"><span class="comment"># 两条命令效果等同</span></span><br></pre></td></tr></table></figure><p>2.设置日期与时间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">timedatectl <span class="built_in">set</span>-time <span class="string">"YYYY-MM-DD HH:MM:SS"</span></span><br><span class="line">timedatectl <span class="built_in">set</span>-time <span class="string">"YYYY-MM-DD"</span></span><br><span class="line">timedatectl <span class="built_in">set</span>-time <span class="string">"HH:MM:SS"</span></span><br></pre></td></tr></table></figure><p>3.查看所有可用的时区</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">timedatectl <span class="keyword">list</span>-timezones</span><br><span class="line"><span class="comment"># 亚洲</span></span><br><span class="line">timedatectl <span class="keyword">list</span>-timezones |  grep  -E <span class="string">"Asia/S.*"</span></span><br></pre></td></tr></table></figure><p>4.设置时区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timedatectl <span class="built_in">set</span>-timezone Asia/Shanghai</span><br></pre></td></tr></table></figure><p>5.设置硬件时间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 硬件时间默认为UTC</span></span><br><span class="line">timedatectl <span class="built_in">set</span>-local-rtc 1</span><br><span class="line"><span class="comment"># hwclock --systohc --localtime</span></span><br><span class="line"><span class="comment"># 两条命令效果等同</span></span><br></pre></td></tr></table></figure><p>6.启用时间同步</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">timedatectl <span class="built_in">set</span>-ntp yes</span><br><span class="line"><span class="comment"># yes或no; 1或0也可以</span></span><br></pre></td></tr></table></figure><h2 id="3-Chrony-服务"><a href="#3-Chrony-服务" class="headerlink" title="3. Chrony 服务"></a>3. Chrony 服务</h2><p>Chrony是网络时间协议的 (NTP) 的另一种实现，由两个程序组成，分别是chronyd和chronyc。</p><p>chronyd是一个后台运行的守护进程，用于调整内核中运行的系统时钟和时钟服务器同步。它确定计算机增减时间的比率，并对此进行补偿。</p><p>chronyc提供了一个用户界面，用于监控性能并进行多样化的配置。它可以在chronyd实例控制的计算机上工作，也可以在一台不同的远程计算机上工作。</p><p>优势：</p><ul><li>更快的同步只需要数分钟而非数小时时间，从而最大程度减少了时间和频率误差，这对于并非全天 24 小时运行的台式计算机或系统而言非常有用。</li><li>能够更好地响应时钟频率的快速变化，这对于具备不稳定时钟的虚拟机或导致时钟频率发生变化的节能技术而言非常有用。</li><li>在初始同步后，它不会停止时钟，以防对需要系统时间保持单调的应用程序造成影响。</li><li>在应对临时非对称延迟时（例如，在大规模下载造成链接饱和时）提供了更好的稳定性。</li><li>无需对服务器进行定期轮询，因此具备间歇性网络连接的系统仍然可以快速同步时钟。</li></ul><blockquote><p>在CentOS7下为标配的时间同步服务，当然也可以使用以前的NTP同步方式，不过要安装NTP服务。</p></blockquote><h3 id="3-1-安装使用"><a href="#3-1-安装使用" class="headerlink" title="3.1 安装使用"></a>3.1 安装使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install chrony</span><br><span class="line">systemctl start chronyd</span><br><span class="line">systemctl <span class="built_in">enable</span> chronyd</span><br></pre></td></tr></table></figure><h3 id="3-2-配置文件"><a href="#3-2-配置文件" class="headerlink" title="3.2 配置文件"></a>3.2 配置文件</h3><p>当Chrony启动时，它会读取/etc/chrony.conf配置文件中的设置。也就是锁，如果需要更改时间同步的服务器，修改此配置文件即可。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="meta"># grep -Ev <span class="meta-string">"^$|^#"</span> /etc/chrony.conf</span></span><br><span class="line"><span class="meta"># 该参数可以多次用于添加时钟服务器，必须以<span class="meta-string">"server "</span>格式使用。一般而言，你想添加多少服务器，就可以添加多少服务器。</span></span><br><span class="line">server <span class="number">0.</span>centos.pool.ntp.org iburst</span><br><span class="line">server <span class="number">1.</span>centos.pool.ntp.org iburst</span><br><span class="line">server <span class="number">2.</span>centos.pool.ntp.org iburst</span><br><span class="line">server <span class="number">3.</span>centos.pool.ntp.org iburst</span><br><span class="line"><span class="meta"># stratumweight指令设置当chronyd从可用源中选择同步源时，每个层应该添加多少距离到同步距离。默认情况下，设置为0，让chronyd在选择源时忽略源的层级。</span></span><br><span class="line">stratumweight <span class="number">0</span></span><br><span class="line"><span class="meta"># chronyd程序的主要行为之一，就是根据实际时间计算出计算机增减时间的比率，将它记录到一个文件中是最合理的，它会在重启后为系统时钟作出补偿，甚至可能的话，会从时钟服务器获得较好的估值。</span></span><br><span class="line">driftfile /var/lib/chrony/drift</span><br><span class="line"><span class="meta"># rtcsync指令将启用一个内核模式，在该模式中，系统时间每11分钟会拷贝到实时时钟（RTC）。</span></span><br><span class="line">rtcsync</span><br><span class="line"><span class="meta"># 通常，chronyd将根据需求通过减慢或加速时钟，使得系统逐步纠正所有时间偏差。在某些特定情况下，系统时钟可能会漂移过快，导致该调整过程消耗很长的时间来纠正系统时钟。</span></span><br><span class="line"><span class="meta"># 该指令强制chronyd在调整期大于某个阀值时步进调整系统时钟，但只有在因为chronyd启动时间超过指定限制（可使用负值来禁用限制），没有更多时钟更新时才生效。</span></span><br><span class="line">makestep <span class="number">10</span> <span class="number">3</span></span><br><span class="line"><span class="meta"># 这里你可以指定一台主机、子网，或者网络以允许或拒绝NTP连接到扮演时钟服务器的机器。</span></span><br><span class="line"><span class="meta">#allow 192.168/16</span></span><br><span class="line"><span class="meta"># 该指令允许你限制chronyd监听哪个网络接口的命令包（由chronyc执行）。该指令通过cmddeny机制提供了一个除上述限制以外可用的额外的访问控制等级。</span></span><br><span class="line">bindcmdaddress <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">bindcmdaddress ::<span class="number">1</span></span><br><span class="line">keyfile /etc/chrony.keys</span><br><span class="line"><span class="meta"># 指定了/etc/chrony.keys中哪一条密码被使用</span></span><br><span class="line">commandkey <span class="number">1</span></span><br><span class="line"><span class="meta"># 此参数指定了产生一个SHA1或MD5加密的密码，存放在/etc/chrony.keys中</span></span><br><span class="line">generatecommandkey</span><br><span class="line">noclientlog</span><br><span class="line">logchange <span class="number">0.5</span></span><br><span class="line">logdir /var/log/chrony</span><br></pre></td></tr></table></figure><p>/etc/chrony.keys文件</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@localhost ~</span>]<span class="meta">#  cat /etc/chrony.keys</span></span><br><span class="line"><span class="meta">#1 a_key</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span> SHA1 HEX:<span class="number">8B</span>96920E9C83612FE34A8C281C31310BD2E1F624</span><br></pre></td></tr></table></figure><p>内容来自 <a href="https://link.jianshu.com?t=http://www.cnblogs.com/abclife/p/4736064.html" target="_blank" rel="noopener">RHEL7 – 使用Chrony设置时间与时钟服务器同步</a></p><h2 id="3-3-chronyc"><a href="#3-3-chronyc" class="headerlink" title="3.3 chronyc"></a>3.3 chronyc</h2><p>1.查看帮助</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[root@localhost ~]</span># <span class="selector-tag">chronyc</span> <span class="selector-tag">--help</span></span><br><span class="line"><span class="selector-tag">Usage</span>: <span class="selector-tag">chronyc</span> <span class="selector-attr">[-h HOST]</span> <span class="selector-attr">[-p PORT]</span> <span class="selector-attr">[-n]</span> <span class="selector-attr">[-4|-6]</span> <span class="selector-attr">[-a]</span> <span class="selector-attr">[-f FILE]</span> <span class="selector-attr">[-m]</span> <span class="selector-attr">[COMMAND]</span></span><br></pre></td></tr></table></figure><p>2.查看详细的帮助信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# chronyc</span><br><span class="line">chrony version 2.1.1</span><br><span class="line">Copyright (C) 1997-2003, 2007, 2009-2015 Richard P. Curnow and others</span><br><span class="line">chrony comes with ABSOLUTELY NO WARRANTY.  This is free software, and</span><br><span class="line">you are welcome to redistribute it under certain conditions.  See the</span><br><span class="line">GNU General Public License version 2 for details.</span><br><span class="line"></span><br><span class="line">chronyc&gt; help</span><br><span class="line">Commands:</span><br><span class="line">accheck <span class="tag">&lt;<span class="name">address</span>&gt;</span> : Check whether NTP access is allowed to <span class="tag">&lt;<span class="name">address</span>&gt;</span></span><br><span class="line">activity : Check how many NTP sources are online/offline</span><br><span class="line">add peer <span class="tag">&lt;<span class="name">address</span>&gt;</span> ... : Add a new NTP peer</span><br><span class="line">add server <span class="tag">&lt;<span class="name">address</span>&gt;</span> ... : Add a new NTP server</span><br><span class="line">allow [<span class="tag">&lt;<span class="name">subnet-addr</span>&gt;</span>] : Allow NTP access to that subnet as a default</span><br><span class="line">allow all [<span class="tag">&lt;<span class="name">subnet-addr</span>&gt;</span>] : Allow NTP access to that subnet and all children</span><br><span class="line">burst <span class="tag">&lt;<span class="name">n-good</span>&gt;</span>/<span class="tag">&lt;<span class="name">n-max</span>&gt;</span> [<span class="tag">&lt;<span class="name">mask</span>&gt;</span>/<span class="tag">&lt;<span class="name">masked-address</span>&gt;</span>] : Start a rapid set of measurements</span><br><span class="line">clients : Report on clients that have accessed the server</span><br><span class="line">cmdaccheck <span class="tag">&lt;<span class="name">address</span>&gt;</span> : Check whether command access is allowed to <span class="tag">&lt;<span class="name">address</span>&gt;</span></span><br><span class="line">cmdallow [<span class="tag">&lt;<span class="name">subnet-addr</span>&gt;</span>] : Allow command access to that subnet as a default</span><br><span class="line">cmdallow all [<span class="tag">&lt;<span class="name">subnet-addr</span>&gt;</span>] : Allow command access to that subnet and all children</span><br><span class="line">cmddeny [<span class="tag">&lt;<span class="name">subnet-addr</span>&gt;</span>] : Deny command access to that subnet as a default</span><br><span class="line">cmddeny all [<span class="tag">&lt;<span class="name">subnet-addr</span>&gt;</span>] : Deny command access to that subnet and all children</span><br><span class="line">cyclelogs : Close and re-open logs files</span><br><span class="line">delete <span class="tag">&lt;<span class="name">address</span>&gt;</span> : Remove an NTP server or peer</span><br><span class="line">deny [<span class="tag">&lt;<span class="name">subnet-addr</span>&gt;</span>] : Deny NTP access to that subnet as a default</span><br><span class="line">deny all [<span class="tag">&lt;<span class="name">subnet-addr</span>&gt;</span>] : Deny NTP access to that subnet and all children</span><br><span class="line">dump : Dump all measurements to save files</span><br><span class="line">local off : Disable server capability for unsynchronised clock</span><br><span class="line">local stratum <span class="tag">&lt;<span class="name">stratum</span>&gt;</span> : Enable server capability for unsynchronised clock</span><br><span class="line">makestep [<span class="tag">&lt;<span class="name">threshold</span>&gt;</span> <span class="tag">&lt;<span class="name">updates</span>&gt;</span>] : Correct clock by stepping</span><br><span class="line">manual off|on|reset : Disable/enable/reset settime command and statistics</span><br><span class="line">manual list : Show previous settime entries</span><br><span class="line">maxdelay <span class="tag">&lt;<span class="name">address</span>&gt;</span> <span class="tag">&lt;<span class="name">new-max-delay</span>&gt;</span> : Modify maximum round-trip valid sample delay for source</span><br><span class="line">maxdelayratio <span class="tag">&lt;<span class="name">address</span>&gt;</span> <span class="tag">&lt;<span class="name">new-max-ratio</span>&gt;</span> : Modify max round-trip delay ratio for source</span><br><span class="line">maxdelaydevratio <span class="tag">&lt;<span class="name">address</span>&gt;</span> <span class="tag">&lt;<span class="name">new-max-ratio</span>&gt;</span> : Modify max round-trip delay dev ratio for source</span><br><span class="line">maxpoll <span class="tag">&lt;<span class="name">address</span>&gt;</span> <span class="tag">&lt;<span class="name">new-maxpoll</span>&gt;</span> : Modify maximum polling interval of source</span><br><span class="line">maxupdateskew <span class="tag">&lt;<span class="name">new-max-skew</span>&gt;</span> : Modify maximum skew for a clock frequency update to be made</span><br><span class="line">minpoll <span class="tag">&lt;<span class="name">address</span>&gt;</span> <span class="tag">&lt;<span class="name">new-minpoll</span>&gt;</span> : Modify minimum polling interval of source</span><br><span class="line">minstratum <span class="tag">&lt;<span class="name">address</span>&gt;</span> <span class="tag">&lt;<span class="name">new-min-stratum</span>&gt;</span> : Modify minimum stratum of source</span><br><span class="line">offline [<span class="tag">&lt;<span class="name">mask</span>&gt;</span>/<span class="tag">&lt;<span class="name">masked-address</span>&gt;</span>] : Set sources in subnet to offline status</span><br><span class="line">online [<span class="tag">&lt;<span class="name">mask</span>&gt;</span>/<span class="tag">&lt;<span class="name">masked-address</span>&gt;</span>] : Set sources in subnet to online status</span><br><span class="line">password [<span class="tag">&lt;<span class="name">new-password</span>&gt;</span>] : Set command authentication password</span><br><span class="line">polltarget <span class="tag">&lt;<span class="name">address</span>&gt;</span> <span class="tag">&lt;<span class="name">new-poll-target</span>&gt;</span> : Modify poll target of source</span><br><span class="line">reselect : Reselect synchronisation source</span><br><span class="line">rtcdata : Print current RTC performance parameters</span><br><span class="line">settime <span class="tag">&lt;<span class="name">date</span>/<span class="attr">time</span> (<span class="attr">e.g.</span> <span class="attr">Nov</span> <span class="attr">21</span>, <span class="attr">1997</span> <span class="attr">16:30:05</span> <span class="attr">or</span> <span class="attr">16:30:05</span>)&gt;</span> : Manually set the daemon time</span><br><span class="line">smoothing : Display current time smoothing state</span><br><span class="line">smoothtime reset|activate : Reset/activate time smoothing</span><br><span class="line">sources [-v] : Display information about current sources</span><br><span class="line">sourcestats [-v] : Display estimation information about current sources</span><br><span class="line">tracking : Display system time information</span><br><span class="line">trimrtc : Correct RTC relative to system clock</span><br><span class="line">waitsync [max-tries [max-correction [max-skew]]] : Wait until synchronised</span><br><span class="line">writertc : Save RTC parameters to file</span><br><span class="line"></span><br><span class="line">authhash <span class="tag">&lt;<span class="name">name</span>&gt;</span>: Set command authentication hash function</span><br><span class="line">dns -n|+n : Disable/enable resolving IP addresses to hostnames</span><br><span class="line">dns -4|-6|-46 : Resolve hostnames only to IPv4/IPv6/both addresses</span><br><span class="line">timeout <span class="tag">&lt;<span class="name">milliseconds</span>&gt;</span> : Set initial response timeout</span><br><span class="line">retries <span class="tag">&lt;<span class="name">n</span>&gt;</span> : Set maximum number of retries</span><br><span class="line">exit|quit : Leave the program</span><br><span class="line">help : Generate this help</span><br><span class="line"></span><br><span class="line">chronyc&gt; quit</span><br></pre></td></tr></table></figure><p>3.常用命令</p><ul><li><code>accheck</code> 检查NTP访问是否对特定主机可用</li><li><code>activity</code> 该命令会显示有多少NTP源在线/离线</li><li><code>add server</code> 手动添加一台新的NTP服务器</li><li><code>clients</code> 在客户端报告已访问到服务器</li><li><code>delete</code> 手动移除NTP服务器或对等服务器</li><li><code>settime</code> 手动设置守护进程时间</li><li><code>tracking</code> 显示系统时间信息</li></ul><p>示例：查看时间同步的信息来源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># chronyc sources</span></span><br><span class="line">210 Number of sources = 3</span><br><span class="line">MS Name/IP address         Stratum Poll Reach LastRx Last sample</span><br><span class="line">===============================================================================</span><br><span class="line">^+ 202.118.1.130                 2   6    37   104  +2189us[  +23ms] +/-   27ms</span><br><span class="line">^* dns1.synet.edu.cn             2   6    77    40   +626us[  +21ms] +/-   33ms</span><br><span class="line">^? 2001:da8:9000::81             0   6     0   10y     +0ns[   +0ns] +/-    0ns</span><br></pre></td></tr></table></figure><p>sources可以加-v参数查看状态信息的说明</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># chronyc sources -v</span></span><br><span class="line">210 Number of sources = 3</span><br><span class="line"></span><br><span class="line">  .-- Source mode  <span class="string">'^'</span> = server, <span class="string">'='</span> = peer, <span class="string">'#'</span> = <span class="built_in">local</span> clock.</span><br><span class="line"> / .- Source state <span class="string">'*'</span> = current synced, <span class="string">'+'</span> = combined , <span class="string">'-'</span> = not combined,</span><br><span class="line">| /   <span class="string">'?'</span> = unreachable, <span class="string">'x'</span> = time may be <span class="keyword">in</span> error, <span class="string">'~'</span> = time too variable.</span><br><span class="line">||                                                 .- xxxx [ yyyy ] +/- zzzz</span><br><span class="line">||      Reachability register (octal) -.           |  xxxx = adjusted offset,</span><br><span class="line">||      Log2(Polling interval) --.      |          |  yyyy = measured offset,</span><br><span class="line">||                                \     |          |  zzzz = estimated error.</span><br><span class="line">||                                 |    |           \</span><br><span class="line">MS Name/IP address         Stratum Poll Reach LastRx Last sample</span><br><span class="line">===============================================================================</span><br><span class="line">^+ 202.118.1.130                 2   6    37   126  +2189us[  +23ms] +/-   27ms</span><br><span class="line">^* dns1.synet.edu.cn             2   6    77    61   +626us[  +21ms] +/-   33ms</span><br><span class="line">^? 2001:da8:9000::81             0   6     0   10y     +0ns[   +0ns] +/-    0ns</span><br></pre></td></tr></table></figure><p>4.chronyc在桌面版提供用户界面，需要通过以下命令安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install system-config-date</span><br></pre></td></tr></table></figure><h2 id="4-实例"><a href="#4-实例" class="headerlink" title="4. 实例"></a>4. 实例</h2><h3 id="4-1-设置系统时间为中国时区并启用时间同步"><a href="#4-1-设置系统时间为中国时区并启用时间同步" class="headerlink" title="4.1 设置系统时间为中国时区并启用时间同步"></a>4.1 设置系统时间为中国时区并启用时间同步</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">yum install chrony</span><br><span class="line"><span class="comment"># 启用</span></span><br><span class="line">  systemctl start chronyd</span><br><span class="line">systemctl <span class="built_in">enable</span> chronyd</span><br><span class="line"><span class="comment"># 设置亚洲时区</span></span><br><span class="line">timedatectl <span class="built_in">set</span>-timezone Asia/Shanghai</span><br><span class="line"><span class="comment"># 启用NTP同步</span></span><br><span class="line">timedatectl <span class="built_in">set</span>-ntp yes</span><br></pre></td></tr></table></figure><p>这样服务器的时间就跟NTP服务器同步了，非常简单的操作。</p><p>也可以不使用Chrony，用NTP服务的时间同步。但<strong>不推荐</strong>。</p><h3 id="4-2-安装NTP服务使用其同步时间"><a href="#4-2-安装NTP服务使用其同步时间" class="headerlink" title="4.2 安装NTP服务使用其同步时间"></a>4.2 安装NTP服务使用其同步时间</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装ntp服务</span></span><br><span class="line">yum install ntp</span><br><span class="line"><span class="comment"># 开机启动服务</span></span><br><span class="line">systemctl <span class="built_in">enable</span> ntpd</span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">systemctl start ntpd</span><br><span class="line"><span class="comment"># 设置亚洲时区</span></span><br><span class="line">timedatectl <span class="built_in">set</span>-timezone Asia/Shanghai</span><br><span class="line"><span class="comment"># 启用NTP同步</span></span><br><span class="line">timedatectl <span class="built_in">set</span>-ntp yes</span><br><span class="line"><span class="comment"># 重启ntp服务</span></span><br><span class="line">systemctl restart ntpd</span><br><span class="line"><span class="comment"># 手动同步时间</span></span><br><span class="line">ntpq -p</span><br></pre></td></tr></table></figure><h3 id="4-3-RTC设为本地时间会有告警"><a href="#4-3-RTC设为本地时间会有告警" class="headerlink" title="4.3 RTC设为本地时间会有告警"></a>4.3 RTC设为本地时间会有告警</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@localhost ~</span>]<span class="meta"># timedatectl set-local-rtc 1</span></span><br><span class="line">[<span class="meta">root@localhost ~</span>]<span class="meta"># timedatectl</span></span><br><span class="line">      Local time: Thu <span class="number">2016</span><span class="number">-05</span><span class="number">-26</span> <span class="number">15</span>:<span class="number">31</span>:<span class="number">59</span> CST</span><br><span class="line">  Universal time: Thu <span class="number">2016</span><span class="number">-05</span><span class="number">-26</span> <span class="number">07</span>:<span class="number">31</span>:<span class="number">59</span> UTC</span><br><span class="line">        RTC time: Thu <span class="number">2016</span><span class="number">-05</span><span class="number">-26</span> <span class="number">15</span>:<span class="number">31</span>:<span class="number">59</span></span><br><span class="line">       Time zone: Asia/Shanghai (CST, +<span class="number">0800</span>)</span><br><span class="line">     NTP enabled: yes</span><br><span class="line">NTP synchronized: yes</span><br><span class="line"> RTC <span class="keyword">in</span> local TZ: yes</span><br><span class="line">      DST active: n/a</span><br><span class="line"></span><br><span class="line">Warning: The system <span class="keyword">is</span> configured to read the RTC time <span class="keyword">in</span> the local time zone.</span><br><span class="line">         This mode can not be fully supported. It will create various problems</span><br><span class="line">         with time zone changes and daylight saving time adjustments. The RTC</span><br><span class="line">         time <span class="keyword">is</span> never updated, it relies <span class="keyword">on</span> external facilities to maintain it.</span><br><span class="line">         If at all possible, use RTC <span class="keyword">in</span> UTC <span class="keyword">by</span> calling</span><br><span class="line">         <span class="string">'timedatectl set-local-rtc 0'</span>.</span><br></pre></td></tr></table></figure><blockquote><p>因为硬件时钟不能保存时区和夏令时调整，修改后就无法从硬件时钟中读取出准确标准时间；不建议修改。</p></blockquote><ol><li><code># 安装 ntpdate</code></li><li><code>apt-get install ntpdate</code></li><li></li><li><code># 设置系统时间与网络时间同步（cn.pool.ntp.org 位于中国的公共 NTP 服务器）</code></li><li><code>ntpdate cn.pool.ntp.org</code></li><li></li><li><code># 将系统时间写入硬件时间</code></li><li><code>hwclock --systohc</code></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-基本概念&quot;&gt;&lt;a href=&quot;#1-基本概念&quot; class=&quot;headerlink&quot; title=&quot;1. 基本概念&quot;&gt;&lt;/a&gt;1. 基本概念&lt;/h2&gt;&lt;h3 id=&quot;1-1-GMT、UTC、CST、DST-时间&quot;&gt;&lt;a href=&quot;#1-1-GMT、UTC、CST、DST-时间&quot; class=&quot;headerlink&quot; title=&quot;1.1 GMT、UTC、CST、DST 时间&quot;&gt;&lt;/a&gt;1.1 GMT、UTC、CST、DST 时间&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;UTC&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;整个地球分为二十四时区，每个时区都有自己的本地时间。在国际无线电通信场合，为了统一起见，使用一个统一的时间，称为通用协调时(UTC, Universal Time Coordinated)。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GMT&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;格林威治标准时间 (Greenwich Mean Time)指位于英国伦敦郊区的皇家格林尼治天文台的标准时间，因为本初子午线被定义在通过那里的经线。(UTC与GMT时间基本相同，本文中不做区分)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CST&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;中国标准时间 (China Standard Time)&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;GMT + 8 = UTC + 8 = CST&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;DST&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;夏令时(Daylight Saving Time) 指在夏天太阳升起的比较早时，将时间拨快一小时，以提早日光的使用。（中国不使用）&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://ericshen.xyz/categories/Linux/"/>
    
    
      <category term="linux" scheme="https://ericshen.xyz/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Cloud分布式项目搭建模板</title>
    <link href="https://ericshen.xyz/2019/07/02/Spring-Cloud%E5%88%86%E5%B8%83%E5%BC%8F%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E6%A8%A1%E6%9D%BF/"/>
    <id>https://ericshen.xyz/2019/07/02/Spring-Cloud%E5%88%86%E5%B8%83%E5%BC%8F%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E6%A8%A1%E6%9D%BF/</id>
    <published>2019-07-02T02:37:47.000Z</published>
    <updated>2020-03-31T09:39:35.824Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Cloud分布式项目搭建模板"><a href="#Spring-Cloud分布式项目搭建模板" class="headerlink" title="Spring-Cloud分布式项目搭建模板"></a>Spring-Cloud分布式项目搭建模板</h1><h1 id="概念引入"><a href="#概念引入" class="headerlink" title="概念引入"></a>概念引入</h1><h2 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h2><p><strong>Eureka:</strong> 服务注册中心。通过Eureka可以监控各个服务的运行状态。它具有如下几个角色：</p><ul><li><p>Eureka Server： 提供服务注册与发现</p></li><li><p>Service Provider: 服务提供方。将自身注册到Eureka，供消费者使用</p></li><li><p>Service Consumer:  服务消费方。从Eureka中获取服务器提供方列表，从而消费服务</p></li></ul><a id="more"></a><p>举个栗子：</p><p><img src="https://i.loli.net/2019/11/12/O7VLhv5gmTUioEX.png" alt=""></p><blockquote><p>  问题引入：</p></blockquote><p>前端APP发送一个请求，此请求需要调用某个服务的接口，比如此时有两个订单服务、一个派送服务 ( 因为要考虑并发，所以通常服务不止一个，而是一个集群 )。上图中前端APP直接请求某个具体服务的接口，如果后端服务集群非常庞大，前端就要记录很多服务的IP地址。并且对于同一服务的集群配置情况，前端APP还需要自行判断到底调用哪个服务。</p><blockquote><p>  解决办法：</p></blockquote><p>显然上述的方式是不可取的。按照之前开发SSM框架前后端不分离时，通常页面直接请求的内部服务接口，从不考虑服务的具体IP地址，因为默认使用的此服务的IP地址。那么在微服务架构中也应该这样设计。所以我们加一个 <strong>GateWay网关服务</strong>，前端APP直接请求请求网关，仅需要记录网关的IP地址即可，这样就将后端服务接口寻址调用的工作交给了服务端完成。举个栗子：</p><p><img src="https://i.loli.net/2019/11/12/2rpeySQnmYPkvRM.png" alt=""></p><blockquote><p>  问题引入：</p></blockquote><p>虽然使用了网关让前端APP直接调用网关地址，由网关负责具体的接口寻址调用，从而减轻了前端的负担。但是，同样，网关也仍然需要知道所有服务的IP地址和对应的接口，并且对于同一服务集群配置的情况仍然要考虑到底调用哪个服务才能分摊请求压力。</p><blockquote><p>  解决办法：</p></blockquote><p>所以，需要一个服务，他能记录系统中所有的微服务IP地址；并且有类似负载均衡的算法，对于服务集群配置，该服务能知道调用哪些服务才能平均分配请求的压力；并且，如果哪个服务崩溃，该服务还能快速知道并不再向崩溃的服务发送请求。于是，<strong>Eureka</strong>诞生了。</p><p><img src="https://i.loli.net/2019/11/12/I2DozuMlL3gWQ61.png" alt=""></p><p>Eureka是服务注册中心，其他具体服务可以向这个Eureka注册中心注册自己。当前端发送请求时，首先前端APP会直接请求网关，当然网关服务也注册在Eureka注册中心上，然后网关把接收到的请求交由Eureka处理，Eureka接收到这些请求，会从自己的服务注册列表中寻找对应的服务地址，然后实现调用具体的服务。</p><h2 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h2><blockquote><p>  问题引入：</p></blockquote><p>在上面的介绍中，我们基本解决了前端APP调用后端服务集群的问题。但又必须考虑一个问题，分布式微服务项目，即各个服务相互独立，但是各个服务又存在相互调用的关系。如何解决服务于服务之间的通信呢？</p><blockquote><p>  解决办法：</p></blockquote><p>在微服务架构中，服务于服务的通讯都是基于Http Restful的。SpringCloud有两种调用方式：</p><ul><li>使用 <strong>Ribbon + RestTemplate</strong>。<strong>Ribbon</strong>是一个负载均衡客户端，可以很好的控制Http和Tcp的一些行为。而<strong>RestTemplate</strong>是Spring本身提供的用于远程调用Rest接口的HTTP客户端。</li><li>使用 <strong>Feign</strong>。<strong>Feign</strong>是一个声明式的HTTP客户端，仅需要一个<strong>@FeignClient</strong>注解就能实现远程调用。<strong>Feign</strong>默认集成了<strong>Ribbon</strong>，并和<code>Eureka</code>结合，默认实现了负载均衡的效果。</li></ul><h2 id="Hystrix"><a href="#Hystrix" class="headerlink" title="Hystrix"></a>Hystrix</h2><blockquote><p>  问题引入：</p></blockquote><p>在集群项目中，如果突然某个服务因为访问压力过大崩溃了，Eureka再调用该服务就会调用失败，并且如果该服务向下还存在与其他服务的关联，那么就会造成其他服务也不可用，从而使错误传递下去，这也就是<strong>雪崩效应</strong>。如何解决呢？</p><blockquote><p>  解决办法：</p></blockquote><p><strong>Hystrix</strong>的出现就是解决这一现象。<strong>Hystrix</strong>熔断器就像家用电闸中的保险丝，如果整个电路中某处发生了漏电、或者用电过高保险丝就会直接熔断，直接停电阻止事态恶化。如果集群中某个服务不可用、或者响应时间过长，Hystrix会直接阻断Eureka再调用此服务，从而避免了系统中所有服务都不可用。</p><h2 id="Hystrix-Dashboard"><a href="#Hystrix-Dashboard" class="headerlink" title="Hystrix-Dashboard"></a>Hystrix-Dashboard</h2><blockquote><p>  问题引入：</p></blockquote><p>上面介绍了使用<strong>Hystrix</strong>实现熔断服务，但作为开发者，我们并不能确定服务什么时候被熔断。</p><blockquote><p>  解决办法：</p></blockquote><p>提供了<code>hystrix-dashboard</code>工具实现实时监控Hystrix熔断器的状态。</p><h2 id="Zuul"><a href="#Zuul" class="headerlink" title="Zuul"></a>Zuul</h2><p><strong>Zuul</strong>路由网关。举个栗子：</p><p><img src="https://i.loli.net/2019/11/12/Vf9DvhrYsFmpgTC.png" alt=""></p><p>如上是一个基本的微服务架构图，先抛开左侧的配置服务，如果前端APP请求后台接口，显然前端无法记录后端那么多服务的API地址，按照SSM框架的开发思路，前端APP仅需要记录一个IP地址即可，所有的请求都应该是请求这个IP中的某个接口。</p><p>那么<strong>Zuul</strong>路由网关的作用就是如此，他实现将客户端<strong>按照一定约束</strong>的不同请求转发到对应的服务，这样就实现客户端仅记录一个IP地址就能实现请求不同服务的接口。</p><h2 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h2><p>如果系统服务模块非常多时，每次修改服务配置都要修改服务<code>src/main/resources</code>下的<code>application.yml</code>可能会很麻烦，<code>spring-cloud-config</code>就解决了这个问题，Config Server端实现将配置文件内容以接口的形式暴露，Client端通过该接口得到配置文件内容，并以此初始化自己的应用。</p><h2 id="ZipKin"><a href="#ZipKin" class="headerlink" title="ZipKin"></a>ZipKin</h2><p><strong>ZipKin</strong> 服务链路追踪。可以追踪系统中服务间的依赖调用关系，查看调用的详细数据，收集服务的详细数据。提供 <strong>Zipkin UI</strong> 可以轻松的在Web端收集和分析数据。</p><h2 id="Spring-Boot-Admin"><a href="#Spring-Boot-Admin" class="headerlink" title="Spring-Boot-Admin"></a>Spring-Boot-Admin</h2><p><strong>Spring Boot Admin</strong> 实现堆各个微服务的健康状态、会话数量、并发数、服务资源、延迟等信息的收集，是一套强大的监控管理系统</p><h1 id="项目实战"><a href="#项目实战" class="headerlink" title="项目实战"></a>项目实战</h1><p>本地创建一个空文件夹，使用IDEA打开这个文件夹，并在其中创建<code>pom.xml</code>文件</p><p><code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.eric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>template<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>template<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Greenwich.SR1<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="搭建Eureka服务"><a href="#搭建Eureka服务" class="headerlink" title="搭建Eureka服务"></a>搭建Eureka服务</h2><p>Eureka是服务注册中心，但它自己同样也是一个服务。</p><ol><li><p>和上面一样，在<code>cloud-template</code>文件夹下创建<code>template-eureka</code>文件夹</p></li><li><p>创建该服务的启动器类：<code>EurekaApplication</code> </p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>仅需要添加<code>@EnableEurekaServer</code>就告诉了Spring这个服务的Eureka服务注册中心。</p><ol start="3"><li>在<code>cloud-template</code>父工程<code>pom.xml</code>中新增一个节点</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>template-eureka<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>创建<code>application.yml</code>配置文件</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line">    <span class="comment"># 应用名称</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">template-eureka</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line">    <span class="comment"># Eureka注册中心HOST主机地址，可以采用：1.直接配置IP；2.配置本地域名并修改本地hosts文件</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line">    <span class="comment"># 是否将自己注册到注册中心。因为项目中只有一个注册中心就是自己，所以无需再注册</span></span><br><span class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># 是否从远程拉取其他注册中心，因为注册中心只有自己所以不需要。如果注册中心有多个，可以相互暴露，相互拉取</span></span><br><span class="line"><span class="attr">    fetch-registry:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line">      <span class="comment"># 该注册中心连接地址</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure><ol start="5"><li>启动<code>EurekaApplication.java</code>中的main方法，浏览器访问：<code>localhost:8080</code></li></ol><p><img src="https://i.loli.net/2019/11/12/vhbmQpCikURyDJe.png" alt=""></p><p>可以看到此时没有任何服务注册到Eureka注册中心。</p><h2 id="搭建生产者服务"><a href="#搭建生产者服务" class="headerlink" title="搭建生产者服务"></a>搭建生产者服务</h2><ol><li>在<code>cloud-template</code>下创建<code>template-admin</code>文件夹</li><li>创建<code>pom.xml</code>，主要添加一个依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>在父工程<code>cloud-template</code>的<code>pom.xml</code>中再添加一个节点</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>template-eureka<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>template-admin<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>创建该服务的启动器类：<code>AdminApplication.java</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(AdminApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只需要添加注解<code>@EnableEurekaClient</code>就表明该服务Eureka的一个服务提供方。</p><ol start="5"><li>创建配置文件<code>application.yml</code></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">template-admin</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line">      <span class="comment"># Eureka注册中心连接地址</span></span><br><span class="line">      <span class="comment"># 如果注册中心地址配置的域名，这里使用 http://域名/eureka/ 格式</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8080/eureka/</span></span><br></pre></td></tr></table></figure><ol start="6"><li>运行<code>AdminApplication.java</code>中的main方法，刷新<code>localhost:8080</code>地址：</li></ol><p><img src="https://i.loli.net/2019/11/12/UcqQY278mZfA3ko.png" alt=""></p><p>可看到，<code>template-admin</code>服务已经注册到了Eureka注册中心</p><ol start="7"><li>在<code>template-admin</code>服务中创建一个Controller类：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"hello/&#123;name&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(@PathVariable String name)</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"&#123;&#125;===&gt;&gt;&gt;&#123;&#125;"</span>, <span class="string">"Getting into admin"</span>, <span class="string">"hello"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello,"</span> + name + <span class="string">", this is template admin!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="8"><li>重启<code>template-admin</code>服务，访问：`localhost:9001/hello/kobe:</li></ol><p><img src="https://i.loli.net/2019/11/12/DZXc49fqLjGvgao.png" alt=""></p><h2 id="搭建消费者服务"><a href="#搭建消费者服务" class="headerlink" title="搭建消费者服务"></a>搭建消费者服务</h2><p>上面搭建了 <code>template-admin</code> 生产者服务，它暴露了Rest接口，那么其他服务想要调用生产者服务的接口，就必须实现与生产者服务的通信。最开始<strong>概念引入</strong>部分我们提到了<code>SpringCloud</code>实现服务间通信的两种方式，这里我们直接使用<strong>Feign</strong>实现。</p><ol><li>在<code>cloud-template</code>下创建<code>template-auth</code>文件夹</li><li>创建<code>pom.xml</code>，主要添加两个依赖：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>在父工程<code>cloud-template</code>下再添加一个节点</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>template-eureka<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>template-admin<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>template-auth<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>创建该服务的启动器类：<code>AuthApplication.java</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(AuthApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要注意添加<code>@EnableDiscoveryClient</code>注解声明该服务为Eureka中服务消费方；添加<code>@EnableFeignClients</code>开启Feign声明式服务间通信（配合<code>@FeignClient</code>注解使用）。</p><ol start="5"><li>创建配置文件<code>application.yml</code></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9002</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">template-auth</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line">      <span class="comment"># Eureka注册中心连接地址</span></span><br><span class="line">      <span class="comment"># 如果注册中心地址配置的域名，这里使用 http://域名/eureka/ 格式</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8080/eureka/</span></span><br></pre></td></tr></table></figure><ol start="6"><li>模拟创建一个Controller：<code>AuthController.java</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"hello/&#123;name&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(@PathVariable String name)</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"&#123;&#125;===&gt;&gt;&gt;&#123;&#125;"</span>, <span class="string">"Getting into admin"</span>, <span class="string">"hello"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello,"</span> + name + <span class="string">", this is template admin!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>启动项目，访问<code>localhost:8080</code></li></ol><p><img src="https://i.loli.net/2019/11/12/a4JBlPqKbQc2AEw.png" alt=""></p><p>可以看到该服务已经注册到了Eureka注册中心了。继续访问<code>http://localhost:9002/hello/james</code>：</p><p><img src="https://i.loli.net/2019/11/12/Fa6oiXsYTHI7Lx3.png" alt=""></p><ol start="8"><li>在<code>template-auth</code>服务下创建<code>feign/service</code>文件夹，并在其中创建<code>AuthFeignService.java</code>接口：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"template-admin"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AuthFeignService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这里暴露一个Feign接口地址，其中`<span class="doctag">@GetMapping</span>`中的地址一定对应了`template-admin`服务中某个Controller中的请求地址（如果`template-admin`服务中没有这个接口地址就会404）</span></span><br><span class="line"><span class="comment">     * 如果其他地方调用了AuthFeignService接口的hello方法，FeignClient将类似通过转发的方式去请求调用`template-admin`服务中符合的接口地址的方法</span></span><br><span class="line"><span class="comment">     * 如果请求传递了参数，需要加<span class="doctag">@RequestParam</span>注解标识。如果URL中有动态参数，要添加<span class="doctag">@PathVariable</span>注解</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello/&#123;name&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(@PathVariable(name = <span class="string">"name"</span>)</span> String name)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，这是一个供Feign调用的接口。Feign实现服务端通信有几个基本条件：</p><ul><li>该服务添加了<code>spring-cloud-starter-openfeign</code>依赖</li><li>该服务的启动器类上添加了<code>@EnableFeignClients</code>注解</li><li>该服务提供了一个接口类，并在该接口上添加了<code>@FeignClient</code>注解，并且<code>@FeignClient</code>注解中<code>value</code>属性值必须等于一个已在Eureka中注册的服务名称。</li><li>在该接口上添加一个调用的方法，该方法必须和被调用服务方<code>Controller</code>中的方法格式相同(除了没有方法具体实现，方法的返回值、参数列表都要相同)，并且需要和被调用方<code>Controller</code>接口一样在方法上添加<code>@RequestMapping</code>注解，指明被调用方接口的具体<code>URL</code>。</li></ul><ol start="9"><li>修改<code>template-auth</code>服务中的<code>AuthController</code>类，添加一个请求接口：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthFeignService authFeignService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟Feign远程调用，这里暴露一个请求接口`/feignHello`</span></span><br><span class="line"><span class="comment">     * 这个请求接口将调用`AuthFeignService`（Feign接口）</span></span><br><span class="line"><span class="comment">     * Feign接口（`AuthFeignService`接口）将会通过`<span class="doctag">@FeignClient</span>(value = "template-admin")`在Eureka注册中心寻找`template-admin`模块</span></span><br><span class="line"><span class="comment">     * Feign接口类似Controller的Rest接口，也暴露一个地址，这个地址对应`template-admin`模块的一个Controller接口地址</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/feignHello/&#123;name&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">feignHello</span><span class="params">(@PathVariable String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> authFeignService.hello(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，这个<code>/feignHello/{name}</code>请求接口将调用<code>AuthFeignService</code>的<code>hello</code>方法，而<code>AuthFeignService</code>的<code>hello</code>方法最终由Feign调用<code>template-admin</code>中的<code>/hello</code>请求接口。</p><p>所以，<code>template-auth</code>服务中的<code>/feignHello/{name}</code>接口最终调用了<code>template-admin</code>服务中的<code>/hello/{name}</code>接口。重启<code>template-auth</code>服务，访问：<code>localhost:9002/feignHello/tycoding</code>:</p><p><img src="https://i.loli.net/2019/11/12/EDgaLsp8vkRxJdQ.png" alt=""></p><p>显然，我们的分析都是正确的，使用Feign声明式服务调用，仅通过<code>@FeignClient</code>注解就能完成服务间通信。</p><h2 id="配置Hystrix熔断机制"><a href="#配置Hystrix熔断机制" class="headerlink" title="配置Hystrix熔断机制"></a>配置Hystrix熔断机制</h2><p>前面提到了Hystrix主要用于在多个服务间存在通信，而通信的某一方因为压力过大、响应时间过长而导致不可用，Hystrix就会阻止Eureka再给该服务分配请求，从而保证服务的高可用。</p><p>因此，Hystrix主要配置在存在服务间通信的地方。因为我们使用的Feign，Feign正是用来实现服务间通信的。所以我们只需要在自己创建的Feign接口中配置熔断器即可。因为Feign已经内置了Hystrix，我们只需要配置启用hystrix即可。</p><ol><li>修改<code>template-auth</code>中的<code>application.yml</code>:</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line"><span class="attr">  hystrix:</span></span><br><span class="line">    <span class="comment"># 开启Feign的Hystrix熔断器支持</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ol start="2"><li>在<code>/feign/service/fallback</code>中创建<code>AuthFeignServiceFallbackImpl.java</code>:</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthFeignServiceFallbackImpl</span> <span class="keyword">implements</span> <span class="title">AuthFeignService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello "</span> + name + <span class="string">", this is template-auth, but request error"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个类实现了<code>AuthFeignService</code>远程调用接口，作用就是当<code>AuthFeignService</code>调用的服务不可用时，Hystrix直接执行这个实现类中的方法，而不再执行<code>AuthFeignService</code>中的远程调用方法。</p><ol start="3"><li>重启<code>template-auth</code>服务，访问<code>localhost:9002/feignHello/james发现正常访问。此时关闭</code>template-admin`服务：</li></ol><p><img src="https://i.loli.net/2019/11/12/etEUOThk3rXIdMf.png" alt=""></p><p>该服务已关闭，继续访问：<code>localhost:9002/feignHello/james</code>:</p><p><img src="https://i.loli.net/2019/11/12/lO6KjUqHCGpYovA.png" alt=""></p><p>可以看到访问该URL时，浏览器直接显示的<code>AuthFeignServiceFallbackImpl.java</code>中的响应数据，而不是再加载一下请求<code>AuthFeignService.java</code>中的请求。就是说如果被调用方服务一旦不可用，Hystrix就<strong>立刻</strong>熔断与该服务之间的通信。</p><h2 id="配置Hystrix-Dashboard"><a href="#配置Hystrix-Dashboard" class="headerlink" title="配置Hystrix-Dashboard"></a>配置Hystrix-Dashboard</h2><p>可以通过<code>hystrix-dashboard</code>工具实现对熔断器Hystrix的实时监控。因为我们在<code>template-auth</code>服务中使用了Feign远程调用，并且使用了Hystrix熔断器，所以我们只需要在<code>template-auth</code>服务中配置熔断监控：</p><ol><li>引入依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>在<code>template-auth</code>启动器类上添加<code>@EnableHystrixDashboard</code>注解</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@EnableHystrixDashboard</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(AuthApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>在<code>/config</code>文件夹下创建<code>HystrixDashboardConfig.java</code>:</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HystrixDashboardConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">getServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HystrixMetricsStreamServlet streamServlet = <span class="keyword">new</span> HystrixMetricsStreamServlet();</span><br><span class="line">        ServletRegistrationBean registrationBean = <span class="keyword">new</span> ServletRegistrationBean(streamServlet);</span><br><span class="line">        registrationBean.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">        registrationBean.addUrlMappings(<span class="string">"/hystrix.stream"</span>);</span><br><span class="line">        registrationBean.setName(<span class="string">"HystrixMetricsStreamServlet"</span>);</span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果项目中添加了<code>spring-cloud-starter-netflix-hystrix-dashboard</code>依赖，此依赖提供了 <code>/hystrix</code> 接口地址，这是访问<code>hystrix-dashboard</code>的入口地址。但是<code>hystrix-dashboard</code>需要监控某个Hystrix熔断器地址，那么这个监控地址哪来呢？</p><p>在SpringBoot2.x之前的版本中，SpringBoot默认提供了一个接口地址用于访问Hystrix熔断器。但是在SpringBoot2版本中需要手动提供一个Hystrix监控地址。上面的配置就是将Servlet ( HystrixMetricsStreamServlet )注入到Web容器中，类似<code>web.xml</code>中的<code>&lt;servlet-mapping&gt;</code>和<code>&lt;servlet-name&gt;</code>。</p><ol start="4"><li>重启<code>template-auth</code>服务，访问：<code>localhost:9002/hystrix</code></li></ol><p><img src="https://i.loli.net/2019/11/12/18ZU9HbWRMVpAKf.png" alt=""></p><p>在<code>http...</code>输入框中输入``localhost:9002/hystrix.stream<code>，其中</code>Delay`是每隔几毫秒刷新一次</p><p><img src="https://i.loli.net/2019/11/12/8gIpa9RoBfkyZYG.png" alt=""></p><p>显示Loading说明连接成功，但是因为没有触发Hystrix熔断器，所以监控没有显示数据。我们继续访问：<code>localhost:9002/feignHello/james</code>，重复刷新5次网页：</p><p><img src="https://i.loli.net/2019/11/12/qHsrO8RSLc6lkFI.png" alt=""></p><p>因为，所有的服务都是启动的，所以熔断器没有熔断。此时关掉<code>template-admin</code>服务，再次刷新<code>localhost:9002/feignHello/james</code>接口7次：</p><p><img src="https://i.loli.net/2019/11/12/4cxAfe1k2m8IhNO.png" alt=""></p><h2 id="配置Zuul路由网关"><a href="#配置Zuul路由网关" class="headerlink" title="配置Zuul路由网关"></a>配置Zuul路由网关</h2><ol><li><p>在<code>cloud-template</code>下创建<code>template-zuul</code>文件夹</p></li><li><p>创建<code>pom.xml</code>，主要添加两个依赖：</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>在父工程<code>cloud-template</code>的<code>pom.xml</code>下添加一个节点：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>template-eureka<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>template-admin<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>template-auth<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>template-zuul<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>创建该服务的启动器类：<code>ZuulApplication.java</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ZuulApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>@EnableEurekaClient</code>表明此服务是<strong>Eureka</strong>的客户端，也就是此服务需要注册到Eureka注册中心；而注解<code>@EnableZuulProxy</code>就是开启<strong>Zuul</strong>网关的支持。</p><ol start="4"><li>创建配置文件：<code>application.yml</code></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9003</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">template-zuul</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line">      <span class="comment"># Eureka注册中心连接地址</span></span><br><span class="line">      <span class="comment"># 如果注册中心地址配置的域名，这里使用 http://域名/eureka/ 格式</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8080/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  routes:</span></span><br><span class="line">    <span class="comment"># 路由名称，随意</span></span><br><span class="line"><span class="attr">    template-admin:</span></span><br><span class="line">      <span class="comment"># 路由地址</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/api/admin/**</span></span><br><span class="line">      <span class="comment"># 该路由地址对应的服务名称</span></span><br><span class="line"><span class="attr">      serviceId:</span> <span class="string">template-admin</span></span><br><span class="line"><span class="attr">    template-auth:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/api/auth/**</span></span><br><span class="line"><span class="attr">      serviceId:</span> <span class="string">template-auth</span></span><br></pre></td></tr></table></figure><p>其中，<code>zuul.routers</code>下可以配置多个路由表，每个路由表中对应了具体的请求路径前缀<code>path</code>，这个请求路径最终会被<code>Zuul</code>路由到某个服务中，所需需要对应配置一个<code>serviceId</code>对应某个服务的名称。这样就实现了请求<code>/api/admin/xx</code>接口<code>Zuul</code>就会将请求转发到<code>template-admin</code>服务、请求<code>/api/auth/xx</code>接口Zuul就会将请求转发到<code>template-auth</code>服务。</p><ol start="5"><li>按照<code>template-eureka</code> 、<code>template-zuul</code>、<code>template-admin</code>、<code>template-auth</code>的顺序启动项目。</li></ol><ul><li>访问：<code>localhost:9003/api/admin/hello/curry</code>:</li></ul><p><img src="https://i.loli.net/2019/11/12/m3MTD45Urevkacs.png" alt=""></p><ul><li>访问：<code>localhost:9003/api/auth/hello/curry</code>:</li></ul><p><img src="https://i.loli.net/2019/11/12/ZobVIiUnG3tAcuN.png" alt=""></p><ul><li>访问：<code>localhost:9003/api/auth/feignHello/curry</code>:</li></ul><p><img src="https://i.loli.net/2019/11/12/r9znF72vs1BXtLW.png" alt=""></p><p>如此，通过<code>template-zuul</code>服务的路由转发功能，实现了仅仅通过请求<code>9003</code>这一个IP地址就能访问多个服务的接口。但实际测试中你可能还会遇到如下的错误：</p><p><img src="https://i.loli.net/2019/11/12/XRZJfxuKYnMb4gy.png" alt=""></p><p>这就是一个服务不可用的现象，Eureka会直接熔断与该服务的链接。而产生的原因与本地电脑的性能有关，所以就可能在项目运行中出现服务链接不上而被Eureka熔断的情况。</p><h3 id="配置Zuul的错误回调"><a href="#配置Zuul的错误回调" class="headerlink" title="配置Zuul的错误回调"></a>配置Zuul的错误回调</h3><p>上面图中就一个Zuul网关路由错误的情况，而出现错误，肯定不能弹出Spring内置的错误页面，而需要定制一个错误信息，通常是JSON格式。</p><p>在<code>/fallback</code>目录下创建：<code>AuthFeignFallbackProvider.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthFeignFallbackProvider</span> <span class="keyword">implements</span> <span class="title">FallbackProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRoute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// serviceId，如果需要所有的调用都支持回退，则return "*" 或 return null</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"template-auth"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回定制的错误信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> route</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cause</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClientHttpResponse <span class="title">fallbackResponse</span><span class="params">(String route, Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ClientHttpResponse() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> HttpStatus <span class="title">getStatusCode</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> HttpStatus.OK;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRawStatusCode</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> HttpStatus.OK.value();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getStatusText</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> HttpStatus.OK.getReasonPhrase();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> InputStream <span class="title">getBody</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">                Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                map.put(<span class="string">"status"</span>, <span class="number">200</span>);</span><br><span class="line">                map.put(<span class="string">"message"</span>, <span class="string">"链接失败，请检查您的网络"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ByteArrayInputStream(mapper.writeValueAsString(map).getBytes(<span class="string">"UTF-8"</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> HttpHeaders <span class="title">getHeaders</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                HttpHeaders httpHeaders = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">                httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);</span><br><span class="line">                <span class="keyword">return</span> httpHeaders;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里要强调一个细节，如果Zuul路由服务失败不应该给客户端返回404、500等错误，因为客户端直接请求的是<code>template-zuul</code>路由网关服务，而请求<code>template-zuul</code>服务是成功的，<code>template-zuul</code>将请求转发到其他服务属于服务器内部错误，这中错误不应该暴露给客户端。除非是<code>template-zuul</code>路由网关服务自己挂了，才会返回给客户端404、500等错误。</p><p>重启<code>template-zuul</code>服务，<strong>立即</strong>访问<code>http://localhost:9003/api/auth/feignHello/curry</code>，一般都会链接不上服务：</p><p><img src="https://i.loli.net/2019/11/12/uXk1PAfrUYSpoMB.png" alt=""></p><h3 id="配置Zuul服务过滤器"><a href="#配置Zuul服务过滤器" class="headerlink" title="配置Zuul服务过滤器"></a>配置Zuul服务过滤器</h3><p>如果需要对请求进行拦截过滤，比如登录时应该携带<code>Token</code>值才运行请求，那么就可以使用Zuul提供的过滤器功能。</p><ul><li>在<code>/filter</code>目录下创建<code>LoginFilter.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤器类型：</span></span><br><span class="line"><span class="comment">     * pre: 路由前</span></span><br><span class="line"><span class="comment">     * routing: 路由时</span></span><br><span class="line"><span class="comment">     * post: 路由后</span></span><br><span class="line"><span class="comment">     * error: 路由发生错误时</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"pre"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤的顺序</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否需要过滤</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤器的具体业务逻辑</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ZuulException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        RequestContext currentContext = RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletRequest request = currentContext.getRequest();</span><br><span class="line">        logger.info(<span class="string">"&#123;&#125; &gt;&gt;&gt; &#123;&#125;"</span>, request.getMethod(),   request.getRequestURI().toString());</span><br><span class="line">        String token = request.getParameter(<span class="string">"token"</span>);</span><br><span class="line">        <span class="keyword">if</span> (token == <span class="keyword">null</span>) &#123;</span><br><span class="line">            logger.error(<span class="string">"Error! Request Token is Empty"</span>);</span><br><span class="line">            currentContext.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">            currentContext.setResponseStatusCode(<span class="number">401</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                currentContext.getResponse().getWriter().write(<span class="string">"Request token is empty"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>重新启动<code>template-zuul</code>服务。访问<code>localhost:9003/api/admin/hello/curry</code></li></ul><p><img src="https://i.loli.net/2019/11/12/TdC8DXRcMfe9hBF.png" alt=""></p><p>增加<code>token</code>，访问``localhost:9003/api/admin/hello/curry?token=123`</p><p><img src="https://i.loli.net/2019/11/12/PesWG7ox5p2TFda.png" alt="image.png"></p><h2 id="搭建Config服务"><a href="#搭建Config服务" class="headerlink" title="搭建Config服务"></a>搭建Config服务</h2><h3 id="Server端"><a href="#Server端" class="headerlink" title="Server端"></a>Server端</h3><ol><li>在<code>cloud-template</code>下创建文件夹<code>template-config</code></li><li>创建<code>pom.xml</code>，主要添加以下两个依赖：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>创建配置文件<code>application.yml</code></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8888</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">template-config</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 获取本地配置文件，本身支持：本地储存、git远程、SVN</span></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line"><span class="attr">    active:</span> <span class="string">native</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      server:</span></span><br><span class="line">        <span class="comment"># 获取本地配置文件的位置</span></span><br><span class="line"><span class="attr">        native:</span></span><br><span class="line"><span class="attr">          search-locations:</span> <span class="attr">classpath:config/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line">      <span class="comment"># Eureka注册中心连接地址</span></span><br><span class="line">      <span class="comment"># 如果注册中心地址配置的域名，这里使用 http://域名/eureka/ 格式</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8080/eureka/</span></span><br></pre></td></tr></table></figure><p>这里使用的本地储存配置文件，也可以采用从远程github、gitlab端读取：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 远程读取</span></span><br><span class="line"><span class="attr">cloud:</span></span><br><span class="line"><span class="attr">  config:</span></span><br><span class="line"><span class="attr">    label:</span> <span class="string">master</span> <span class="comment"># 配置仓库的分支</span></span><br><span class="line"><span class="attr">    server:</span></span><br><span class="line"><span class="attr">      git:</span></span><br><span class="line"><span class="attr">        uri:</span> <span class="attr">https://github.com/xx/spring-cloud-config</span> <span class="comment"># 配置Git仓库地址，如果用Github需要加.git，如果用Gitlab则不需要</span></span><br><span class="line"><span class="attr">        search-paths:</span> <span class="string">respo</span> <span class="comment"># 配置仓库路径</span></span><br><span class="line"><span class="attr">        username:</span> <span class="comment"># 访问Git仓库的账号</span></span><br><span class="line"><span class="attr">        password:</span> <span class="comment"># 访问Git仓库的密码</span></span><br></pre></td></tr></table></figure><ol start="4"><li>创建该服务的启动器类<code>ConfigApplication.java</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConfigApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>@EnableConfigServer</code>就是开启配置文件服务支持</p><ol start="5"><li>将<code>template-zuul</code>服务的配置文件<code>application.yml</code>拷贝到服务<code>template-zuul</code>的<code>/resources/config</code>目录下，重命名为<code>application-zuul-deb.yml</code>。</li><li>重启<code>template-zuul</code>服务，访问<code>localhost:8888/application-zuul/dev</code></li></ol><p><img src="https://i.loli.net/2019/11/12/73WazdrIYmPUZMo.png" alt="image-20191112184807433"></p><p>如此，就完成了Congi服务端配置。可以看到<code>application-zuul-dev.yml</code>文件中的数据已接口的形式可直接通过请求接口访问。注意主要使用<code>localhost:8888/config/application-zuul-dev.yml</code>访问，这样就相当于访问静态文件了。</p><h3 id="Client端"><a href="#Client端" class="headerlink" title="Client端"></a>Client端</h3><p>因为上面我们copy的<code>template-zuul</code>服务的配置文件到<code>template-config</code>服务的<code>/resources/config</code>文件夹下，所以以<code>template-zuul</code>服务举例，让<code>template-zuul</code>服务从<code>template-config</code>分布式配置中心获取配置文件。</p><ol><li>在<code>template-cloud</code>服务的<code>pom.xml</code>中添加依赖：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>修改<code>template-cloud</code>服务的<code>application.yml</code>配置文件：</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line"><span class="attr">    active:</span> <span class="string">native</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      uri:</span> <span class="attr">http://locahost:8888</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">application-zuul</span></span><br><span class="line"><span class="attr">      profile:</span> <span class="string">dev</span></span><br><span class="line"><span class="comment">#      label:</span></span><br></pre></td></tr></table></figure><p>如上，删除了<code>template-zuul</code>服务配置文件中原有的配置，这里仅配置从分布式配置中心<code>template-config</code>服务中读取配置文件信息。相关参数说明：</p><ul><li><code>spring.cloud.config.uri</code>: 配置服务中心的网址</li><li><code>spring.cloud.config.name</code>: 配置文件的前缀名</li><li><code>spring.cloud.config.label</code>: 配置仓库的分支。如果是本地读取，可不配置</li><li><code>spring.cloud.config.profile</code>: 配置文件的环境标识<ul><li><code>dev</code>: 开发环境</li><li><code>test</code>: 测试环境</li><li><code>prod</code>: 生产环境</li></ul></li></ul><ol start="3"><li>重新启动<code>template-zuul</code>服务，访问：<code>localhost:9003/api/admin/hello/tycoding?token=123</code></li></ol><p><img src="https://i.loli.net/2019/11/12/e5DpFjgnPI74oRQ.png" alt="image.png"></p><ol start="4"><li><p>注意事项：</p><p>  配置服务器的默认端口是 8888， 如果修改了默认端口，则客户端项目中就不能在<code>application.yml</code>或<code>application.properties</code>中配置<code>spring.cloud.config.uri</code>，必须在<code>bootstrap.yml</code>或是<code>bootstrap.properties</code>中配置，原因是<code>bootstrap</code>开头的配置文件会优先加载和配置。</p></li></ol><p><strong>开启Spring Boot Profile</strong></p><p>如果项目中分别部署了开发、测试、生产环境的配置文件，但如果切换不同的开发环境就可能要修改对应配置文件中的配置 ( <code>spring.cloud.config.profile</code>的参数值 )，而使用Spring Boot Profile就仅需要在启动项目时指定加载的文件，Spring就会自动加载该配置文件来启动项目。举个栗子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar template-auth-1.0.0-SNAPSHOT.jar --spring.profiles.active=prod</span><br></pre></td></tr></table></figure><p>其中<code>--spring.prodiles.active=prod</code>就会自动加载<code>application-auth-prod.yml</code>配置文件</p><h2 id="搭建ZipKin服务"><a href="#搭建ZipKin服务" class="headerlink" title="搭建ZipKin服务"></a>搭建ZipKin服务</h2><h3 id="Server端-1"><a href="#Server端-1" class="headerlink" title="Server端"></a>Server端</h3><ol><li>在<code>cloud-template</code>下创建文件夹<code>template-zipkin</code></li><li>创建<code>pom.xml</code></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.zipkin.java<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.zipkin.java<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zipkin-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-slf4j-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.zipkin.java<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zipkin-autoconfigure-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>在父工程<code>pom.xml</code>中添加ZipKin依赖的版本约定：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Greenwich.SR1<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">zipkin.version</span>&gt;</span>2.10.1<span class="tag">&lt;/<span class="name">zipkin.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>template-eureka<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>template-admin<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>template-auth<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>template-zuul<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>template-config<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>template-zipkin<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.zipkin.java<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;zipkin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.zipkin.java<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zipkin-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;zipkin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.zipkin.java<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zipkin-autoconfigure-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;zipkin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>创建该服务的启动器类<code>ZipKinApplication.java</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableZipkinServer</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZipkinApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ZipkinApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>创建配置文件<code>pom.xml</code></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: template-zipkin</span><br><span class="line"></span><br><span class="line">  # 解决Zipkin启动The bean 'characterEncodingFilter', defined in</span><br><span class="line">  main:</span><br><span class="line">    allow-bean-definition-overriding: true</span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line">  port: 9411</span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http://localhost:8080/eureka/</span><br><span class="line"></span><br><span class="line">management:</span><br><span class="line">  metrics:</span><br><span class="line">    web:</span><br><span class="line">      # 解决Zipkin报错IllegalArgumentException: Prometheus requires that all meters</span><br><span class="line">      server:</span><br><span class="line">        auto-time-requests: false</span><br></pre></td></tr></table></figure><p>注意：<code>9411</code>是默认端口</p><ol start="6"><li>启动项目，访问：<code>localhost:9411</code></li></ol><p><img src="https://i.loli.net/2019/11/12/uyKLf9UqRDgdnrO.png" alt="image.png"></p><h3 id="Client端-1"><a href="#Client端-1" class="headerlink" title="Client端"></a>Client端</h3><p>如果需要ZipKin监控所有服务的信息，需要让每个服务都成为ZipKin的服务端。</p><p>除了<code>template-zipkin</code>服务本身，其他的服务全都要成为ZipKin的客户端，以下配置需要在每个服务中都添加：</p><ol><li>修改服务的<code>pom.xml</code></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>修改服务的<code>application.yml</code>，如果服务的配置文件从<code>template-config</code>服务中加载的，就直接在<code>template-config</code>中配置该服务：</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  zipkin:</span></span><br><span class="line"><span class="attr">    base-url:</span> <span class="attr">http://localhost:9411</span></span><br></pre></td></tr></table></figure><ol start="3"><li>按照<code>template-eureka</code>、<code>template-config</code>、<code>template-zipkin</code>、<code>template-admin</code>、<code>template-auth</code>、<code>template-zuul</code>的顺序依次启动所有服务。访问<code>localhost:8080</code>:</li></ol><p><img src="https://i.loli.net/2019/11/12/JcD7NU4stz3uXT1.png" alt="image.png"></p><p>访问所有我们之前写好的接口，再访问<code>localhost:9411</code>:</p><p><img src="https://i.loli.net/2019/11/12/S7MaD9iBk63dhXq.png" alt="image.png"></p><p>比如观察<code>localhost:9003/api/auth/hello/tycoding?token=123</code>接口的链路信息：</p><p><img src="https://i.loli.net/2019/11/12/XlWT2mLDJjaSbtr.png" alt="image.png"></p><p>参数说明：</p><ul><li><code>span</code>: 基本工作单元</li><li><code>Trace</code>: 一系列Spans组成的树状结构</li><li><code>Annotation</code>: 用来即时记录一个时间的存在，比如请求的开始于结束<ul><li><code>cs</code>: Client Server，客户端发起一个请求，这个Annotation描述了这个Span的开始</li><li><code>sr</code>: Server Received，服务端获取请求并开始处理它。<code>sr - cs</code>得到网络延迟时间</li><li><code>ss</code>: Server Sent 请求处理完成，请求返回客户端。<code>ss - sr</code> 得到服务端处理请求的时间</li><li><code>cr</code>: Client Received 表明Span的结束，客户端成功接收到服务端的回复。<code>cr - cs</code>得到客户端从服务端获取回复花费的总时间。 </li></ul></li></ul><h2 id="搭建SpringBootAdmin服务"><a href="#搭建SpringBootAdmin服务" class="headerlink" title="搭建SpringBootAdmin服务"></a>搭建SpringBootAdmin服务</h2><h3 id="Server端-2"><a href="#Server端-2" class="headerlink" title="Server端"></a>Server端</h3><ol><li>在<code>cloud-template</code>下创建<code>template-boot-admin</code>文件夹</li><li>在<code>template-boot-admin</code>下创建<code>pom.xml</code></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jolokia<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jolokia-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>和ZipKin一样，SpringBootAdmin不受SpringCloud管理，所以要手动管理版本。修改父工程<code>pom.xml</code>:</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-boot-admin.version</span>&gt;</span>2.1.5<span class="tag">&lt;/<span class="name">spring-boot-admin.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot-admin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot-admin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>创建配置文件：<code>application.yml</code></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9004</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">template-boot-admin</span></span><br><span class="line"><span class="attr">  zipkin:</span></span><br><span class="line"><span class="attr">    base-url:</span> <span class="attr">http://localhost:9411</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line">      <span class="comment"># Eureka注册中心连接地址</span></span><br><span class="line">      <span class="comment"># 如果注册中心地址配置的域名，这里使用 http://域名/eureka/ 格式</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8080/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  endpoint:</span></span><br><span class="line"><span class="attr">    health:</span></span><br><span class="line"><span class="attr">      show-details:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">      exposure:</span></span><br><span class="line"><span class="attr">        include:</span> <span class="string">health,info</span></span><br></pre></td></tr></table></figure><ol start="5"><li>创建该服务的启动器类：<code>BootAdminApplication.java</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAdminServer</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BootAdminApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(BootAdminApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Client端-2"><a href="#Client端-2" class="headerlink" title="Client端"></a>Client端</h3><p>和ZipKin一样，如果需要SpringBootAdmin监控所有服务，就必须让所有服务都成为SpringBootAdmin的客户端。除了<code>template-boot-admin</code>服务本身，其他所有的服务都执行下列配置：</p><ol><li>修改<code>pom.xml</code>，添加如下配置</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>修改<code>application.yml</code>，添加如下配置。如果服务的配置加载于Config配置中心，就修改配置中心的配置文件。</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  boot:</span></span><br><span class="line"><span class="attr">    admin:</span></span><br><span class="line"><span class="attr">      client:</span></span><br><span class="line"><span class="attr">        url:</span> <span class="attr">http://localhost:9004</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>按照<code>template-eureka</code>、<code>template-config</code>、<code>template-zipkin</code>、<code>template-boot-admin</code>、<code>template-admin</code>、<code>template-auth</code>、<code>template-zuul</code> 顺序依次启动服务，查看<strong>Eureka</strong>访问<code>http://localhost:8080</code>，检查各服务状态：</p><p><img src="https://i.loli.net/2019/11/12/Rkva3ECl4jHrJNB.png" alt="image.png"></p></li><li><p>查看<strong>SpringBootAdmin</strong>，访问 <code>http://localhost:9004/</code><br><img src="https://i.loli.net/2019/11/12/HC2DmONLYzblswB.png" alt=""></p><p><img src="https://i.loli.net/2019/11/12/N25ROMD8uhKdxX1.png" alt="image.png"></p></li></ol><h1 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h1><p>请按照如下顺序依次启动服务：</p><ul><li>1.<code>template-eureka</code>: 分布式服务注册中心</li><li>2.<code>template-config</code>: 分布式配置中心</li><li>3.<code>template-zipkin</code>: 分布式服务链路追踪</li><li>4.<code>template-boot-admin</code>: 分布式服务监控中心</li><li>5.<code>template-admin</code>: 服务提供者</li><li>6.<code>template-auth</code>: 服务消费者</li><li>7.<code>template-zuul</code>: 分布式API网关</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring-Cloud分布式项目搭建模板&quot;&gt;&lt;a href=&quot;#Spring-Cloud分布式项目搭建模板&quot; class=&quot;headerlink&quot; title=&quot;Spring-Cloud分布式项目搭建模板&quot;&gt;&lt;/a&gt;Spring-Cloud分布式项目搭建模板&lt;/h1&gt;&lt;h1 id=&quot;概念引入&quot;&gt;&lt;a href=&quot;#概念引入&quot; class=&quot;headerlink&quot; title=&quot;概念引入&quot;&gt;&lt;/a&gt;概念引入&lt;/h1&gt;&lt;h2 id=&quot;Eureka&quot;&gt;&lt;a href=&quot;#Eureka&quot; class=&quot;headerlink&quot; title=&quot;Eureka&quot;&gt;&lt;/a&gt;Eureka&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Eureka:&lt;/strong&gt; 服务注册中心。通过Eureka可以监控各个服务的运行状态。它具有如下几个角色：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Eureka Server： 提供服务注册与发现&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Service Provider: 服务提供方。将自身注册到Eureka，供消费者使用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Service Consumer:  服务消费方。从Eureka中获取服务器提供方列表，从而消费服务&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Spring Cloud" scheme="https://ericshen.xyz/categories/Spring-Cloud/"/>
    
    
      <category term="Spring Cloud" scheme="https://ericshen.xyz/tags/Spring-Cloud/"/>
    
      <category term="Java" scheme="https://ericshen.xyz/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>ZooKeeper Docker Cluster(ZK伪集群)</title>
    <link href="https://ericshen.xyz/2019/06/15/ZooKeeper-Docker-Cluster-ZK%E4%BC%AA%E9%9B%86%E7%BE%A4/"/>
    <id>https://ericshen.xyz/2019/06/15/ZooKeeper-Docker-Cluster-ZK%E4%BC%AA%E9%9B%86%E7%BE%A4/</id>
    <published>2019-06-15T12:34:13.000Z</published>
    <updated>2020-03-31T09:37:54.917Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h2><h3 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1. 概述"></a>1.1. 概述</h3><p>原来搭建 zookeeper 集群时，都是要一个个去搭建、配置、启动，但总体部署起来还有有点麻烦的，尤其是当你只需要一个测试环境时，就更没有必要大费周章的去搭建 zookeeper 集群了，使用了 Docker 之后，大大简化的集群搭建的步骤，而且还可以重复利用配置文件。</p><p>尤其是在测试时，大大的方便了我们搭建集群的时间。</p><a id="more"></a><p>Docker 的安装详见《<a href="https://ericshen.coding.me/2019/10/15/Linux%E5%AE%89%E8%A3%85Dokcer-CE/" target="_blank" rel="noopener">Linux安装Dokcer CE</a>》</p><h3 id="1-2-环境"><a href="#1-2-环境" class="headerlink" title="1.2 . 环境"></a>1.2 . 环境</h3><ul><li><p>Ubuntu 18.04.3 LTS</p></li><li><p>Docker 19.03.2, build 6a30dfc</p><p>[TOC]</p></li></ul><h2 id="2-zk镜像的基本操作"><a href="#2-zk镜像的基本操作" class="headerlink" title="2. zk镜像的基本操作"></a>2. zk镜像的基本操作</h2><h3 id="2-1-这里我们使用-zookeeper3-5-的版本"><a href="#2-1-这里我们使用-zookeeper3-5-的版本" class="headerlink" title="2.1 这里我们使用 zookeeper3.5 的版本"></a>2.1 这里我们使用 zookeeper3.5 的版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull zookeeper:3.5</span><br></pre></td></tr></table></figure><h3 id="2-2-出现如下结果时，说明镜像已经下载完成"><a href="#2-2-出现如下结果时，说明镜像已经下载完成" class="headerlink" title="2.2 出现如下结果时，说明镜像已经下载完成"></a>2.2 出现如下结果时，说明镜像已经下载完成</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.5</span>: Pulling from library/zookeeper</span><br><span class="line"><span class="string">ff3a5c916c92:</span> Pull complete </span><br><span class="line"><span class="number">5</span><span class="string">de5f69f42d7:</span> Pull complete </span><br><span class="line"><span class="string">fa7536dd895a:</span> Pull complete </span><br><span class="line"><span class="number">644150</span><span class="string">d38454:</span> Pull complete </span><br><span class="line"><span class="number">9</span><span class="string">ff28e2fa4ed:</span> Pull complete </span><br><span class="line"><span class="number">51e97</span><span class="string">a19e3a8:</span> Pull complete </span><br><span class="line"><span class="number">13</span><span class="string">b26111158e:</span> Pull complete </span><br><span class="line"><span class="string">Digest:</span> <span class="string">sha256:</span><span class="number">18</span>b81f09a371e69be882dd759c93ad9d450d7c6a628458b2b38123c078ba01ae</span><br><span class="line"><span class="string">Status:</span> Downloaded newer image <span class="keyword">for</span> <span class="string">zookeeper:</span><span class="number">3.5</span></span><br></pre></td></tr></table></figure><h4 id="2-2-1-运行如下命令启动一个-zookeeper-实例-默认端口-2181"><a href="#2-2-1-运行如下命令启动一个-zookeeper-实例-默认端口-2181" class="headerlink" title="2.2.1 运行如下命令启动一个 zookeeper 实例, 默认端口 2181"></a>2.2.1 运行如下命令启动一个 zookeeper 实例, 默认端口 2181</h4><h4 id="2-2-2-查看运行日志"><a href="#2-2-2-查看运行日志" class="headerlink" title="2.2.2 查看运行日志"></a>2.2.2 查看运行日志</h4><h4 id="2-2-3-输出如下-说明启动成功"><a href="#2-2-3-输出如下-说明启动成功" class="headerlink" title="2.2.3 输出如下, 说明启动成功"></a>2.2.3 输出如下, 说明启动成功</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ZooKeeper JMX enabled by <span class="keyword">default</span></span><br><span class="line">Using config: /conf/zoo.cfg</span><br><span class="line"><span class="number">2018</span><span class="number">-04</span><span class="number">-06</span> <span class="number">14</span>:<span class="number">26</span>:<span class="number">29</span>,<span class="number">648</span> [myid:] - INFO  [main:<span class="symbol">QuorumPeerConfig@</span><span class="number">117</span>] - Reading configuration <span class="keyword">from</span>: /conf/zoo.cfg</span><br><span class="line"><span class="number">2018</span><span class="number">-04</span><span class="number">-06</span> <span class="number">14</span>:<span class="number">26</span>:<span class="number">29</span>,<span class="number">651</span> [myid:] - INFO  [main:<span class="symbol">QuorumPeerConfig@</span><span class="number">317</span>] - clientPort <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">set</span></span><br><span class="line"><span class="number">2018</span><span class="number">-04</span><span class="number">-06</span> <span class="number">14</span>:<span class="number">26</span>:<span class="number">29</span>,<span class="number">651</span> [myid:] - INFO  [main:<span class="symbol">QuorumPeerConfig@</span><span class="number">331</span>] - secureClientPort <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">set</span></span><br><span class="line"><span class="number">2018</span><span class="number">-04</span><span class="number">-06</span> <span class="number">14</span>:<span class="number">26</span>:<span class="number">29</span>,<span class="number">655</span> [myid:] - WARN  [main:<span class="symbol">QuorumPeerConfig@</span><span class="number">590</span>] - No server failure will be tolerated. You need at least <span class="number">3</span> servers.</span><br><span class="line">    [省略若干... ]</span><br><span class="line"><span class="number">2018</span><span class="number">-04</span><span class="number">-06</span> <span class="number">14</span>:<span class="number">26</span>:<span class="number">30</span>,<span class="number">164</span> [myid:<span class="number">1</span>] - INFO  [QuorumPeer[myid=<span class="number">1</span>](plain=/<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">2181</span>)(secure=disabled):<span class="symbol">ContainerManager@</span><span class="number">64</span>] - Using checkIntervalMs=<span class="number">60000</span> maxPerMinute=<span class="number">10000</span></span><br></pre></td></tr></table></figure><h3 id="2-3-使用-ZK-命令行客户端连接-ZK"><a href="#2-3-使用-ZK-命令行客户端连接-ZK" class="headerlink" title="2.3 使用 ZK 命令行客户端连接 ZK"></a>2.3 使用 ZK 命令行客户端连接 ZK</h3><p>因为刚才我们启动的那个 ZK 容器并没有绑定宿主机的端口, 因此我们不能直接访问它. 但是我们可以通过 Docker 的 link 机制来对这个 ZK 容器进行访问. 执行如下命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --rm --link my_zk:my_zk2 zookeeper:3.5 zkCli.sh -server my_zk2</span><br></pre></td></tr></table></figure><blockquote><p>这个命令的含义是:</p></blockquote><ul><li>启动一个 <code>zookeeper</code> 镜像, 并运行这个镜像内的 <code>zkCli.sh</code> 命令, 命令参数是 <code>&quot;-server my_zk2&quot;</code></li><li>将我们先前启动的名为 <code>my_zk</code> 的容器连接 (link) 到我们新建的这个容器上, 并将其主机名命名为 <code>my_zk2</code></li></ul><h2 id="3-zk-集群"><a href="#3-zk-集群" class="headerlink" title="3. zk 集群"></a>3. zk 集群</h2><p>因为一个一个地启动 zk 太麻烦了, 所以为了方便起见, 我直接使用 docker-compose 来启动 zk 集群.</p><h3 id="3-1-安装"><a href="#3-1-安装" class="headerlink" title="3.1 安装"></a>3.1 安装</h3><ul><li>首先创建一个名为 docker-compose.yml 的文件, 其内容如下:</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.1'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  zoo1:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">zookeeper</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">zoo1</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">zoo1</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">2181</span><span class="string">:2181</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="attr">      ZOO_MY_ID:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">      ZOO_SERVERS:</span> <span class="string">server.1=0.0.0.0:2888:3888;2181</span> <span class="string">server.2=zoo2:2888:3888;2181</span> <span class="string">server.3=zoo3:2888:3888;2181</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  zoo2:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">zookeeper</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">zoo2</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">zoo2</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">2182</span><span class="string">:2181</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="attr">      ZOO_MY_ID:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">      ZOO_SERVERS:</span> <span class="string">server.1=zoo1:2888:3888;2181</span> <span class="string">server.2=0.0.0.0:2888:3888;2181</span> <span class="string">server.3=zoo3:2888:3888;2181</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  zoo3:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">zookeeper</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">zoo3</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">zoo3</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">2183</span><span class="string">:2181</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="attr">      ZOO_MY_ID:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">      ZOO_SERVERS:</span> <span class="string">server.1=zoo1:2888:3888;2181</span> <span class="string">server.2=zoo2:2888:3888;2181</span> <span class="string">server.3=0.0.0.0:2888:3888;2181</span></span><br></pre></td></tr></table></figure><p>这个配置文件会告诉 Docker 分别运行三个 zookeeper 镜像, 并分别将本地的 2181, 2182, 2183 端口绑定到对应的容器的 2181 端口上. <code>ZOO_MY_ID</code> 和 <code>ZOO_SERVERS</code> 是搭建 ZK 集群需要设置的两个环境变量, 其中 <code>ZOO_MY_ID</code> 表示 zk 服务的 id, 它是 1-255 之间的整数, 必须在集群中唯一. <code>ZOO_SERVERS</code> 是 zk 集群的主机列表.</p><ul><li>接着我们在 docker-compose.yml 当前目录下运行如下命令, 就可以启动 zk 集群了:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p><strong>注：如果出现以下错误，参考《<a href="https://ericshen.coding.me/2019/10/15/Linux%E5%AE%89%E8%A3%85Dokcer-CE/" target="_blank" rel="noopener">Linux安装Dokcer CE</a>》的 4.4 开启 Docker Remote API。</strong></p><blockquote><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ERROR: </span>Couldn't connect to Docker daemon at http+docker://localhost - is &gt; it running?</span><br><span class="line"></span><br><span class="line">If it's at a non-standard location, specify the URL with the DOCKER_HOST &gt; environment variable.</span><br></pre></td></tr></table></figure></blockquote><ul><li>执行上述命令成功后, 运行 <code>docker-compose ps</code> 命令可以查看启动的 zk 容器:</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Name              Command               State                          Ports</span><br><span class="line">----------------------------------------------------------------------------------------------------</span><br><span class="line">zoo1   /docker-entrypoint.sh zkSe ...   Up      <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">2181</span>-&gt;<span class="number">2181</span>/tcp, <span class="number">2888</span>/tcp, <span class="number">3888</span>/tcp, <span class="number">8080</span>/tcp</span><br><span class="line">zoo2   /docker-entrypoint.sh zkSe ...   Up      <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">2182</span>-&gt;<span class="number">2181</span>/tcp, <span class="number">2888</span>/tcp, <span class="number">3888</span>/tcp, <span class="number">8080</span>/tcp</span><br><span class="line">zoo3   /docker-entrypoint.sh zkSe ...   Up      <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">2183</span>-&gt;<span class="number">2181</span>/tcp, <span class="number">2888</span>/tcp, <span class="number">3888</span>/tcp, <span class="number">8080</span>/tcp</span><br></pre></td></tr></table></figure><h3 id="3-2-使用-Docker-命令行客户端连接-zk-集群"><a href="#3-2-使用-Docker-命令行客户端连接-zk-集群" class="headerlink" title="3.2 使用 Docker 命令行客户端连接 zk 集群"></a>3.2 使用 Docker 命令行客户端连接 zk 集群</h3><p>通过 <code>docker-compose ps</code> 命令, 我们知道启动的 zk 集群的三个主机名分别是 zoo1, zoo2, zoo3, 因此我们分别 <code>link</code> 它们即可:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --rm \</span><br><span class="line">--link zoo1:zk1 \</span><br><span class="line">--link zoo2:zk2 \</span><br><span class="line">--link zoo3:zk3 \</span><br><span class="line">--net pseudo_cluster_default \</span><br><span class="line">zookeeper zkCli.sh -server zk1:2181,zk2:2181,zk3:2181</span><br></pre></td></tr></table></figure><blockquote><p><code>net</code>为容器所使用的的<code>network</code>，若未通过<code>docker-compose.yml</code>指定，默认为<code>$pwd_dafult,</code></p><p>通过<code>docker inspect zoo1 | grep Networks -A 20</code>可以查看所使用的network名称</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"Networks"</span>: &#123;</span><br><span class="line">             <span class="string">"pseudo_cluster_default"</span>: &#123; <span class="meta"># network名称</span></span><br><span class="line">                 <span class="string">"IPAMConfig"</span>: <span class="literal">null</span>,</span><br><span class="line">                 <span class="string">"Links"</span>: <span class="literal">null</span>,</span><br><span class="line">                 <span class="string">"Aliases"</span>: [</span><br><span class="line">                     <span class="string">"ad0acab9b92f"</span>,</span><br><span class="line">                     <span class="string">"zoo1"</span></span><br><span class="line">                 ],</span><br><span class="line">                 <span class="string">"NetworkID"</span>: <span class="string">"c40c9639a37ebc901369a762ec69dedd137bcdf22a1277811e592790fdaf9f08"</span>,</span><br><span class="line">                 <span class="string">"EndpointID"</span>: <span class="string">"708837900be7d8fda10d7469791bc58f335e13804718c46267b37a908e3f9140"</span>,</span><br><span class="line">                 <span class="string">"Gateway"</span>: <span class="string">"172.28.0.1"</span>,</span><br><span class="line">                 <span class="string">"IPAddress"</span>: <span class="string">"172.28.0.3"</span>,</span><br><span class="line">                 <span class="string">"IPPrefixLen"</span>: <span class="number">16</span>,</span><br><span class="line">                 <span class="string">"IPv6Gateway"</span>: <span class="string">""</span>,</span><br><span class="line">                 <span class="string">"GlobalIPv6Address"</span>: <span class="string">""</span>,</span><br><span class="line">                 <span class="string">"GlobalIPv6PrefixLen"</span>: <span class="number">0</span>,</span><br><span class="line">                 <span class="string">"MacAddress"</span>: <span class="string">"02:42:ac:1c:00:03"</span>,</span><br><span class="line">                 <span class="string">"DriverOpts"</span>: <span class="literal">null</span></span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><p><strong>输出如下：</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Connecting <span class="keyword">to</span> zk1:2181,zk2:2181,zk3:2181</span><br><span class="line">2019-10-15 12:07:11,485 [myid:] - <span class="builtin-name">INFO</span>  [main<span class="keyword">:Environment</span>@109] -<span class="built_in"> Client </span>environment:zookeeper.<span class="attribute">version</span>=3.5.5-390fe37ea45dee01bf87dc1c042b5e3dcce88653, built on 05/03/2019 12:07 GMT</span><br><span class="line">2019-10-15 12:07:11,487 [myid:] - <span class="builtin-name">INFO</span>  [main<span class="keyword">:Environment</span>@109] -<span class="built_in"> Client </span>environment:host.<span class="attribute">name</span>=b017d561bf98</span><br><span class="line">2019-10-15 12:07:11,488 [myid:] - <span class="builtin-name">INFO</span>  [main<span class="keyword">:Environment</span>@109] -<span class="built_in"> Client </span>environment:java.<span class="attribute">version</span>=1.8.0_222</span><br><span class="line">2019-10-15 12:07:11,489 [myid:] - <span class="builtin-name">INFO</span>  [main<span class="keyword">:Environment</span>@109] -<span class="built_in"> Client </span>environment:java.<span class="attribute">vendor</span>=Oracle Corporation</span><br><span class="line">2019-10-15 12:07:11,489 [myid:] - <span class="builtin-name">INFO</span>  [main<span class="keyword">:Environment</span>@109] -<span class="built_in"> Client </span>environment:java.<span class="attribute">home</span>=/usr/local/openjdk-8</span><br><span class="line">2019-10-15 12:07:11,489 [myid:] - <span class="builtin-name">INFO</span>  [main<span class="keyword">:Environment</span>@109] -<span class="built_in"> Client </span>environment:java.class.<span class="attribute">path</span>=/apache-zookeeper-3.5.5-bin/bin/../zookeeper-server/target/classes:/apache-zookeeper-3.5.5-bin/bin/../build/classes:/apache-zookeeper-3.5.5-bin/bin/../zookeeper-server/target/lib/*.jar:/apache-zookeeper-3.5.5-bin/bin/../build/lib/*.jar:/apache-zookeeper-3.5.5-bin/bin/../lib/zookeeper-jute-3.5.5.jar:/apache-zookeeper-3.5.5-bin/bin/../lib/zookeeper-3.5.5.jar:/apache-zookeeper-3.5.5-bin/bin/../lib/slf4j-log4j12-1.7.25.jar:/apache-zookeeper-3.5.5-bin/bin/../lib/slf4j-api-1.7.25.jar:/apache-zookeeper-3.5.5-bin/bin/../lib/netty-all-4.1.29.Final.jar:/apache-zookeeper-3.5.5-bin/bin/../lib/log4j-1.2.17.jar:/apache-zookeeper-3.5.5-bin/bin/../lib/json-simple-1.1.1.jar:/apache-zookeeper-3.5.5-bin/bin/../lib/jline-2.11.jar:/apache-zookeeper-3.5.5-bin/bin/../lib/jetty-util-9.4.17.v20190418.jar:/apache-zookeeper-3.5.5-bin/bin/../lib/jetty-servlet-9.4.17.v20190418.jar:/apache-zookeeper-3.5.5-bin/bin/../lib/jetty-server-9.4.17.v20190418.jar:/apache-zookeeper-3.5.5-bin/bin/../lib/jetty-security-9.4.17.v20190418.jar:/apache-zookeeper-3.5.5-bin/bin/../lib/jetty-io-9.4.17.v20190418.jar:/apache-zookeeper-3.5.5-bin/bin/../lib/jetty-http-9.4.17.v20190418.jar:/apache-zookeeper-3.5.5-bin/bin/../lib/javax.servlet-api-3.1.0.jar:/apache-zookeeper-3.5.5-bin/bin/../lib/jackson-databind-2.9.8.jar:/apache-zookeeper-3.5.5-bin/bin/../lib/jackson-core-2.9.8.jar:/apache-zookeeper-3.5.5-bin/bin/../lib/jackson-annotations-2.9.0.jar:/apache-zookeeper-3.5.5-bin/bin/../lib/commons-cli-1.2.jar:/apache-zookeeper-3.5.5-bin/bin/../lib/audience-annotations-0.5.0.jar:/apache-zookeeper-3.5.5-bin/bin/../zookeeper-*.jar:/apache-zookeeper-3.5.5-bin/bin/../zookeeper-server/src/main/resources/lib/*.jar:/conf:</span><br><span class="line">2019-10-15 12:07:11,490 [myid:] - <span class="builtin-name">INFO</span>  [main<span class="keyword">:Environment</span>@109] -<span class="built_in"> Client </span>environment:java.library.<span class="attribute">path</span>=/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib</span><br><span class="line">2019-10-15 12:07:11,490 [myid:] - <span class="builtin-name">INFO</span>  [main<span class="keyword">:Environment</span>@109] -<span class="built_in"> Client </span>environment:java.io.<span class="attribute">tmpdir</span>=/tmp</span><br><span class="line">2019-10-15 12:07:11,490 [myid:] - <span class="builtin-name">INFO</span>  [main<span class="keyword">:Environment</span>@109] -<span class="built_in"> Client </span>environment:java.<span class="attribute">compiler</span>=&lt;NA&gt;</span><br><span class="line">2019-10-15 12:07:11,490 [myid:] - <span class="builtin-name">INFO</span>  [main<span class="keyword">:Environment</span>@109] -<span class="built_in"> Client </span>environment:os.<span class="attribute">name</span>=Linux</span><br><span class="line">2019-10-15 12:07:11,490 [myid:] - <span class="builtin-name">INFO</span>  [main<span class="keyword">:Environment</span>@109] -<span class="built_in"> Client </span>environment:os.<span class="attribute">arch</span>=amd64</span><br><span class="line">2019-10-15 12:07:11,490 [myid:] - <span class="builtin-name">INFO</span>  [main<span class="keyword">:Environment</span>@109] -<span class="built_in"> Client </span>environment:os.<span class="attribute">version</span>=4.15.0-65-generic</span><br><span class="line">2019-10-15 12:07:11,490 [myid:] - <span class="builtin-name">INFO</span>  [main<span class="keyword">:Environment</span>@109] -<span class="built_in"> Client </span>environment:user.<span class="attribute">name</span>=root</span><br><span class="line">2019-10-15 12:07:11,490 [myid:] - <span class="builtin-name">INFO</span>  [main<span class="keyword">:Environment</span>@109] -<span class="built_in"> Client </span>environment:user.<span class="attribute">home</span>=/root</span><br><span class="line">2019-10-15 12:07:11,491 [myid:] - <span class="builtin-name">INFO</span>  [main<span class="keyword">:Environment</span>@109] -<span class="built_in"> Client </span>environment:user.<span class="attribute">dir</span>=/apache-zookeeper-3.5.5-bin</span><br><span class="line">2019-10-15 12:07:11,491 [myid:] - <span class="builtin-name">INFO</span>  [main<span class="keyword">:Environment</span>@109] -<span class="built_in"> Client </span>environment:os.memory.<span class="attribute">free</span>=55MB</span><br><span class="line">2019-10-15 12:07:11,492 [myid:] - <span class="builtin-name">INFO</span>  [main<span class="keyword">:Environment</span>@109] -<span class="built_in"> Client </span>environment:os.memory.<span class="attribute">max</span>=228MB</span><br><span class="line">2019-10-15 12:07:11,493 [myid:] - <span class="builtin-name">INFO</span>  [main<span class="keyword">:Environment</span>@109] -<span class="built_in"> Client </span>environment:os.memory.<span class="attribute">total</span>=59MB</span><br><span class="line">2019-10-15 12:07:11,496 [myid:] - <span class="builtin-name">INFO</span>  [main:ZooKeeper@868] - Initiating<span class="built_in"> client </span>connection, <span class="attribute">connectString</span>=zk1:2181,zk2:2181,zk3:2181 <span class="attribute">sessionTimeout</span>=30000 <span class="attribute">watcher</span>=org.apache.zookeeper.ZooKeeperMain$MyWatcher@3b95a09c</span><br><span class="line">2019-10-15 12:07:11,501 [myid:] - <span class="builtin-name">INFO</span>  [main:X509Util@79] - Setting -D jdk.tls.<span class="attribute">rejectClientInitiatedRenegotiation</span>=<span class="literal">true</span> <span class="keyword">to</span> <span class="builtin-name">disable</span> client-initiated TLS renegotiation</span><br><span class="line">2019-10-15 12:07:11,508 [myid:] - <span class="builtin-name">INFO</span>  [main:ClientCnxnSocket@237] - jute.maxbuffer value is 4194304 Bytes</span><br><span class="line">2019-10-15 12:07:11,515 [myid:] - <span class="builtin-name">INFO</span>  [main:ClientCnxn@1653] - zookeeper.request.timeout value is 0. feature enabled=</span><br><span class="line">Welcome <span class="keyword">to</span> ZooKeeper!</span><br><span class="line">2019-10-15 12:07:11,525 [myid:zk1:2181] - <span class="builtin-name">INFO</span>  [main-SendThread(zk1:2181):ClientCnxn<span class="variable">$SendThread</span>@1112] - Opening socket<span class="built_in"> connection </span><span class="keyword">to</span><span class="built_in"> server </span>zk1/172.28.0.3:2181. Will <span class="keyword">not</span> attempt <span class="keyword">to</span> authenticate using SASL (unknown error)</span><br><span class="line">JLine support is enabled</span><br><span class="line">2019-10-15 12:07:11,587 [myid:zk1:2181] - <span class="builtin-name">INFO</span>  [main-SendThread(zk1:2181):ClientCnxn<span class="variable">$SendThread</span>@959] - Socket<span class="built_in"> connection </span>established, initiating session, client: /172.28.0.5:35980, server: zk1/172.28.0.3:2181</span><br><span class="line">2019-10-15 12:07:11,607 [myid:zk1:2181] - <span class="builtin-name">INFO</span>  [main-SendThread(zk1:2181):ClientCnxn<span class="variable">$SendThread</span>@1394] - Session establishment complete on<span class="built_in"> server </span>zk1/172.28.0.3:2181, sessionid = 0x100010585200003, negotiated timeout = 30000</span><br><span class="line"></span><br><span class="line">WATCHER::</span><br><span class="line"></span><br><span class="line">WatchedEvent state:SyncConnected type:None path:null</span><br><span class="line">[zk: zk1:2181,zk2:2181,zk3:2181(CONNECTED) 0]  # 连接成功，进入命令行交互模式</span><br></pre></td></tr></table></figure><h3 id="3-3-通过本地主机连接-ZK-集群"><a href="#3-3-通过本地主机连接-ZK-集群" class="headerlink" title="3.3 通过本地主机连接 ZK 集群"></a>3.3 通过本地主机连接 ZK 集群</h3><p>因为我们分别将 zoo1, zoo2, zoo3 的 2181 端口映射到了本地主机的 2181, 2182, 2183 端口上, 因此我们使用如下命令即可连接 zk 集群了:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">zkCli</span><span class="selector-class">.sh</span> <span class="selector-tag">-server</span> 192<span class="selector-class">.192</span><span class="selector-class">.1</span><span class="selector-class">.12</span><span class="selector-pseudo">:2181</span>,192<span class="selector-class">.192</span><span class="selector-class">.1</span><span class="selector-class">.12</span><span class="selector-pseudo">:2182</span>,192<span class="selector-class">.192</span><span class="selector-class">.1</span><span class="selector-class">.12</span><span class="selector-pseudo">:2183</span></span><br></pre></td></tr></table></figure><blockquote><p>注: <code>zkCli.sh</code> 工具需要到 <a href="http://zookeeper.apache.org/" target="_blank" rel="noopener">Zookeeper 官网</a>下载安装包里面会有</p></blockquote><blockquote><p>Mac可以使用<code>homebrew</code>进行安装<code>brew install zookeeper</code></p></blockquote><ul><li>执行<br><code>zkCli -server 192.192.1.12:2181,192.192.1.12:2182,192.192.1.12:2183</code></li><li>结果</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Connecting to <span class="number">192.192</span><span class="number">.1</span><span class="number">.12</span>:<span class="number">2181</span>,<span class="number">192.192</span><span class="number">.1</span><span class="number">.12</span>:<span class="number">2182</span>,<span class="number">192.192</span><span class="number">.1</span><span class="number">.12</span>:<span class="number">2183</span></span><br><span class="line">Welcome to ZooKeeper!</span><br><span class="line">JLine support <span class="keyword">is</span> enabled</span><br><span class="line">[zk: <span class="number">192.192</span><span class="number">.1</span><span class="number">.12</span>:<span class="number">2181</span>,<span class="number">192.192</span><span class="number">.1</span><span class="number">.12</span>:<span class="number">2182</span>,<span class="number">192.192</span><span class="number">.1</span><span class="number">.12</span>:<span class="number">2183</span>(CONNECTING) <span class="number">0</span>] # 连接成功，进入命令行交互模式</span><br></pre></td></tr></table></figure><h3 id="3-4-以docker-exec交互方式进入容器查看"><a href="#3-4-以docker-exec交互方式进入容器查看" class="headerlink" title="3.4 以docker exec交互方式进入容器查看"></a>3.4 以docker exec交互方式进入容器查看</h3><ul><li><p>宿主机内执行<code>docker exec -it zoo1  /bin/bash</code>进入容器，修改<code>container_name</code>为<code>zoo2</code>或<code>zoo3</code>即可查看其他zk节点</p></li><li><p>进入容器后执行<code>./bin/zkServer.sh status</code></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it zoo1  /bin/bash </span><br><span class="line">root@zoo1:/apache-zookeeper-3.5.5-bin<span class="comment"># ./bin/zkServer.sh status</span></span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /conf/zoo.cfg</span><br><span class="line">Client port found: 2181. Client address: localhost.</span><br><span class="line">Mode: follower</span><br><span class="line">root@zoo1:/apache-zookeeper-3.5.5-bin<span class="comment">#</span></span><br></pre></td></tr></table></figure><h3 id="3-5-停止和关闭集群"><a href="#3-5-停止和关闭集群" class="headerlink" title="3.5 停止和关闭集群"></a>3.5 停止和关闭集群</h3><p><code>cd</code>到<code>docker-compose.yml</code><strong>文件路径下</strong></p><p>停止集群</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose <span class="built_in">stop</span></span><br></pre></td></tr></table></figure><p>删除集群</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker-compose  rm</span></span><br></pre></td></tr></table></figure><p>停止并删除</p><p><code>docker-compose down</code></p><h2 id="4-zk的其它环境变量"><a href="#4-zk的其它环境变量" class="headerlink" title="4. zk的其它环境变量"></a>4. zk的其它环境变量</h2><ul><li>ZOO_TICK_TIME<code>默认 2000. ZooKeeper 的</code>tickTime`</li><li><code>ZOO_INIT_LIMIT</code> 默认 5. ZooKeeper 的 <code>initLimit</code></li><li><code>ZOO_SYNC_LIMIT</code> 默认 2. ZooKeeper 的 <code>syncLimit</code></li><li><code>ZOO_MAX_CLIENT_CNXNS</code> 默认 60. ZooKeeper 的 <code>maxClientCnxns</code></li></ul><p>[TOC]</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-背景&quot;&gt;&lt;a href=&quot;#1-背景&quot; class=&quot;headerlink&quot; title=&quot;1. 背景&quot;&gt;&lt;/a&gt;1. 背景&lt;/h2&gt;&lt;h3 id=&quot;1-1-概述&quot;&gt;&lt;a href=&quot;#1-1-概述&quot; class=&quot;headerlink&quot; title=&quot;1.1. 概述&quot;&gt;&lt;/a&gt;1.1. 概述&lt;/h3&gt;&lt;p&gt;原来搭建 zookeeper 集群时，都是要一个个去搭建、配置、启动，但总体部署起来还有有点麻烦的，尤其是当你只需要一个测试环境时，就更没有必要大费周章的去搭建 zookeeper 集群了，使用了 Docker 之后，大大简化的集群搭建的步骤，而且还可以重复利用配置文件。&lt;/p&gt;
&lt;p&gt;尤其是在测试时，大大的方便了我们搭建集群的时间。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="docker" scheme="https://ericshen.xyz/tags/docker/"/>
    
      <category term="zk" scheme="https://ericshen.xyz/tags/zk/"/>
    
  </entry>
  
  <entry>
    <title>Nexus源替换及Gitlab迁移</title>
    <link href="https://ericshen.xyz/2019/05/22/Nexus%E6%BA%90%E6%9B%BF%E6%8D%A2%E5%8F%8AGitlab%E8%BF%81%E7%A7%BB/"/>
    <id>https://ericshen.xyz/2019/05/22/Nexus%E6%BA%90%E6%9B%BF%E6%8D%A2%E5%8F%8AGitlab%E8%BF%81%E7%A7%BB/</id>
    <published>2019-05-22T08:10:17.000Z</published>
    <updated>2020-04-10T07:39:41.126Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Maven镜像替换"><a href="#Maven镜像替换" class="headerlink" title="Maven镜像替换"></a>Maven镜像替换</h1><h2 id="一、替换settings文件"><a href="#一、替换settings文件" class="headerlink" title="一、替换settings文件"></a>一、替换settings文件</h2><a id="more"></a><blockquote><p>注意：<code>localRepository</code>需替换为本机仓库地址</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">Licensed to the Apache Software Foundation (ASF) under one</span></span><br><span class="line"><span class="comment">or more contributor license agreements.  See the NOTICE file</span></span><br><span class="line"><span class="comment">distributed with this work for additional information</span></span><br><span class="line"><span class="comment">regarding copyright ownership.  The ASF licenses this file</span></span><br><span class="line"><span class="comment">to you under the Apache License, Version 2.0 (the</span></span><br><span class="line"><span class="comment">"License"); you may not use this file except in compliance</span></span><br><span class="line"><span class="comment">with the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Unless required by applicable law or agreed to in writing,</span></span><br><span class="line"><span class="comment">software distributed under the License is distributed on an</span></span><br><span class="line"><span class="comment">"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</span></span><br><span class="line"><span class="comment">KIND, either express or implied.  See the License for the</span></span><br><span class="line"><span class="comment">specific language governing permissions and limitations</span></span><br><span class="line"><span class="comment">under the License.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> | This is the configuration file for Maven. It can be specified at two levels:</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |  1. User Level. This settings.xml file provides configuration for a single user,</span></span><br><span class="line"><span class="comment"> |                 and is normally provided in $&#123;user.home&#125;/.m2/settings.xml.</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |                 <span class="doctag">NOTE:</span> This location can be overridden with the CLI option:</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |                 -s /path/to/user/settings.xml</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |  2. Global Level. This settings.xml file provides configuration for all Maven</span></span><br><span class="line"><span class="comment"> |                 users on a machine (assuming they're all using the same Maven</span></span><br><span class="line"><span class="comment"> |                 installation). It's normally provided in</span></span><br><span class="line"><span class="comment"> |                 $&#123;maven.conf&#125;/settings.xml.</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |                 <span class="doctag">NOTE:</span> This location can be overridden with the CLI option:</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |                 -gs /path/to/global/settings.xml</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> | The sections in this sample file are intended to give you a running start at</span></span><br><span class="line"><span class="comment"> | getting the most out of your Maven installation. Where appropriate, the default</span></span><br><span class="line"><span class="comment"> | values (values used when the setting is not specified) are provided.</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- localRepository</span></span><br><span class="line"><span class="comment">     | The path to the local repository maven will use to store artifacts.</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">     | Default: ~/.m2/repository</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>~/.m2/repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">pluginGroups</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginGroup</span>&gt;</span>org.sonatype.plugins<span class="tag">&lt;/<span class="name">pluginGroup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">pluginGroups</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">password</span>&gt;</span>administrator<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">password</span>&gt;</span>administrator<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">password</span>&gt;</span>administrator<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://172.16.140.153:9003/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus Releases<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://172.16.140.153:9003/repository/maven-releases/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">releases</span>&gt;</span>       </span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus Snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://172.16.140.153:9003/repository/maven-snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">releases</span>&gt;</span>          </span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://172.16.140.153:9003/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://172.16.140.153:9003/repository/maven-releases/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">releases</span>&gt;</span>       </span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://172.16.140.153:9003/repository/maven-snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">releases</span>&gt;</span>         </span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="NPM-源替换"><a href="#NPM-源替换" class="headerlink" title="NPM 源替换"></a>NPM 源替换</h1><h2 id="一、使用153私服镜像"><a href="#一、使用153私服镜像" class="headerlink" title="一、使用153私服镜像"></a>一、使用153私服镜像</h2><h3 id="1-临时使用"><a href="#1-临时使用" class="headerlink" title="1.临时使用"></a>1.临时使用</h3><p><code>npm --registry http://172.16.140.153:9003/repository/npm-nexus install express</code></p><h3 id="2-长久使用"><a href="#2-长久使用" class="headerlink" title="2.长久使用"></a>2.长久使用</h3><p><code>npm config set registry http://172.16.140.153:9003/repository/npm-nexus</code></p><h3 id="3-通过cnpm"><a href="#3-通过cnpm" class="headerlink" title="3.通过cnpm"></a>3.通过cnpm</h3><p><code>npm install -g cnpm --registry=http://172.16.140.153:9003/repository/npm-nexus</code></p><h2 id="二、恢复官方镜像"><a href="#二、恢复官方镜像" class="headerlink" title="二、恢复官方镜像"></a>二、恢复官方镜像</h2><p><code>npm config set registry https://registry.npmjs.org/</code></p><h2 id="三、查看npm源地址"><a href="#三、查看npm源地址" class="headerlink" title="三、查看npm源地址"></a>三、查看npm源地址</h2><p><code>npm config get registry</code></p><h1 id="Gitlab迁移"><a href="#Gitlab迁移" class="headerlink" title="Gitlab迁移"></a>Gitlab迁移</h1><ul><li>通过邮箱查看密码重置链接，登录后添加SSH key，头像&gt;&gt;Settings&gt;&gt;SSH Keys</li><li>修改本地已有项目的gitlab地址，cd到项目下，执行：<br>如：<code>git remote set-url origin ssh://git@172.16.140.153:10022/rs/remoteservice-new.git</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Maven镜像替换&quot;&gt;&lt;a href=&quot;#Maven镜像替换&quot; class=&quot;headerlink&quot; title=&quot;Maven镜像替换&quot;&gt;&lt;/a&gt;Maven镜像替换&lt;/h1&gt;&lt;h2 id=&quot;一、替换settings文件&quot;&gt;&lt;a href=&quot;#一、替换settings文件&quot; class=&quot;headerlink&quot; title=&quot;一、替换settings文件&quot;&gt;&lt;/a&gt;一、替换settings文件&lt;/h2&gt;
    
    </summary>
    
    
      <category term="PaaS" scheme="https://ericshen.xyz/categories/PaaS/"/>
    
    
      <category term="docker" scheme="https://ericshen.xyz/tags/docker/"/>
    
      <category term="nexus" scheme="https://ericshen.xyz/tags/nexus/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu安装Dokcer CE</title>
    <link href="https://ericshen.xyz/2019/04/15/Ubuntu%E5%AE%89%E8%A3%85Dokcer-CE/"/>
    <id>https://ericshen.xyz/2019/04/15/Ubuntu%E5%AE%89%E8%A3%85Dokcer-CE/</id>
    <published>2019-04-15T08:44:55.000Z</published>
    <updated>2020-03-31T09:39:15.591Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h2><h3 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h3><p>Docker 使用 Google 公司推出的 Go 语言 进行开发实现，基于 Linux 内核的 cgroup，namespace，以及 AUFS 类的 Union FS 等技术，对进程进行封装隔离，属于 操作 系统层面的虚拟化技术。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容 器。最初实现是基于 LXC，从 0.7 版本以后开始去除 LXC，转而使用自行开发的 libcontainer，从 1.11 开始，则进一步演进为使用 runC 和 containerd。</p><p>Docker 在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极 大的简化了容器的创建和维护。使得 Docker 技术比虚拟机技术更为轻便、快捷。</p><a id="more"></a><h3 id="1-2-为什么要使用-Docker"><a href="#1-2-为什么要使用-Docker" class="headerlink" title="1.2 为什么要使用 Docker"></a>1.2 为什么要使用 Docker</h3><p>作为一种新兴的虚拟化方式，Docker 跟传统的虚拟化方式相比具有众多的优势。</p><h4 id="1-2-1-更高效的利用系统资源"><a href="#1-2-1-更高效的利用系统资源" class="headerlink" title="1.2.1 更高效的利用系统资源"></a>1.2.1 更高效的利用系统资源</h4><p>由于容器不需要进行硬件虚拟以及运行完整操作系统等额外开销，Docker 对系统资源的利用 率更高。无论是应用执行速度、内存损耗或者文件存储速度，都要比传统虚拟机技术更高 效。因此，相比虚拟机技术，一个相同配置的主机，往往可以运行更多数量的应用。</p><h4 id="1-2-2-更快速的启动时间"><a href="#1-2-2-更快速的启动时间" class="headerlink" title="1.2.2 更快速的启动时间"></a>1.2.2 更快速的启动时间</h4><p>传统的虚拟机技术启动应用服务往往需要数分钟，而 Docker 容器应用，由于直接运行于宿主 内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启动时间。大大的节约 了开发、测试、部署的时间。</p><h4 id="1-2-3-一致的运行环境"><a href="#1-2-3-一致的运行环境" class="headerlink" title="1.2.3 一致的运行环境"></a>1.2.3 一致的运行环境</h4><p>开发过程中一个常见的问题是环境一致性问题。由于开发环境、测试环境、生产环境不一 致，导致有些 bug 并未在开发过程中被发现。而 Docker 的镜像提供了除内核外完整的运行 时环境，确保了应用运行环境一致性，从而不会再出现 「这段代码在我机器上没问题啊」 这 类问题。</p><h4 id="1-2-4-持续交付和部署"><a href="#1-2-4-持续交付和部署" class="headerlink" title="1.2.4 持续交付和部署"></a>1.2.4 持续交付和部署</h4><p>对开发和运维（DevOps）人员来说，最希望的就是一次创建或配置，可以在任意地方正常运 行。</p><p>使用 Docker 可以通过定制应用镜像来实现持续集成、持续交付、部署。开发人员可以通过 Dockerfile 来进行镜像构建，并结合 持续集成(Continuous Integration) 系统进行集成测试， 而运维人员则可以直接在生产环境中快速部署该镜像，甚至结合 持续部署(Continuous Delivery/Deployment) 系统进行自动部署。</p><p>而且使用 Dockerfile 使镜像构建透明化，不仅仅开发团队可以理解应用运行环境，也方便 运维团队理解应用运行所需条件，帮助更好的生产环境中部署该镜像。</p><h4 id="1-2-5-更轻松的迁移"><a href="#1-2-5-更轻松的迁移" class="headerlink" title="1.2.5 更轻松的迁移"></a>1.2.5 更轻松的迁移</h4><p>由于 Docker 确保了执行环境的一致性，使得应用的迁移更加容易。Docker 可以在很多平台 上运行，无论是物理机、虚拟机、公有云、私有云，甚至是笔记本，其运行结果是一致的。 因此用户可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行 环境的变化导致应用无法正常运行的情况。</p><h4 id="1-2-6-更轻松的维护和扩展"><a href="#1-2-6-更轻松的维护和扩展" class="headerlink" title="1.2.6 更轻松的维护和扩展"></a>1.2.6 更轻松的维护和扩展</h4><p>Docker 使用的分层存储以及镜像的技术，使得应用重复部分的复用更为容易，也使得应用的 维护更新更加简单，基于基础镜像进一步扩展镜像也变得非常简单。此外，Docker 团队同各 个开源项目团队一起维护了一大批高质量的 官方镜像，既可以直接在生产环境使用，又可以 作为基础进一步定制，大大的降低了应用服务的镜像制作成本。</p><h4 id="1-2-7-对比传统虚拟机总结"><a href="#1-2-7-对比传统虚拟机总结" class="headerlink" title="1.2.7 对比传统虚拟机总结"></a>1.2.7 对比传统虚拟机总结</h4><table><thead><tr><th align="left">特性</th><th align="left">容器</th><th align="left">虚拟机</th></tr></thead><tbody><tr><td align="left">启动</td><td align="left">秒级</td><td align="left">分钟级</td></tr><tr><td align="left">硬盘使用</td><td align="left">一般为MB</td><td align="left">一般为GB</td></tr><tr><td align="left">性能</td><td align="left">接近原生</td><td align="left">弱于</td></tr><tr><td align="left">系统支持量</td><td align="left">单机支持上千个容器</td><td align="left">一般几十个</td></tr></tbody></table><h3 id="1-3-环境"><a href="#1-3-环境" class="headerlink" title="1.3 环境"></a>1.3 环境</h3><ul><li>Ubuntu 18.04.3 LTS</li></ul><ul><li>Docker 19.03.2, build 6a30dfc</li></ul><p><strong>老版本的 Docker 被称为 docker 或 docker-engine。如果安装了这些版本，先卸载它们，以及相关的依赖项。</strong></p><h2 id="2-卸载旧版本"><a href="#2-卸载旧版本" class="headerlink" title="2. 卸载旧版本"></a>2. 卸载旧版本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove docker docker-engine docker.io containerd runc</span><br></pre></td></tr></table></figure><h2 id="3-安装Docker"><a href="#3-安装Docker" class="headerlink" title="3. 安装Docker"></a>3. 安装Docker</h2><blockquote><p>APT安装和脚本安装二选一即可</p></blockquote><h3 id="3-1-使用-APT-安装"><a href="#3-1-使用-APT-安装" class="headerlink" title="3.1 使用 APT 安装"></a>3.1 使用 APT 安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新数据源</span></span><br><span class="line">sudo apt-get update</span><br><span class="line"><span class="comment"># 安装所需依赖</span></span><br><span class="line">sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line"><span class="comment"># 安装 GPG 证书</span></span><br><span class="line">sudo curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line"><span class="comment"># 新增数据源</span></span><br><span class="line">sudo add-apt-repository <span class="string">"deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu <span class="variable">$(lsb_release -cs)</span> stable"</span></span><br><span class="line"><span class="comment"># 更新并安装 Docker CE</span></span><br><span class="line">sudo apt-get update &amp;&amp; apt-get install -y docker-ce</span><br></pre></td></tr></table></figure><h3 id="3-2-使用脚本自动安装"><a href="#3-2-使用脚本自动安装" class="headerlink" title="3.2 使用脚本自动安装"></a>3.2 使用脚本自动安装</h3><p>在测试或开发环境中 Docker 官方为了简化安装流程，提供了一套便捷的安装脚本，Ubuntu 系统上可以使用这套脚本安装，另外可以通过 <code>--mirror</code> 选项使用国内源进行安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL get.docker.com -o get-docker.sh</span><br><span class="line">sudo sh get-docker.sh --mirror Aliyun</span><br><span class="line"><span class="comment"># sudo sh get-docker.sh --mirror AzureChinaCloud</span></span><br></pre></td></tr></table></figure><p>执行这个命令后，脚本就会自动的将一切准备工作做好，并且把 Docker CE 的稳定(stable)版本安装在系统中。</p><h3 id="3-3-查看Docker版本"><a href="#3-3-查看Docker版本" class="headerlink" title="3.3 查看Docker版本"></a>3.3 查看Docker版本</h3><p><code>sudo docker version</code><br><strong>输出如下</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           <span class="number">19.03</span><span class="number">.2</span></span><br><span class="line"> API version:       <span class="number">1.40</span></span><br><span class="line"> Go version:        go1<span class="number">.12</span><span class="number">.8</span></span><br><span class="line"> Git commit:        <span class="number">6</span>a30dfc</span><br><span class="line"> Built:             Thu Aug <span class="number">29</span> <span class="number">05</span>:<span class="number">29</span>:<span class="number">11</span> <span class="number">2019</span></span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Experimental:      <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          <span class="number">19.03</span><span class="number">.2</span></span><br><span class="line">  API version:      <span class="number">1.40</span> (minimum version <span class="number">1.12</span>)</span><br><span class="line">  Go version:       go1<span class="number">.12</span><span class="number">.8</span></span><br><span class="line">  Git commit:       <span class="number">6</span>a30dfc</span><br><span class="line">  Built:            Thu Aug <span class="number">29</span> <span class="number">05</span>:<span class="number">27</span>:<span class="number">45</span> <span class="number">2019</span></span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     <span class="literal">false</span></span><br><span class="line"> containerd:</span><br><span class="line">  Version:          <span class="number">1.2</span><span class="number">.6</span></span><br><span class="line">  GitCommit:        <span class="number">894</span>b81a4b802e4eb2a91d1ce216b8817763c29fb</span><br><span class="line"> runc:</span><br><span class="line">  Version:          <span class="number">1.0</span><span class="number">.0</span>-rc8</span><br><span class="line">  GitCommit:        <span class="number">425e105</span>d5a03fabd737a126ad93d62a9eeede87f</span><br><span class="line"> docker-init:</span><br><span class="line">  Version:          <span class="number">0.18</span><span class="number">.0</span></span><br><span class="line">  GitCommit:        fec3683</span><br></pre></td></tr></table></figure><h3 id="3-4-systemd启动Docker并配置开机自启"><a href="#3-4-systemd启动Docker并配置开机自启" class="headerlink" title="3.4 systemd启动Docker并配置开机自启"></a>3.4 systemd启动Docker并配置开机自启</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker.service</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> docker.service</span><br></pre></td></tr></table></figure><h3 id="3-5-配置镜像加速器"><a href="#3-5-配置镜像加速器" class="headerlink" title="3.5 配置镜像加速器"></a>3.5 配置镜像加速器</h3><ul><li>阿里云镜像镜像加速器，登录自己的阿里云官网，找到<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors" target="_blank" rel="noopener">镜像加速器</a>，根据提示进行配置</li></ul><p><img src="https://i.loli.net/2019/10/15/ipMF4SNyKjTqJ8z.png" alt=""></p><ul><li>DaoCloud 镜像站</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://f1361db2.m.daocloud.io</span><br></pre></td></tr></table></figure><h3 id="3-6-允许Docker测试示例"><a href="#3-6-允许Docker测试示例" class="headerlink" title="3.6 允许Docker测试示例"></a>3.6 允许Docker测试示例</h3><p><code>docker run hello-world</code></p><p><strong>输出如下</strong></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Unable <span class="built_in">to</span> find image <span class="string">'hello-world:latest'</span> locally  <span class="comment"># 本地无镜像</span></span><br><span class="line">latest: Pulling <span class="built_in">from</span> library/hello-world <span class="comment">#从远程仓库拉取</span></span><br><span class="line"><span class="number">1</span>b930d010525: Pull complete</span><br><span class="line">Digest: sha256:c3b4ada4687bbaa170745b3e4dd8ac3f194ca95b2d0518b417fb47e5879d9b5f</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello <span class="built_in">from</span> Docker!</span><br><span class="line">This message shows that your installation appears <span class="built_in">to</span> be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took <span class="keyword">the</span> following steps:</span><br><span class="line"> <span class="number">1.</span> The Docker client contacted <span class="keyword">the</span> Docker daemon.</span><br><span class="line"> <span class="number">2.</span> The Docker daemon pulled <span class="keyword">the</span> <span class="string">"hello-world"</span> image <span class="built_in">from</span> <span class="keyword">the</span> Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> <span class="number">3.</span> The Docker daemon created <span class="keyword">a</span> <span class="built_in">new</span> container <span class="built_in">from</span> that image which runs <span class="keyword">the</span></span><br><span class="line">    executable that produces <span class="keyword">the</span> output you are currently reading.</span><br><span class="line"> <span class="number">4.</span> The Docker daemon streamed that output <span class="built_in">to</span> <span class="keyword">the</span> Docker client, which sent <span class="keyword">it</span></span><br><span class="line">    <span class="built_in">to</span> your terminal.</span><br><span class="line"></span><br><span class="line">To <span class="keyword">try</span> something more ambitious, you can run <span class="keyword">an</span> Ubuntu container <span class="keyword">with</span>:</span><br><span class="line"> $ docker run -<span class="keyword">it</span> ubuntu bash</span><br><span class="line"></span><br><span class="line">Share images, automate workflows, <span class="keyword">and</span> more <span class="keyword">with</span> <span class="keyword">a</span> free Docker ID:</span><br><span class="line"> <span class="keyword">https</span>://hub.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples <span class="keyword">and</span> ideas, visit:</span><br><span class="line"> <span class="keyword">https</span>://docs.docker.com/<span class="built_in">get</span>-started/</span><br></pre></td></tr></table></figure><h3 id="3-7-查看Docker版本信息"><a href="#3-7-查看Docker版本信息" class="headerlink" title="3.7 查看Docker版本信息"></a>3.7 查看Docker版本信息</h3><p><code>sudo docker info</code></p><p><strong>输出如下</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Client:</span></span><br><span class="line"> <span class="string">Debug</span> <span class="attr">Mode:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Server:</span></span><br><span class="line"><span class="attr"> Containers:</span> <span class="number">0</span>                   <span class="comment"># 容器数</span></span><br><span class="line"><span class="attr">  Running:</span> <span class="number">0</span>                     <span class="comment"># 运行容器数</span></span><br><span class="line"><span class="attr">  Paused:</span> <span class="number">0</span>                      <span class="comment"># 暂停容器数</span></span><br><span class="line"><span class="attr">  Stopped:</span> <span class="number">0</span>                     <span class="comment"># 停止容器数</span></span><br><span class="line"><span class="attr">  Images:</span> <span class="number">0</span></span><br><span class="line"> <span class="string">Server</span> <span class="attr">Version:</span> <span class="number">19.03</span><span class="number">.2</span></span><br><span class="line"> <span class="string">Storage</span> <span class="attr">Driver:</span> <span class="string">overlay2</span></span><br><span class="line">  <span class="string">Backing</span> <span class="attr">Filesystem:</span> <span class="string">extfs</span></span><br><span class="line">  <span class="string">Supports</span> <span class="attr">d_type:</span> <span class="literal">true</span></span><br><span class="line">  <span class="string">Native</span> <span class="string">Overlay</span> <span class="attr">Diff:</span> <span class="literal">true</span></span><br><span class="line"> <span class="string">Logging</span> <span class="attr">Driver:</span> <span class="string">json-file</span></span><br><span class="line"> <span class="string">Cgroup</span> <span class="attr">Driver:</span> <span class="string">cgroupfs</span></span><br><span class="line"><span class="attr"> Plugins:</span></span><br><span class="line"><span class="attr">  Volume:</span> <span class="string">local</span></span><br><span class="line"><span class="attr">  Network:</span> <span class="string">bridge</span> <span class="string">host</span> <span class="string">ipvlan</span> <span class="string">macvlan</span> <span class="literal">null</span> <span class="string">overlay</span></span><br><span class="line"><span class="attr">  Log:</span> <span class="string">awslogs</span> <span class="string">fluentd</span> <span class="string">gcplogs</span> <span class="string">gelf</span> <span class="string">journald</span> <span class="string">json-file</span> <span class="string">local</span> <span class="string">logentries</span> <span class="string">splunk</span> <span class="string">syslog</span></span><br><span class="line"><span class="attr"> Swarm:</span> <span class="string">inactive</span></span><br><span class="line"><span class="attr"> Runtimes:</span> <span class="string">runc</span></span><br><span class="line"> <span class="string">Default</span> <span class="attr">Runtime:</span> <span class="string">runc</span></span><br><span class="line"> <span class="string">Init</span> <span class="attr">Binary:</span> <span class="string">docker-init</span></span><br><span class="line"> <span class="string">containerd</span> <span class="attr">version:</span> <span class="number">894</span><span class="string">b81a4b802e4eb2a91d1ce216b8817763c29fb</span></span><br><span class="line"> <span class="string">runc</span> <span class="attr">version:</span> <span class="number">425e105</span><span class="string">d5a03fabd737a126ad93d62a9eeede87f</span></span><br><span class="line"> <span class="string">init</span> <span class="attr">version:</span> <span class="string">fec3683</span></span><br><span class="line"> <span class="string">Security</span> <span class="attr">Options:</span></span><br><span class="line">  <span class="string">apparmor</span></span><br><span class="line">  <span class="string">seccomp</span></span><br><span class="line"><span class="attr">   Profile:</span> <span class="string">default</span></span><br><span class="line"> <span class="string">Kernel</span> <span class="attr">Version:</span> <span class="number">4.15</span><span class="number">.0</span><span class="bullet">-65</span><span class="bullet">-generic</span></span><br><span class="line"> <span class="string">Operating</span> <span class="attr">System:</span> <span class="string">Ubuntu</span> <span class="number">18.04</span><span class="number">.3</span> <span class="string">LTS</span></span><br><span class="line"><span class="attr"> OSType:</span> <span class="string">linux</span></span><br><span class="line"><span class="attr"> Architecture:</span> <span class="string">x86_64</span></span><br><span class="line"><span class="attr"> CPUs:</span> <span class="number">2</span></span><br><span class="line"> <span class="string">Total</span> <span class="attr">Memory:</span> <span class="number">3.847</span><span class="string">GiB</span></span><br><span class="line"><span class="attr"> Name:</span> <span class="string">Paas</span></span><br><span class="line"><span class="attr"> ID:</span> <span class="number">6</span><span class="attr">VRF:YBNF:N6ZG:MLAW:WS7P:ULYU:UJJT:CC43:H43S:XQNJ:PO4K:FALJ</span></span><br><span class="line"> <span class="string">Docker</span> <span class="string">Root</span> <span class="attr">Dir:</span> <span class="string">/var/lib/docker</span></span><br><span class="line"> <span class="string">Debug</span> <span class="attr">Mode:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr"> Registry:</span> <span class="attr">https://index.docker.io/v1/</span></span><br><span class="line"><span class="attr"> Labels:</span></span><br><span class="line"><span class="attr"> Experimental:</span> <span class="literal">false</span></span><br><span class="line"> <span class="string">Registry</span> <span class="attr">Mirrors:</span></span><br><span class="line"><span class="attr">  https:</span><span class="string">//xxxxxx.mirror.aliyuncs.com/</span></span><br><span class="line"> <span class="string">Live</span> <span class="string">Restore</span> <span class="attr">Enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">WARNING:</span> <span class="literal">No</span> <span class="string">swap</span> <span class="string">limit</span> <span class="string">support</span></span><br></pre></td></tr></table></figure><h2 id="4-开启Docker-Remote-API"><a href="#4-开启Docker-Remote-API" class="headerlink" title="4. 开启Docker Remote API"></a>4. 开启Docker Remote API</h2><p>修改配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/lib/systemd/system/docker.service</span><br></pre></td></tr></table></figure><p>找到<code>ExecStart=/usr/bin/dockerd</code>行，修改如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ExecStart=/usr/bin/dockerd  -H tcp://0.0.0.0:2375  -H unix:///var/run/docker.sock</span><br></pre></td></tr></table></figure><p>编辑配置文件<code>vim /etc/profile</code>, 写入一下内容, 执行<code>source /etc/profile</code>刷新</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> DOCKER_HOST=127.0.0.1:2375</span><br></pre></td></tr></table></figure><p>执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><p>执行<code>curl http://127.0.0.1:2375/info</code>验证</p><p>输出如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"ID"</span>:<span class="string">"HPZP:XIWJ:BZP7:YI47:UOLX:YLMM:LBF7:KV4E:Y2A7:ED6B:BHWB:FE4R"</span>,<span class="attr">"Containers"</span>:<span class="number">2</span>,<span class="attr">"ContainersRunning"</span>:<span class="number">0</span>,<span class="attr">"ContainersPaused"</span>:<span class="number">0</span>,<span class="attr">"ContainersStopped"</span>:<span class="number">2</span>,<span class="attr">"Images"</span>:<span class="number">2</span>,<span class="attr">"Driver"</span>:<span class="string">"overlay2"</span>,<span class="attr">"DriverStatus"</span>:[[<span class="string">"Backing Filesystem"</span>,<span class="string">"xfs"</span>],[<span class="string">"Supports d_type"</span>,<span class="string">"true"</span>],[<span class="string">"Native Overlay Diff"</span>,<span class="string">"true"</span>]],<span class="attr">"SystemStatus"</span>:<span class="literal">null</span>,<span class="attr">"Plugins"</span>:&#123;<span class="attr">"Volume"</span>:[<span class="string">"local"</span>],<span class="attr">"Network"</span>:[<span class="string">"bridge"</span>,<span class="string">"host"</span>,<span class="string">"macvlan"</span>,<span class="string">"null"</span>,<span class="string">"overlay"</span>],<span class="attr">"Authorization"</span>:<span class="literal">null</span>,<span class="attr">"Log"</span>:[<span class="string">"awslogs"</span>,<span class="string">"fluentd"</span>,<span class="string">"gcplogs"</span>,<span class="string">"gelf"</span>,<span class="string">"journald"</span>,<span class="string">"json-file"</span>,<span class="string">"logentries"</span>,<span class="string">"splunk"</span>,<span class="string">"syslog"</span>]&#125;,<span class="attr">"MemoryLimit"</span>:<span class="literal">true</span>,<span class="attr">"SwapLimit"</span>:<span class="literal">true</span>,<span class="attr">"KernelMemory"</span>:<span class="literal">true</span>,<span class="attr">"CpuCfsPeriod"</span>:<span class="literal">true</span>,<span class="attr">"CpuCfsQuota"</span>:<span class="literal">true</span>,<span class="attr">"CPUShares"</span>:<span class="literal">true</span>,<span class="attr">"CPUSet"</span>:<span class="literal">true</span>,<span class="attr">"IPv4Forwarding"</span>:<span class="literal">true</span>,<span class="attr">"BridgeNfIptables"</span>:<span class="literal">true</span>,<span class="attr">"BridgeNfIp6tables"</span>:<span class="literal">true</span>,<span class="attr">"Debug"</span>:<span class="literal">false</span>,<span class="attr">"NFd"</span>:<span class="number">20</span>,<span class="attr">"OomKillDisable"</span>:<span class="literal">true</span>,<span class="attr">"NGoroutines"</span>:<span class="number">33</span>,<span class="attr">"SystemTime"</span>:<span class="string">"2018-04-08T15:41:52.725705339+08:00"</span>,<span class="attr">"LoggingDriver"</span>:<span class="string">"json-file"</span>,<span class="attr">"CgroupDriver"</span>:<span class="string">"cgroupfs"</span>,<span class="attr">"NEventsListener"</span>:<span class="number">0</span>,<span class="attr">"KernelVersion"</span>:<span class="string">"3.10.0-693.21.1.el7.x86_64"</span>,<span class="attr">"OperatingSystem"</span>:<span class="string">"CentOS Linux 7 (Core)"</span>,<span class="attr">"OSType"</span>:<span class="string">"linux"</span>,<span class="attr">"Architecture"</span>:<span class="string">"x86_64"</span>,<span class="attr">"IndexServerAddress"</span>:<span class="string">"https://index.docker.io/v1/"</span>,<span class="attr">"RegistryConfig"</span>:&#123;<span class="attr">"AllowNondistributableArtifactsCIDRs"</span>:[],<span class="attr">"AllowNondistributableArtifactsHostnames"</span>:[],<span class="attr">"InsecureRegistryCIDRs"</span>:[<span class="string">"127.0.0.0/8"</span>],<span class="attr">"IndexConfigs"</span>:&#123;<span class="attr">"docker.io"</span>:&#123;<span class="attr">"Name"</span>:<span class="string">"docker.io"</span>,<span class="attr">"Mirrors"</span>:[<span class="string">"https://0zs97su8.mirror.aliyuncs.com/"</span>],<span class="attr">"Secure"</span>:<span class="literal">true</span>,<span class="attr">"Official"</span>:<span class="literal">true</span>&#125;&#125;,<span class="attr">"Mirrors"</span>:[<span class="string">"https://0zs97su8.mirror.aliyuncs.com/"</span>]&#125;,<span class="attr">"NCPU"</span>:<span class="number">1</span>,<span class="attr">"MemTotal"</span>:<span class="number">1022570496</span>,<span class="attr">"GenericResources"</span>:<span class="literal">null</span>,<span class="attr">"DockerRootDir"</span>:<span class="string">"/var/lib/docker"</span>,<span class="attr">"HttpProxy"</span>:<span class="string">""</span>,<span class="attr">"HttpsProxy"</span>:<span class="string">""</span>,<span class="attr">"NoProxy"</span>:<span class="string">""</span>,<span class="attr">"Name"</span>:<span class="string">"localhost"</span>,<span class="attr">"Labels"</span>:[],<span class="attr">"ExperimentalBuild"</span>:<span class="literal">false</span>,<span class="attr">"ServerVersion"</span>:<span class="string">"18.03.0-ce"</span>,<span class="attr">"ClusterStore"</span>:<span class="string">""</span>,<span class="attr">"ClusterAdvertise"</span>:<span class="string">""</span>,<span class="attr">"Runtimes"</span>:&#123;<span class="attr">"runc"</span>:&#123;<span class="attr">"path"</span>:<span class="string">"docker-runc"</span>&#125;&#125;,<span class="attr">"DefaultRuntime"</span>:<span class="string">"runc"</span>,<span class="attr">"Swarm"</span>:&#123;<span class="attr">"NodeID"</span>:<span class="string">""</span>,<span class="attr">"NodeAddr"</span>:<span class="string">""</span>,<span class="attr">"LocalNodeState"</span>:<span class="string">"inactive"</span>,<span class="attr">"ControlAvailable"</span>:<span class="literal">false</span>,<span class="attr">"Error"</span>:<span class="string">""</span>,<span class="attr">"RemoteManagers"</span>:<span class="literal">null</span>&#125;,<span class="attr">"LiveRestoreEnabled"</span>:<span class="literal">false</span>,<span class="attr">"Isolation"</span>:<span class="string">""</span>,<span class="attr">"InitBinary"</span>:<span class="string">"docker-init"</span>,<span class="attr">"ContainerdCommit"</span>:&#123;<span class="attr">"ID"</span>:<span class="string">"cfd04396dc68220d1cecbe686a6cc3aa5ce3667c"</span>,<span class="attr">"Expected"</span>:<span class="string">"cfd04396dc68220d1cecbe686a6cc3aa5ce3667c"</span>&#125;,<span class="attr">"RuncCommit"</span>:&#123;<span class="attr">"ID"</span>:<span class="string">"4fc53a81fb7c994640722ac585fa9ca548971871"</span>,<span class="attr">"Expected"</span>:<span class="string">"4fc53a81fb7c994640722ac585fa9ca548971871"</span>&#125;,<span class="attr">"InitCommit"</span>:&#123;<span class="attr">"ID"</span>:<span class="string">"949e6fa"</span>,<span class="attr">"Expected"</span>:<span class="string">"949e6fa"</span>&#125;,<span class="attr">"SecurityOptions"</span>:[<span class="string">"]&#125;</span></span><br></pre></td></tr></table></figure><h2 id="5-安装-Docker-Compose"><a href="#5-安装-Docker-Compose" class="headerlink" title="5. 安装 Docker Compose"></a>5. 安装 Docker Compose</h2><h3 id="5-1-运行此命令下载最新版本的Docker-Compose"><a href="#5-1-运行此命令下载最新版本的Docker-Compose" class="headerlink" title="5.1 运行此命令下载最新版本的Docker Compose"></a>5.1 运行此命令下载最新版本的Docker Compose</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://github.com/docker/compose/releases/download/1.24.0/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><blockquote><p>上面的命令是一个例子，有可能会过时，为了确保使用最新的版本，请前往 <a href="https://github.com/docker/compose/releases" target="_blank" rel="noopener">Github Compose repository release</a> 查看最新版本</p></blockquote><h3 id="5-2-给可执行文件添加权限"><a href="#5-2-给可执行文件添加权限" class="headerlink" title="5.2 给可执行文件添加权限"></a>5.2 给可执行文件添加权限</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><h3 id="5-3-验证安装docker-compose-–version"><a href="#5-3-验证安装docker-compose-–version" class="headerlink" title="5.3 验证安装docker-compose –version"></a>5.3 验证安装docker-compose –version</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose version</span><br></pre></td></tr></table></figure><p><strong>输出如下</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker-compose version <span class="number">1.24</span><span class="number">.0</span>, build <span class="number">0</span>aa59064</span><br><span class="line">docker-py version: <span class="number">3.7</span><span class="number">.2</span></span><br><span class="line">CPython version: <span class="number">3.6</span><span class="number">.8</span></span><br><span class="line">OpenSSL version: OpenSSL <span class="number">1.1</span><span class="number">.0</span>j  <span class="number">20</span> Nov <span class="number">2018</span></span><br></pre></td></tr></table></figure><blockquote><p>参考资料:</p></blockquote><ol><li><a href="https://docs.docker.com/install/linux/docker-ce/centos/" target="_blank" rel="noopener">Docker 官方安装文档</a></li><li><a href="https://docs.docker.com/compose/install/" target="_blank" rel="noopener">Docker Compose 官网安装文档</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-背景&quot;&gt;&lt;a href=&quot;#1-背景&quot; class=&quot;headerlink&quot; title=&quot;1. 背景&quot;&gt;&lt;/a&gt;1. 背景&lt;/h2&gt;&lt;h3 id=&quot;1-1-概述&quot;&gt;&lt;a href=&quot;#1-1-概述&quot; class=&quot;headerlink&quot; title=&quot;1.1 概述&quot;&gt;&lt;/a&gt;1.1 概述&lt;/h3&gt;&lt;p&gt;Docker 使用 Google 公司推出的 Go 语言 进行开发实现，基于 Linux 内核的 cgroup，namespace，以及 AUFS 类的 Union FS 等技术，对进程进行封装隔离，属于 操作 系统层面的虚拟化技术。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容 器。最初实现是基于 LXC，从 0.7 版本以后开始去除 LXC，转而使用自行开发的 libcontainer，从 1.11 开始，则进一步演进为使用 runC 和 containerd。&lt;/p&gt;
&lt;p&gt;Docker 在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极 大的简化了容器的创建和维护。使得 Docker 技术比虚拟机技术更为轻便、快捷。&lt;/p&gt;
    
    </summary>
    
    
      <category term="PaaS" scheme="https://ericshen.xyz/categories/PaaS/"/>
    
      <category term="Docker" scheme="https://ericshen.xyz/categories/PaaS/Docker/"/>
    
    
      <category term="linux" scheme="https://ericshen.xyz/tags/linux/"/>
    
      <category term="docker" scheme="https://ericshen.xyz/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>git archive 打包文件</title>
    <link href="https://ericshen.xyz/2019/03/15/git-archive-%E6%89%93%E5%8C%85%E6%96%87%E4%BB%B6/"/>
    <id>https://ericshen.xyz/2019/03/15/git-archive-%E6%89%93%E5%8C%85%E6%96%87%E4%BB%B6/</id>
    <published>2019-03-15T04:13:35.000Z</published>
    <updated>2020-03-31T09:38:19.161Z</updated>
    
    <content type="html"><![CDATA[<p>Git 中打包文件是个简单的活，不管是<strong>打包全部文件</strong>作为 release，</p><p>还是<strong>只压缩更改的文件</strong>，一个命令就能搞定。</p><p>而且，打包之后<strong>目录结构完全不变</strong>，这对于覆盖部署来说极其方便。</p><a id="more"></a><h2 id="1-打包所有文件"><a href="#1-打包所有文件" class="headerlink" title="1 打包所有文件"></a>1 打包所有文件</h2><p>打包<code>master</code>分支的所有文件：</p><blockquote><p>注：本地修改未提交的并不会打包进去</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git archive --format=zip --output master.zip master</span></span><br></pre></td></tr></table></figure><p>其中，输出格式为<code>zip</code>，输出文件为<code>master.zip</code>。git 支持 zip 和 tar 两种输出格式。</p><p>打包当前分支当前<code>HEAD</code>的所有文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git archive --format=zip --output head.zip HEAD</span></span><br></pre></td></tr></table></figure><p>打包<code>v1.2</code>标签的所有文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git archive --format=zip --output v1.2.zip v1.2</span></span><br></pre></td></tr></table></figure><h2 id="2-打包更改的文件"><a href="#2-打包更改的文件" class="headerlink" title="2 打包更改的文件"></a>2 打包更改的文件</h2><p>打包更改文件的原理是：</p><ol><li>用<code>git diff</code> 找出文件列表；</li><li>用打包命令打包。</li></ol><p>也就是说，<strong>只要能用找出文件列表，就可以 git 打包出来。</strong></p><h3 id="2-1-打包最后修改的文件"><a href="#2-1-打包最后修改的文件" class="headerlink" title="2.1 打包最后修改的文件"></a>2.1 打包最后修改的文件</h3><p>先通过<code>git diff</code>找到最新版本修改过的文件，再压缩打包这些文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git archive --format=zip -o update.zip HEAD $(git diff --name-only HEAD^)</span></span><br></pre></td></tr></table></figure><h3 id="2-2-打包最后两个版本修改的文件"><a href="#2-2-打包最后两个版本修改的文件" class="headerlink" title="2.2 打包最后两个版本修改的文件"></a>2.2 打包最后两个版本修改的文件</h3><p>总共也是 2 个版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git archive --format=zip -o update.zip HEAD $(git diff --name-only HEAD~2)</span></span><br></pre></td></tr></table></figure><h3 id="2-3-打包两个分支之间差别的文件"><a href="#2-3-打包两个分支之间差别的文件" class="headerlink" title="2.3 打包两个分支之间差别的文件"></a>2.3 打包两个分支之间差别的文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git archive --format=zip -o update.zip HEAD $(git diff --name-only master fix-error)</span></span><br></pre></td></tr></table></figure><p>如上，打包<code>master</code>和<code>fix-error</code>分支差异的文件。</p><p><strong>参考资料：</strong></p><ol><li><a href="http://tosbourn.com/using-git-to-create-an-archive-of-changed-files/" target="_blank" rel="noopener">Using Git to create an archive of changed files.</a></li><li><a href="http://blog.miniasp.com/post/2014/04/01/Git-Export-Only-Added-Modified-Files.aspx" target="_blank" rel="noopener">如何讓 Git 僅匯出在特定版本中新增或修改過的檔案</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Git 中打包文件是个简单的活，不管是&lt;strong&gt;打包全部文件&lt;/strong&gt;作为 release，&lt;/p&gt;
&lt;p&gt;还是&lt;strong&gt;只压缩更改的文件&lt;/strong&gt;，一个命令就能搞定。&lt;/p&gt;
&lt;p&gt;而且，打包之后&lt;strong&gt;目录结构完全不变&lt;/strong&gt;，这对于覆盖部署来说极其方便。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Git" scheme="https://ericshen.xyz/categories/Git/"/>
    
    
      <category term="git" scheme="https://ericshen.xyz/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>标准GitFLow工作流程</title>
    <link href="https://ericshen.xyz/2018/10/15/%E6%A0%87%E5%87%86GitFLow%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/"/>
    <id>https://ericshen.xyz/2018/10/15/%E6%A0%87%E5%87%86GitFLow%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/</id>
    <published>2018-10-15T05:49:25.000Z</published>
    <updated>2020-03-31T09:37:24.118Z</updated>
    
    <content type="html"><![CDATA[<h1 id="标准GitFlow工作流程"><a href="#标准GitFlow工作流程" class="headerlink" title="标准GitFlow工作流程"></a>标准GitFlow工作流程</h1><h3 id="版本管理的挑战"><a href="#版本管理的挑战" class="headerlink" title="版本管理的挑战"></a>版本管理的挑战</h3><p>虽然有这么优秀的版本管理工具，但是我们面对版本管理的时候，依然有非常大得挑战，我们都知道大家工作在同一个仓库上，那么彼此的代码协作必然带来很多问题和挑战，如下：</p><ul><li>如何开始一个Feature的开发，而不影响别的<code>Feature</code>？</li><li>由于很容易创建新分支，分支多了如何管理，时间久了，如何知道每个分支是干什么的？</li><li>哪些分支已经合并回了主干？</li><li>如何进行<code>Release</code>的管理？开始一个<code>Release</code>的时候如何冻结Feature, 如何在<code>Prepare Release</code>的时候，开发人员可以继续开发新的功能？</li><li>线上代码出Bug了，如何快速修复？而且修复的代码要包含到开发人员的分支以及下一个<code>Release</code>?</li></ul><p>大部分开发人员现在使用<code>Git</code>就只是用三个甚至两个分支，一个是<code>Master</code>, 一个是<code>Develop</code>, 还有一个是基于<code>Develop</code>打得各种分支。这个在小项目规模的时候还勉强可以支撑，因为很多人做项目就只有一个<code>Release</code>, 但是人员一多，而且项目周期一长就会出现各种问题。</p><a id="more"></a><h3 id="一、Git-Flow-简介"><a href="#一、Git-Flow-简介" class="headerlink" title="一、Git Flow 简介"></a>一、Git Flow 简介</h3><p><code>Git Flow</code> 是一个围绕项目开发发布的严格 git 分支模型，用于管理多人协作的大型项目中实现高效的协作开发，大致分为三种:</p><ul><li><code>Git Flow</code>: 最原始的 <code>Git Flow</code> 分支模型</li><li><code>Github Flow</code>: <code>Git Flow</code> 的简化版，专门配合持续发布</li><li><code>GitLab Flow</code>: <code>Git Flow</code> 与 <code>Github Flow</code> 的结合版</li></ul><p>关于三种 <code>Git Flow</code> 区别详情可参考大佬阮一峰的 <a href="http://www.ruanyifeng.com/blog/2015/12/git-workflow.html" target="_blank" rel="noopener">Git 工作流程</a></p><h3 id="二、-Git-Flow-流程"><a href="#二、-Git-Flow-流程" class="headerlink" title="二、 Git Flow 流程"></a>二、 Git Flow 流程</h3><p>Github Flow 和 GitLab Flow 对于持续发布支持比较好，但是原始版本的 Git Flow 对于传统的按照版本发布更加友好一些，所以以下主要说明以下 Git Flow 的工作流程；Git Flow 主要分支模型如下</p><p><img src="https://i.loli.net/2019/11/15/BkcQboiAUa7NWMS.jpg" alt=""></p><blockquote><p>上面这个官方图可能看起来不太直观，可参考下图：</p><p><img src="https://i.loli.net/2019/11/15/3V1RbWPzZftxBOy.jpg" alt=""></p></blockquote><p>在整个分支模型中 <strong>存在两个长期分支: <code>develop</code> 和 <code>master</code></strong>，其中 <code>develop</code> 分支为开发分支，<code>master</code> 为生产分支；<strong><code>master</code> 代码始终保持随时可以部署到线上的状态；<code>develop</code> 分支用于合并最新提交的功能性代码</strong>；具体的分支定义如下</p><ul><li><code>master</code>: 生产代码，始终保持可以直接部署生产的状态</li><li><code>develop</code>: 开发分支，每次合并最新功能代码到此分支</li><li><code>feature</code>: 新功能分支，所有新开发的功能将采用 <code>feature/xxxx</code> 形式命名分支</li><li><code>hotfixe</code>: 紧急修复补丁分支，当新功能部署到了线上出现了严重 bug 需要紧急修复时，则创建 <code>hotfixe/xxxx</code> 形式命名的分支</li><li><code>release</code>: 稳定版分支，当完成大版本变动后，应该创建 <code>release/xxxx</code> 分支</li></ul><p>在整个分支模型中，<code>develop</code> 分支为最上游分支，会不断有新的 <code>feature</code> 合并入 <code>develop</code> 分支，当功能开发达到完成所有版本需求时，则从 <code>develop</code> 分支创建 <code>release</code> 分支，release 后如没有发现其他问题，最终 <code>release</code> 会被合并到 <code>master</code> 分支以完成线上部署</p><blockquote><p>Git Flow如何工作</p></blockquote><p><strong>初始分支</strong></p><ul><li>所有在<code>Master</code>分支上的<code>Commit</code>应该<code>Tag</code><br><img src="https://i.loli.net/2019/11/15/iZw7FSPfLsEcyBJ.jpg" alt=""></li><li><code>Feature</code> 分支分支名 <code>feature/feature1</code>分支做完后，必须合并回<code>Develop</code>分支, 合并完分支后一般会删点这个Feature分支，但是我们也可以保留<br><img src="https://i.loli.net/2019/11/15/LnGjsQtRh4l2FSo.jpg" alt=""></li><li><code>Release</code>分支分支名 <code>release/release1</code>分支基于<code>Develop</code>分支创建，打完<code>Release</code>分之后，我们可以在这个<code>Release</code>分支上测试，修改Bug等。同时，其它开发人员可以基于开发新的<code>Feature</code> (记住：一旦打了<code>Release</code>分支之后不要从<code>Develop</code>分支上合并新的改动到<code>Release</code>分支)发布<code>Release</code>分支时，合并<code>Release</code>到<code>Master</code>和Develop， 同时在<code>Master</code>分支上打个Tag记住<code>Release</code>版本号，然后可以删除<code>Release</code>分支了。<br><img src="https://i.loli.net/2019/11/15/HL8TN1UfK5FShyr.jpg" alt=""></li><li>维护分支 Hotfix分支名 hotfix/hotfix1分支基于Master分支创建，开发完后需要合并回Master和Develop分支，同时在Master上打一个tag<br><img src="https://i.loli.net/2019/11/15/c89z3YPqKph5j1T.png" alt="fa159868df4a416d391c6fd832851f9a.png"></li></ul><blockquote><p>Git 命令：</p></blockquote><ol><li>创建develop分支</li></ol><ul><li><code>git branch develop git push -u origin develop</code></li></ul><ol start="2"><li>开始新Feature开发</li></ol><ul><li><p><code>git checkout -b some-feature develop</code></p></li><li><p><code>git push -u origin some-feature</code> <em>可选推送至远端</em></p></li><li><p><code>git status</code></p></li><li><p><code>git add some-file</code></p></li><li><p><code>git commit</code></p></li></ul><ol start="3"><li>完成Feature</li></ol><ul><li><code>git pull origin develop</code></li><li><code>git checkout develop</code></li><li><code>git merge --no-ff some-feature</code></li><li><code>git push origin develop</code></li><li><code>git branch -d some-feature</code></li><li><code>git push origin --delete some-feature</code><em>取决于是否已将Feature提交到远端</em></li></ul><ol start="4"><li>开始Release</li></ol><ul><li><code>git checkout -b release-0.1.0 develop</code></li></ul><ol start="5"><li>完成Release</li></ol><ul><li><code>git checkout master</code></li><li><code>git merge --no-ff release-0.1.0</code></li><li><code>git push</code></li><li><code>git checkout develop</code></li><li><code>git merge --no-ff release-0.1.0</code></li><li><code>git push git branch -d release-0.1.0</code></li><li><code>git push origin --delete release-0.1.0</code> <em>取决于是否已将Release提交到远端</em></li><li><code>git tag -a v0.1.0 master</code></li><li><code>git push --tags</code></li></ul><ol start="6"><li>开始Hotfix</li></ol><ul><li><code>git checkout -b hotfix-0.1.1 master</code></li></ul><ol start="7"><li>完成Hotfix</li></ol><ul><li><code>git checkout master</code></li><li><code>git merge --no-ff hotfix-0.1.1</code></li><li><code>git push</code></li><li><code>git checkout develop</code></li><li><code>git merge --no-ff hotfix-0.1.1</code></li><li><code>git push</code></li><li><code>git branch -d hotfix-0.1.1</code></li><li><code>git tag -a v0.1.1 master</code></li><li><code>git push --tags</code></li></ul><h3 id="三、Git-Flow-工具"><a href="#三、Git-Flow-工具" class="headerlink" title="三、Git Flow 工具"></a>三、Git Flow 工具</h3><p>针对于 Git Flow，其手动操作 git 命令可能过于繁琐，所以后来有了 git-flow 工具；git-flow 是一个 git 扩展集； git-flow 安装以及使用具体请参考 <a href="https://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html" target="_blank" rel="noopener">git-flow 备忘清单</a>，该文章详细描述了 git-flow 工具的使用方式<br><img src="https://s1.ax1x.com/2018/12/11/FYQLHx.png" alt="git flow"></p><ul><li>那么又有人做出了<code>GUI</code>工具，你只需要点击下一步就行，工具帮你干这些事。<br>当你用Git-<code>flow</code>初始化后，基本上你只需要点击git flow菜单选择start feature, release或者hotfix, 做完后再次选择git flow菜单，点击Done Action.</li></ul><blockquote><p>个人推荐：<a href="https://www.sourcetreeapp.com/" target="_blank" rel="noopener">SourceTree</a>强大的图形化Git工作流（点点点），最主要是免费！<br><img src="https://i.loli.net/2019/11/15/L5yPmrD1hfi3NOX.png" alt="image.png"></p></blockquote><p><strong>IDE集成参考</strong></p><p><img src="https://i.loli.net/2019/11/15/z7ZXnkro5bFc4Tv.png" alt=""></p><ul><li><strong>JetBrain</strong>系列开发工具(如IDEA、WebStorm、PyCharm):<ul><li><code>Settings</code>&gt;<code>Plugins</code>&gt;<code>Browse repositories</code>，搜索<strong>Git Flow Integration</strong>安装；</li><li>或访问<a href="https://plugins.jetbrains.com/plugin/7315-git-flow-integration" target="_blank" rel="noopener">JetBrain官方库</a>下载，在<code>Plugins</code>&gt;<code>Install plugin from disk</code>安装。</li></ul></li><li><strong>VisualStudio</strong>系列开发工具：<ul><li><code>工具</code>&gt;<code>扩展和更新</code>，搜索<strong>GitFlow</strong>安装，详见<a href="https://marketplace.visualstudio.com/search?term=gitflow&target=VS&category=Tools&vsVersion=&subCategory=All&sortBy=Relevance">Marketplace</a></li></ul></li><li><strong>VS Code</strong>:<ul><li><code>Extensions</code>，搜索<strong>gitflow</strong>安装，完成后通过<code>Command Palettee</code>调用，建议同<code>GitLens</code>配合食用</li></ul></li></ul><h3 id="四、GitLab-整合"><a href="#四、GitLab-整合" class="headerlink" title="四、GitLab 整合"></a>四、GitLab 整合</h3><p>以上 <code>Git Flow</code> 所有操作介绍的都是在本地操作，而正常我们在工作中都是基于 <code>GitLab</code> 搭建私有 <code>Git</code> 仓库来进行协同开发的，以下简述以下 <code>Git Flow</code> 配合 <code>GitLab</code> 的流程</p><h4 id="4-1-开发-features"><a href="#4-1-开发-features" class="headerlink" title="4.1 开发 features"></a>4.1 开发 features</h4><p>当开发一个新功能时流程如下:</p><ul><li>本地 <code>git flow feature start xxxx</code> 开启一个 feature 新分支</li><li><code>git flow feature publish xxxx</code> 将此分支推送到远端以便他人获取 (可选)</li><li>完成开发后 <code>GitLab</code> 上向 <code>develop</code> 分支发起合并请求</li><li><code>CI sonar</code> 等质量检测工具扫描，其他用户 <code>review</code> 代码</li><li>确认无误后 <code>master</code> 权限用户合并其到 <code>develop</code> 分支</li><li>部署到测试环境以便测试组测试</li><li>如果测试不通过，则继续基于此分支开发，直到该功能开发完成</li></ul><h4 id="4-2-创建-release"><a href="#4-2-创建-release" class="headerlink" title="4.2 创建 release"></a>4.2 创建 release</h4><p>当一定量的 feature 开发完成并合并到 <code>develop</code> 后，如所有 <code>feature</code> 都测试通过并满足版本需求，则可以创建 <code>release</code> 版本分支；release 分支流程如下</p><ul><li>本地 <code>git flow release start xxxx</code> 开启 <code>release</code> 分支</li><li><code>git flow release publish xxxx</code> 将其推送到远端以便他人获取</li><li>继续进行完整性测试，出现问题继续修复，直到 <code>release</code> 完全稳定</li><li>从 <code>release</code> 分支向 <code>master</code>、<code>develop</code> 分支分别发起合并请求</li><li><code>master</code> 合并后创建对应的 <code>release</code> 标签，并部署生产环境</li><li><code>develop</code> 合并 <code>release</code> 的后期修改</li></ul><h4 id="4-3-紧急修复hotfix"><a href="#4-3-紧急修复hotfix" class="headerlink" title="4.3 紧急修复hotfix"></a>4.3 紧急修复hotfix</h4><p>当 <code>master</code> 某个 <code>tag</code> 部署到生产环境后，也可能出现不符合预期的问题出现；此时应该基于 <code>master</code> 创建 <code>hotfix</code> 分支进行修复，流程如下标准<code>GitFlow</code>工作流程</p><ul><li>本地 <code>git flow hotfix start xxxx</code> 创建紧急修复分支</li><li>修改代码后将其推送到远端，并向 <code>master</code>、<code>develop</code> 分支发起合并</li><li><code>develop</code> 合并紧急修复补丁，如果必要最好再做一下测试</li><li><code>master</code> 合并紧急修复补丁，创建紧急修复 <code>tag</code>，并部署生产环境</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://www.ruanyifeng.com/blog/2015/12/git-workflow.html" target="_blank" rel="noopener">Git 工作流程</a></li><li><a href="https://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html" target="_blank" rel="noopener">git-flow 备忘清单</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;标准GitFlow工作流程&quot;&gt;&lt;a href=&quot;#标准GitFlow工作流程&quot; class=&quot;headerlink&quot; title=&quot;标准GitFlow工作流程&quot;&gt;&lt;/a&gt;标准GitFlow工作流程&lt;/h1&gt;&lt;h3 id=&quot;版本管理的挑战&quot;&gt;&lt;a href=&quot;#版本管理的挑战&quot; class=&quot;headerlink&quot; title=&quot;版本管理的挑战&quot;&gt;&lt;/a&gt;版本管理的挑战&lt;/h3&gt;&lt;p&gt;虽然有这么优秀的版本管理工具，但是我们面对版本管理的时候，依然有非常大得挑战，我们都知道大家工作在同一个仓库上，那么彼此的代码协作必然带来很多问题和挑战，如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何开始一个Feature的开发，而不影响别的&lt;code&gt;Feature&lt;/code&gt;？&lt;/li&gt;
&lt;li&gt;由于很容易创建新分支，分支多了如何管理，时间久了，如何知道每个分支是干什么的？&lt;/li&gt;
&lt;li&gt;哪些分支已经合并回了主干？&lt;/li&gt;
&lt;li&gt;如何进行&lt;code&gt;Release&lt;/code&gt;的管理？开始一个&lt;code&gt;Release&lt;/code&gt;的时候如何冻结Feature, 如何在&lt;code&gt;Prepare Release&lt;/code&gt;的时候，开发人员可以继续开发新的功能？&lt;/li&gt;
&lt;li&gt;线上代码出Bug了，如何快速修复？而且修复的代码要包含到开发人员的分支以及下一个&lt;code&gt;Release&lt;/code&gt;?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大部分开发人员现在使用&lt;code&gt;Git&lt;/code&gt;就只是用三个甚至两个分支，一个是&lt;code&gt;Master&lt;/code&gt;, 一个是&lt;code&gt;Develop&lt;/code&gt;, 还有一个是基于&lt;code&gt;Develop&lt;/code&gt;打得各种分支。这个在小项目规模的时候还勉强可以支撑，因为很多人做项目就只有一个&lt;code&gt;Release&lt;/code&gt;, 但是人员一多，而且项目周期一长就会出现各种问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Git" scheme="https://ericshen.xyz/categories/Git/"/>
    
    
      <category term="git" scheme="https://ericshen.xyz/tags/git/"/>
    
      <category term="git-flow" scheme="https://ericshen.xyz/tags/git-flow/"/>
    
  </entry>
  
  <entry>
    <title>Linux同步系统时间</title>
    <link href="https://ericshen.xyz/2018/10/13/Linux%E5%90%8C%E6%AD%A5%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%97%B4/"/>
    <id>https://ericshen.xyz/2018/10/13/Linux%E5%90%8C%E6%AD%A5%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%97%B4/</id>
    <published>2018-10-13T12:20:31.000Z</published>
    <updated>2020-03-31T09:38:37.237Z</updated>
    
    <content type="html"><![CDATA[<p>一、修改时区：</p><ul><li>方法 1:</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/share/zoneinfo/Asia/Shanghai  /etc/localtime</span><br></pre></td></tr></table></figure><ul><li>方法 2： </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">timedatectl list-timezones <span class="comment">#列出时区</span></span><br><span class="line">timedatectl <span class="built_in">set</span>-timezone Asia/Shanghai <span class="comment">#设置时区为亚洲/上海</span></span><br></pre></td></tr></table></figure><ul><li>方法 3：使用  tzselect</li></ul><p>查看是否修改成功：<code>date</code></p><p>Fri Dec 14 10:48:05 CST 2018</p><p>如果显示 CST 则说明时区设置成功</p><a id="more"></a><blockquote><p>CST：中国标准时间（China Standard Time），这个解释可能是针对 RedHat Linux。</p></blockquote><blockquote><p>UTC：协调世界时，又称世界标准时间，简称 UTC，从英文国际时间 / 法文协调时间”Universal Time/Temps Cordonn&eacute;” 而来。中国大陆、香港、澳门、台湾、蒙古国、新加坡、马来西亚、菲律宾、澳洲西部的时间与 UTC 的时差均为 + 8，也就是 UTC+8。</p></blockquote><blockquote><p>GMT：格林尼治标准时间（旧译格林威治平均时间或格林威治标准时间；英语：Greenwich Mean Time，GMT）是指位于英国伦敦郊区的皇家格林尼治天文台的标准时间，因为本初子午线被定义在通过那里的经线。</p></blockquote><p>设置完系统时间后, 还需要同步到硬件时钟上</p><p>二、查看和修改时间</p><ul><li><p>显示时间: <code>date</code></p></li><li><p>修改时间: <code>date -s  时间</code><br>如：设置当前时间为：2018 年 12 月 10 点 50 分<br><code>date -s  ‘2018-12-14 10:50:00’</code></p></li><li><p>根据网络同步时间<br>使用 ntp 同步标准时间，ntp：网络时间协议（network time protol）<br>安装：<code>yum install ntp</code><br>同步：<code>ntpdate pool.ntp.org</code></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一、修改时区：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方法 1:&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cp /usr/share/zoneinfo/Asia/Shanghai  /etc/localtime&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;方法 2： &lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;timedatectl list-timezones &lt;span class=&quot;comment&quot;&gt;#列出时区&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;timedatectl &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;-timezone Asia/Shanghai &lt;span class=&quot;comment&quot;&gt;#设置时区为亚洲/上海&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;方法 3：使用  tzselect&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;查看是否修改成功：&lt;code&gt;date&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Fri Dec 14 10:48:05 CST 2018&lt;/p&gt;
&lt;p&gt;如果显示 CST 则说明时区设置成功&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://ericshen.xyz/categories/Linux/"/>
    
    
      <category term="linux" scheme="https://ericshen.xyz/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>解决Ubuntu 18.04 DHCP ip失效问题</title>
    <link href="https://ericshen.xyz/2018/07/14/%E8%A7%A3%E5%86%B3Ubuntu-18-04-DHCP-ip%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/"/>
    <id>https://ericshen.xyz/2018/07/14/%E8%A7%A3%E5%86%B3Ubuntu-18-04-DHCP-ip%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/</id>
    <published>2018-07-14T12:16:18.000Z</published>
    <updated>2020-03-31T09:35:38.659Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解决Ubuntu-18-04-DHCP-ip失效问题"><a href="#解决Ubuntu-18-04-DHCP-ip失效问题" class="headerlink" title="解决Ubuntu 18.04 DHCP ip失效问题"></a>解决Ubuntu 18.04 DHCP ip失效问题</h1><p>今天在准备弄一个虚拟机集群，自然是装好一个，然后 <code>clone</code> 成三份。但是有一个问题，clone 的时候虽然选择了更换 <code>MAC</code> 地址，但是 起来之后发现 <code>ip</code> 地址还是没变。原来是 <code>systemd-networkd</code> 的老 bug。它不是根据 <code>MAC</code> 地址来决定是否换 IP，而是根据 <code>/etc/machine-id</code> 来计算出来一个值，如果这个值发生了变化，那么就更换 IP 地址。</p><p>所以就需要把 <code>/etc/machine-id</code> 给换一下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br><span class="line">uuidgen | sed <span class="string">'s/-//g'</span> &gt; /etc/machine-id</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><p>即可。</p><p>参考资料：</p><ul><li><a href="https://www.freedesktop.org/software/systemd/man/networkd.conf.html" target="_blank" rel="noopener">https://www.freedesktop.org/software/systemd/man/networkd.conf.html</a></li><li><a href="https://unix.stackexchange.com/questions/456763/new-ip-address-whereas-dhcp-lease-time-not-out" target="_blank" rel="noopener">https://unix.stackexchange.com/questions/456763/new-ip-address-whereas-dhcp-lease-time-not-out</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;解决Ubuntu-18-04-DHCP-ip失效问题&quot;&gt;&lt;a href=&quot;#解决Ubuntu-18-04-DHCP-ip失效问题&quot; class=&quot;headerlink&quot; title=&quot;解决Ubuntu 18.04 DHCP ip失效问题&quot;&gt;&lt;/a&gt;解决Ubuntu
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://ericshen.xyz/categories/Linux/"/>
    
    
      <category term="linux" scheme="https://ericshen.xyz/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>深入分析HashMap</title>
    <link href="https://ericshen.xyz/2016/04/03/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90HashMap/"/>
    <id>https://ericshen.xyz/2016/04/03/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90HashMap/</id>
    <published>2016-04-03T09:06:04.000Z</published>
    <updated>2020-05-04T11:22:57.199Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-传统-HashMap-的缺点"><a href="#1-传统-HashMap-的缺点" class="headerlink" title="1. 传统 HashMap 的缺点"></a>1. 传统 HashMap 的缺点</h1><ul><li><p>JDK 1.8 以前 HashMap 的实现是 数组+链表，即使哈希函数取得再好，也很难达到元素百分百均匀分布。</p></li><li><p>当 HashMap 中有大量的元素都存放到同一个桶中时，这个桶下有一条长长的链表，这个 时候 HashMap 就相当于一个单链表，假如单链表有 n 个元素，遍历的时间复杂度就是 O(n)，完全失去了优势。</p></li><li><p>针对这种情况，JDK 1.8 中引入了红黑树(查找时间复杂度为 O(logn))来优化这个问题。</p><a id="more"></a></li></ul><h1 id="2-JDK1-8中HashMap的数据结构"><a href="#2-JDK1-8中HashMap的数据结构" class="headerlink" title="2. JDK1.8中HashMap的数据结构"></a>2. JDK1.8中HashMap的数据结构</h1><blockquote><p><strong>HashMap</strong> 是数组+链表+红黑树(JDK1.8 增加了红黑树部分)实现的</p></blockquote><p><img src="https://i.loli.net/2020/05/03/5NqP4KTYOufAoHb.png" alt="image-20200503171753893"></p><h3 id="2-1-新增红黑树"><a href="#2-1-新增红黑树" class="headerlink" title="2.1. 新增红黑树"></a>2.1. 新增红黑树</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Tree bins</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Entry for Tree bins. Extends LinkedHashMap.Entry (which in turn</span></span><br><span class="line"><span class="comment"> * extends Node) so can be used as extension of either regular or</span></span><br><span class="line"><span class="comment"> * linked node.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">LinkedHashMap</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    TreeNode&lt;K,V&gt; parent;  <span class="comment">// red-black tree links</span></span><br><span class="line">    TreeNode&lt;K,V&gt; left;</span><br><span class="line">    TreeNode&lt;K,V&gt; right;</span><br><span class="line">    TreeNode&lt;K,V&gt; prev;    <span class="comment">// needed to unlink next upon deletion</span></span><br><span class="line">    <span class="keyword">boolean</span> red;</span><br><span class="line">    TreeNode(<span class="keyword">int</span> hash, K key, V val, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">        <span class="keyword">super</span>(hash, key, val, next);</span><br><span class="line">    &#125;</span><br><span class="line">  ......</span><br></pre></td></tr></table></figure><h3 id="2-2-红黑树的三个关键参数"><a href="#2-2-红黑树的三个关键参数" class="headerlink" title="2.2. 红黑树的三个关键参数"></a>2.2. 红黑树的三个关键参数</h3><table><thead><tr><th>TREEIFY_THRESHOLD</th><th align="center">UNTREEIFY_THRESHOLD</th><th align="center">MIN_TREEIFY_CAPACITY</th></tr></thead><tbody><tr><td>一个桶的树化阈值</td><td align="center">一个树的链表还原阈值</td><td align="center">哈希表的最小树形化容量</td></tr><tr><td>static final int TREEIFY_THRESHOLD = 8</td><td align="center">static final int UNTREEIFY_THRESHOLD = 6</td><td align="center">static final int MIN_TREEIFY_CAPACITY = 64</td></tr><tr><td>当桶中元素个数超过这个值时需要使用红黑树节点替换链表节点</td><td align="center">当扩容时，桶中元素个数小于这个值就会把树形的桶元素 还原(切分)为链 表结构</td><td align="center">当哈希表中的容量大于这个值时，表中的桶才能进行树形化 否则桶内元素太多时会扩容，而不是树形化 为了避免进行扩容、树形化选择的冲突，这个值不能小于 4 * TREEIFY_THRESHOLD</td></tr></tbody></table><h3 id="2-3-新增操作-桶的树形化-treeifyBin"><a href="#2-3-新增操作-桶的树形化-treeifyBin" class="headerlink" title="2.3. 新增操作: 桶的树形化 treeifyBin()"></a>2.3. 新增操作: 桶的树形化 treeifyBin()</h3><ul><li>在 Java 8 中，如果一个桶中的元素个数超过 TREEIFY_THRESHOLD(默认是 8 )，就使用<br>红黑树来替换链表，从而提高速度。 这个替换的方法叫 treeifyBin() 即树形化。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 将桶内所有的 链表节点 替换成 红黑树节点</span></span><br><span class="line">  <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">treeifyBin</span><span class="params">(Node&lt;K, V&gt;[] tab, <span class="keyword">int</span> hash)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, index;</span><br><span class="line">    Node&lt;K, V&gt; e;</span><br><span class="line"><span class="comment">// 如果当前哈希表为空，或者哈希表中元素的个数小于 进行树形化的阈值(默认为 64)， 就去新建/扩容</span></span><br><span class="line">    <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY) &#123;</span><br><span class="line">      resize();</span><br><span class="line">    &#125;</span><br><span class="line">    elseif((e = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果哈希表中的元素个数超过了 树形化阈值，进行树形化</span></span><br><span class="line">      <span class="comment">// e 是哈希表中指定位置桶里的链表节点，从第一个开始 </span></span><br><span class="line">      TreeNode&lt;K, V&gt; hd = <span class="keyword">null</span>, tl = <span class="keyword">null</span>; <span class="comment">// 红黑树的头、尾节点</span></span><br><span class="line">      <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="comment">//新建一个树形节点，内容和当前链表节点 e 一致 </span></span><br><span class="line">        TreeNode&lt;K, V&gt; p = replacementTreeNode(e, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (tl == <span class="keyword">null</span>) <span class="comment">//确定树头节点</span></span><br><span class="line">        &#123;</span><br><span class="line">          hd = p;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          p.prev = tl;</span><br><span class="line">          tl.next = p;</span><br><span class="line">        &#125;</span><br><span class="line">        tl = p;</span><br><span class="line">      &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">      <span class="comment">//让桶的第一个元素指向新建的红黑树头结点，以后这个桶里的元素就是红黑树而不是链表了</span></span><br><span class="line">      <span class="keyword">if</span> ((tab[index] = hd) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        hd.treeify(tab);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">TreeNode&lt;K, V&gt; <span class="title">replacementTreeNode</span><span class="params">(Node&lt;K, V&gt; p, Node&lt;K, V&gt; next)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> TreeNode&lt;&gt;(p.hash, p.key, p.value, next);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>上述操作做了这些事:</p><ul><li><p>根据哈希表中元素个数确定是扩容还是树形化 </p></li><li><p>如果是树形化遍历桶中的元素，创建相同个数的树形节点，复制内容，建立起联系</p></li><li><p>然后让桶第一个元素指向新建的树头结点，替换桶的链表内容为树形内容</p></li></ul></blockquote><h1 id="3-分析-HashMap-的-put-方法"><a href="#3-分析-HashMap-的-put-方法" class="headerlink" title="3. 分析 HashMap 的 put 方法"></a>3. 分析 HashMap 的 put 方法</h1><h3 id="3-1-HashMap-的-put-方法执行过程可以通过下图来理解"><a href="#3-1-HashMap-的-put-方法执行过程可以通过下图来理解" class="headerlink" title="3.1. HashMap 的 put 方法执行过程可以通过下图来理解"></a>3.1. HashMap 的 put 方法执行过程可以通过下图来理解</h3><p>  <img src="https://i.loli.net/2020/05/03/dpkWbOxEjQ3Kf8T.png" alt="dpkWbOxEjQ3Kf8T"></p><blockquote><ul><li><p>判断键值对数组 table[i]是否为空或为 null，否则执行 resize()进行扩容;</p></li><li><p>根据键值 key 计算 hash 值得到插入的数组索引 i，如果 table[i]==null，直接新建节点添加， 转向6，如果 table[i]不为空，转向3;</p></li><li><p>判断 table[i]的首个元素是否和 key 一样，如果相同直接覆盖 value，否则转向4，这里的相 同指的是 hashCode 以及 equals;</p></li><li><p>判断 table[i] 是否为 treeNode，即 table[i] 是否是红黑树，如果是红黑树，则直接在树中插 入键值对，否则转向5;</p></li><li><p>遍历 table[i]，判断链表长度是否大于 8，大于 8 的话把链表转换为红黑树，在红黑树中执 行插入操作，否则进行链表的插入操作;遍历过程中若发现 key 已经存在直接覆盖 value 即可;</p></li><li><p>插入成功后，判断实际存在的键值对数量 size 是否超多了最大容量 threshold，如果超过， 进行扩容。</p></li></ul></blockquote><ul><li><p>JDK1.8HashMap 的 put 方法源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 对 key 的 hashCode()做 hash</span></span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent, <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    Node&lt;K, V&gt;[] tab;</span><br><span class="line">    Node&lt;K, V&gt; p;</span><br><span class="line">    <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="comment">// 步骤1:tab 为空则创建</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>) &#123;</span><br><span class="line">      n = (tab = resize()).length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 步骤2:计算 index，并对 null 做处理 if((p=tab[i=(n-1)&amp;hash])==null)</span></span><br><span class="line">    tab[i] = newNode(hash, key, value, <span class="keyword">null</span>); </span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">      Node&lt;K, V&gt; e;</span><br><span class="line">      K k;</span><br><span class="line">      <span class="comment">// 步骤3:节点 key 存在，直接覆盖 value if (p.hash == hash &amp;&amp;</span></span><br><span class="line">      ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">      e = p;</span><br><span class="line">      <span class="comment">// 步骤4:判断该链为红黑树</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode) &#123;</span><br><span class="line">        e = ((TreeNode&lt;K, V&gt;) p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 步骤5:该链为链表</span></span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">          <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">            <span class="comment">//链表长度大于 8 转换为红黑树进行处理</span></span><br><span class="line">            <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st </span></span><br><span class="line">            &#123;</span><br><span class="line">              treeifyBin(tab, hash);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// key 已经存在直接覆盖 value </span></span><br><span class="line">          <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">              ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          p = e;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key </span></span><br><span class="line">        V oldValue = e.value;</span><br><span class="line">        <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>) &#123;</span><br><span class="line">          e.value = value;</span><br><span class="line">        &#125;</span><br><span class="line">        afterNodeAccess(e);</span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount;</span><br><span class="line"><span class="comment">// 步骤6:超过最大容量 就扩容 </span></span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold) &#123;</span><br><span class="line">      resize();</span><br><span class="line">    &#125;</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>JDK1.7HashMap 的 put 方法源码</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (table == EMPTY_TABLE) &#123;</span><br><span class="line">        inflateTable(threshold); <span class="comment">//空表 table 的话，根据 size 的阈值填充</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> putForNullKey(value);</span><br><span class="line">    <span class="keyword">int</span> hash = hash(key); <span class="comment">//成 hash，得到索引 Index 的映射</span></span><br><span class="line">    <span class="keyword">int</span> i = indexFor(hash, table.length);</span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    Entry&lt;K,V&gt; e = (Entry&lt;K,V&gt;)table[i];</span><br><span class="line">    <span class="keyword">for</span>(; e != <span class="keyword">null</span>; e = e.next) &#123; <span class="comment">//遍历当前索引的冲突链，找是否存在对应的 key</span></span><br><span class="line">        Object k;</span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;<span class="comment">//如果存 在对应的key， 则替换oldValue并返回oldValue</span></span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            e.value = value;</span><br><span class="line">            e.recordAccess(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//冲突链中不存在新写入的 Entry 的 key</span></span><br><span class="line">    modCount++;</span><br><span class="line">    addEntry(hash, key, value, i);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-HashMap-在-JDK-1-8-中新增的操作-红黑树中查找元素-getTreeNode"><a href="#3-2-HashMap-在-JDK-1-8-中新增的操作-红黑树中查找元素-getTreeNode" class="headerlink" title="3.2. HashMap 在 JDK 1.8 中新增的操作: 红黑树中查找元素 getTreeNode()"></a>3.2. HashMap 在 JDK 1.8 中新增的操作: 红黑树中查找元素 getTreeNode()</h3><ul><li><p>JDK1.8 中 hashMap getNode 操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Implements Map.get and related methods.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> hash hash for key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key the key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the node, or null if none</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="keyword">int</span> n; K k;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">            ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="keyword">return</span> first;</span><br><span class="line">        <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">return</span> e;</span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>HashMap 的查找方法是 get(),它通过计算指定 key 的哈希值后，调用内部方法 getNode(); </li><li>这个 getNode() 方法就是根据哈希表元素个数与哈希值求模(使用的公式是 (n - 1)</li></ul><p>&amp;hash)得到 key 所在的桶的头结点，如果头节点恰好是红黑树节点， 就调用红黑树节点的 getTreeNode() 方法，否则就遍历链表节点。</p><ul><li>getTreeNode 方法使通过调用树形节点的 find()方法进行查找:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> TreeNode&lt;K,V&gt; <span class="title">getTreeNode</span><span class="params">(<span class="keyword">int</span> h, Object k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((parent != <span class="keyword">null</span>) ? root() : <span class="keyword">this</span>).find(h, k, <span class="keyword">null</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>由于之前添加时已经保证这个树是有序的，因此查找时基本就是折半查找，效率很高。</p></li><li><p>这里和插入时一样，如果对比节点的哈希值和要查找的哈希值相等，就会判断 key 是否相</p></li></ul><p>等，相等就直接返回;不相等就从子树中递归查找。</p></blockquote></li></ul><h3 id="3-3-JDK1-8-VS-JDK1-7-扩容机制"><a href="#3-3-JDK1-8-VS-JDK1-7-扩容机制" class="headerlink" title="3.3. JDK1.8 VS JDK1.7 扩容机制"></a>3.3. JDK1.8 VS JDK1.7 扩容机制</h3><ul><li>下面举个例子说明下扩容过程。假设了我们的 hash 算法就是简单的用 key mod 一下表的大小(也就是数组的长度)。其中的哈希桶数组 table 的 size=2， 所以 key = 3、7、5，put 顺 序依次为 5、7、3。在 mod 2 以后都冲突在 table[1]这里了。这里假设负载因子 loadFactor=1， 即当键值对的实际大小 size 大于 table 的实际大小时进行扩容。接下来的三个步骤是哈希桶 数组 resize 成 4，然后所有的 Node 重新 rehash 的过程。</li></ul><p><img src="https://i.loli.net/2020/05/04/Ck5RnxSTwbXUfjm.png" alt="Ck5RnxSTwbXUfjm"></p><ul><li>下面我们讲解下 JDK1.8 做了哪些优化。经过观测可以发现，我们使用的是 2 次幂的扩展(指长 度扩为原来 2 倍)，所以，元素的位置要么是在原位置，要么是在原位置再移动 2 次幂的位置。 看下图可以明白这句话的意思，n 为 table 的长度，图(a)表示扩容前的 key1 和 key2 两种 key 确定索引位置的示例，图(b)表示扩容后 key1 和 key2 两种 key 确定索引位置的示例， 其中 hash1 是 key1 对应的哈希与高位运算结果。</li></ul><p><img src="https://i.loli.net/2020/05/04/XaP9x8RBtn5Zi4K.png" alt="image-20200504140954765"></p><ul><li><p>元素在重新计算 hash 之后，因为 n 变为 2 倍，那么 n-1 的 mask 范围在高位多 1bit(红色)，因 此新的 index 就会发生这样的变化:<br><img src="https://i.loli.net/2020/05/04/s6ncj98FyOqvwYk.png" alt="image-20200504141652310"></p></li><li><p>因此，我们在扩充 HashMap 的时候，不需要像 JDK1.7 的实现那样重新计算 hash，只需要看 看原来的 hash 值新增的那个 bit 是 1 还是 0 就好了，是 0 的话索引没变，是 1 的话索引变成“原 索引+oldCap”，可以看看下图为 16 扩充为 32 的 resize 示意图<br><img src="https://i.loli.net/2020/05/04/3z1KbQcylsBuhRo.png" alt="image-20200504141050042"></p></li><li><p>这个设计确实非常的巧妙，既省去了重新计算 hash 值的时间，而且同时，由于新增的 1bit 是 0 还是 1 可以认为是随机的，因此 resize 的过程，均匀的把之前的冲突的节点分散到新的 bucket 了。这一块就是 JDK1.8 新增的优化点。</p></li></ul><blockquote><p>参考资料:</p></blockquote><ol><li><a href="https://blog.csdn.net/cyp331203/article/details/42677833" target="_blank" rel="noopener">【算法导论】红黑树详解之一(插入)</a></li><li><a href="https://blog.csdn.net/lc0817/article/details/48213435/" target="_blank" rel="noopener">jdk1.8 HashMap性能提升</a><img src="/Users/ericshen/Library/Application%20Support/marktext/images/2020-05-04-19-22-51-image.png" alt=""></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-传统-HashMap-的缺点&quot;&gt;&lt;a href=&quot;#1-传统-HashMap-的缺点&quot; class=&quot;headerlink&quot; title=&quot;1. 传统 HashMap 的缺点&quot;&gt;&lt;/a&gt;1. 传统 HashMap 的缺点&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;JDK 1.8 以前 HashMap 的实现是 数组+链表，即使哈希函数取得再好，也很难达到元素百分百均匀分布。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当 HashMap 中有大量的元素都存放到同一个桶中时，这个桶下有一条长长的链表，这个 时候 HashMap 就相当于一个单链表，假如单链表有 n 个元素，遍历的时间复杂度就是 O(n)，完全失去了优势。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;针对这种情况，JDK 1.8 中引入了红黑树(查找时间复杂度为 O(logn))来优化这个问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://ericshen.xyz/categories/Java/"/>
    
    
      <category term="map" scheme="https://ericshen.xyz/tags/map/"/>
    
      <category term="collection" scheme="https://ericshen.xyz/tags/collection/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://ericshen.xyz/2015/05/01/hello-world/"/>
    <id>https://ericshen.xyz/2015/05/01/hello-world/</id>
    <published>2015-05-01T12:20:31.000Z</published>
    <updated>2020-05-02T06:03:44.646Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
